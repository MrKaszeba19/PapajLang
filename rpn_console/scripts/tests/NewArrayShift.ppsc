@use(Array)

function {
	[ 1 1 20 seq ] -> T1
	$T1 shift -> T2

	"TEST: shift" println
	"– function that returns an array with popped entity from its head," println
	"  preserving the previous state" println
	"T1: " print $T1 println
	"T2: " print $T2 println
	newln
} -> f1

function {
	[ 1 1 20 seq ] -> T1
	$T1 shift! -> T2

	"TEST: shift! " println
	"– function that returns an array with popped entity from its head," println
	"  overwriting the previous state" println
	"T1: " print $T1 println
	"T2: " print $T2 println
	newln
} -> f2

function {
	[ 1 1 20 seq ] -> T1
	$T1 shift!!

	"TEST: shift!!" println
	"– procedure that pops an entity from the array head, " println
	"  overwriting the previous state" println
	"T1: " print $T1 println
	newln
} -> f3


f1 f2 f3
