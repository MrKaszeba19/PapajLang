function getRealCPUArch() : String;
begin
    Result := UnixSysInfo('architecture');
end;

function getRealCPUBits() : LongInt;
begin
    Result := StrToInt(executeCommand('getconf LONG_BIT', GetEnvironmentVariable('SHELL')));
end;

function getRealCPUThreads() : LongInt;
begin
    Result := StrToInt(trim(executeCommand('nproc --all', GetEnvironmentVariable('SHELL'))));
    //Result := GetCPUCount;
    //Result := sysconf(83); 
end;

function getRAMUsageByPID(pid : String) : String;
var
    fn : Text;
    s  : String;
begin
    // /proc/PID/status
    assignfile(fn, '/proc/'+ParamStr(1)+'/status');
    reset(fn);
    while not eof(fn) do
    begin
        readln(fn, s);
        if (LeftStr(s, 6) = 'VmRSS:') then 
        begin
            s := TrimLeft(RightStr(s, Length(s)-6));
            break;
        end;
    end;
    closefile(fn);
    Result := s;
end;

function getCPUName(index : LongInt) : String;
var
    fn : Text;
    s  : String;
    id : LongInt = 0;
begin
    assignfile(fn, '/proc/cpuinfo');
    reset(fn);
    while not eof(fn) do
    begin
        readln(fn, s);
        if (LeftStr(s, 10) = 'model name') then 
        begin
            if (id < index) then begin
                id := id + 1;
                continue;
            end;
            s := TrimLeft(RightStr(s, Length(s)-10));
            s := RightStr(s, Length(s)-2);
            if (id = index) then break;
        end;
    end;
    closefile(fn);
    Result := s;
end;

function getUptime() : Extended;
var
    fn : Text;
    s  : String;
    t  : Extended;
    fl : LongInt;
begin
    assignfile(fn, '/proc/uptime');
    reset(fn);
    readln(fn, s);
    s := s.Split([' '])[0];
    closefile(fn);
    val(s, t, fl);
    if fl = 0 
        then Result := t
        else Result := -1;
end;

function getRAMTotal() : Extended;
var
    fn : Text;
    s  : String;
begin
    assignfile(fn, '/proc/meminfo');
    reset(fn);
    while not eof(fn) do
    begin
        readln(fn, s);
        if (LeftStr(s, 9) = 'MemTotal:') then 
        begin
            //writeln(s);
            s := TrimLeft(RightStr(s, Length(s)-9));
            s := LeftStr(s, Length(s)-3);
            break;
        end;
    end;
    closefile(fn);
    Result := StrToInt(s);
end;

function getRAMAvailable() : Extended;
var
    fn : Text;
    s  : String;
begin
    assignfile(fn, '/proc/meminfo');
    reset(fn);
    while not eof(fn) do
    begin
        readln(fn, s);
        if (LeftStr(s, 13) = 'MemAvailable:') then 
        begin
            //writeln(s);
            s := TrimLeft(RightStr(s, Length(s)-13));
            s := LeftStr(s, Length(s)-3);
            break;
        end;
    end;
    closefile(fn);
    Result := StrToInt(s);
end;

function getRAMUsage() : Extended;
var
    fn   : Text;
    s, t : String;
    flag : Boolean = False;
begin
    assignfile(fn, '/proc/meminfo');
    reset(fn);
    while not eof(fn) do
    begin
        readln(fn, s);
        if (LeftStr(s, 9) = 'MemTotal:') then 
        begin
            s := TrimLeft(RightStr(s, Length(s)-9));
            s := LeftStr(s, Length(s)-3);
            Flag := True;
            break;
        end;
    end;
    if Flag then
        while not eof(fn) do
        begin
            readln(fn, t);
            if (LeftStr(t, 13) = 'MemAvailable:') then 
            begin
                t := TrimLeft(RightStr(t, Length(t)-13));
                t := LeftStr(t, Length(t)-3);
                break;
            end;
        end;
    closefile(fn);
    if Flag 
        then Result := StrToInt(s) - StrToInt(t)
        else Result := -1;
end;


function getRAMFree() : Extended;
var
    fn : Text;
    s  : String;
begin
    assignfile(fn, '/proc/meminfo');
    reset(fn);
    while not eof(fn) do
    begin
        readln(fn, s);
        if (LeftStr(s, 8) = 'MemFree:') then 
        begin
            //writeln(s);
            s := TrimLeft(RightStr(s, Length(s)-8));
            s := LeftStr(s, Length(s)-3);
            break;
        end;
    end;
    closefile(fn);
    Result := StrToInt(s);
end;

function getSwapTotal() : Extended;
var
    fn : Text;
    s  : String;
begin
    assignfile(fn, '/proc/meminfo');
    reset(fn);
    while not eof(fn) do
    begin
        readln(fn, s);
        if (LeftStr(s, 10) = 'SwapTotal:') then 
        begin
            //writeln(s);
            s := TrimLeft(RightStr(s, Length(s)-10));
            s := LeftStr(s, Length(s)-3);
            break;
        end;
    end;
    closefile(fn);
    Result := StrToInt(s);
end;

function getSwapFree() : Extended;
var
    fn : Text;
    s  : String;
begin
    assignfile(fn, '/proc/meminfo');
    reset(fn);
    while not eof(fn) do
    begin
        readln(fn, s);
        if (LeftStr(s, 9) = 'SwapFree:') then 
        begin
            //writeln(s);
            s := TrimLeft(RightStr(s, Length(s)-9));
            s := LeftStr(s, Length(s)-3);
            break;
        end;
    end;
    closefile(fn);
    Result := StrToInt(s);
end;

function getSwapUsage() : Extended;
var
    fn   : Text;
    s, t : String;
    flag : Boolean = False;
begin
    assignfile(fn, '/proc/meminfo');
    reset(fn);
    while not eof(fn) do
    begin
        readln(fn, s);
        if (LeftStr(s, 10) = 'SwapTotal:') then 
        begin
            s := TrimLeft(RightStr(s, Length(s)-10));
            s := LeftStr(s, Length(s)-3);
            Flag := True;
            break;
        end;
    end;
    if Flag then
        while not eof(fn) do
        begin
            readln(fn, t);
            if (LeftStr(t, 9) = 'SwapFree:') then 
            begin
                t := TrimLeft(RightStr(t, Length(t)-9));
                t := LeftStr(t, Length(t)-3);
                break;
            end;
        end;
    closefile(fn);
    if Flag 
        then Result := StrToInt(s) - StrToInt(t)
        else Result := -1;
end;

function getScreenResolution() : String;
var
    s  : String;
begin
    s := executeCommand('xrandr | fgrep ''*''', GetEnvironmentVariable('SHELL'));
    s := TrimLeft(s);
    s := s.Split([' '])[0];
    Result := s;
end;

function getScreenWidth() : Extended;
var
    s  : String;
begin
    s := executeCommand('xrandr | fgrep ''*''', GetEnvironmentVariable('SHELL'));
    s := TrimLeft(s);
    s := s.Split([' '])[0];
    s := s.Split(['x'])[0];
    Result := StrToInt(s);
end;

function getScreenHeight() : Extended;
var
    s  : String;
begin
    s := executeCommand('xrandr | fgrep ''*''', GetEnvironmentVariable('SHELL'));
    s := TrimLeft(s);
    s := s.Split([' '])[0];
    s := s.Split(['x'])[1];
    Result := StrToInt(s);
end;

// /proc/meminfo - ram and swap
// /proc/cpuinfo - cpu
// lscpu - better cpu
// /proc/uptime
// /proc/diskstats

//SwapTotal:       8299516 kB
//SwapFree:        8279292 kB


function getShell() : String;
begin
    Result := GetEnvironmentVariable('SHELL'); 
end;

// /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq

function getCPUMaxFreq(index : LongInt) : Extended;
var
    fn : Text;
    s  : String;
begin
    assignfile(fn, '/sys/devices/system/cpu/cpu'+IntToStr(index)+'/cpufreq/scaling_max_freq');
    reset(fn);
    readln(fn, s);
    closefile(fn);
    Result := StrToInt(s);
end;

function getCPUMinFreq(index : LongInt) : Extended;
var
    fn : Text;
    s  : String;
begin
    assignfile(fn, '/sys/devices/system/cpu/cpu'+IntToStr(index)+'/cpufreq/scaling_min_freq');
    reset(fn);
    readln(fn, s);
    closefile(fn);
    Result := StrToInt(s);
end;

function getCPUCurFreq(index : LongInt) : Extended;
var
    fn : Text;
    s  : String;
begin
    assignfile(fn, '/sys/devices/system/cpu/cpu'+IntToStr(index)+'/cpufreq/scaling_cur_freq');
    reset(fn);
    readln(fn, s);
    closefile(fn);
    Result := StrToInt(s);
end;

function getCPUBaseFreq(index : LongInt) : Extended;
var
    fn : Text;
    s  : String;
begin
    assignfile(fn, '/sys/devices/system/cpu/cpu'+IntToStr(index)+'/cpufreq/base_frequency');
    reset(fn);
    readln(fn, s);
    closefile(fn);
    Result := StrToInt(s);
end;

function getCPUUsage(index : LongInt = -1) : Extended;
var
    fn   : Text;
    s    : String;
    t    : String;
    t0   : LongInt;
    ms   : TStringArray;
    ml   : LongInt;
    id   : LongInt;
    st   : array of LongInt; 
    sum1 : LongInt = 0;
    idl1 : LongInt = -1;
    usd1 : LongInt = -1;
    usg1 : Extended = -1;
    sum2 : LongInt = 0;
    idl2 : LongInt = -1;
    usd2 : LongInt = -1;
    usg2 : Extended = -1;
begin
    if index = -1 then
    begin
        t := 'cpu';
        t0 := 3;
    end else begin
        t := 'cpu'+IntToStr(index);
        t0 := Length(t);
    end;
    // test 1
    assignfile(fn, '/proc/stat');
    reset(fn);
    while not eof(fn) do
    begin
        readln(fn, s);
        if (LeftStr(s, t0) = t) then 
        begin
            s := Trim(DelSpace1(RightStr(s, Length(s)-t0)));
            ms := s.Split([' ']);
            ml := Length(ms);
            SetLength(st, ml);
            for id := 0 to ml-1 do st[id] := StrToInt(ms[id]);
            // sum all 
            for id := 0 to ml-1 do sum1 := sum1 + st[id];
            // calc time spent idle
            idl1 := st[3];
            // Calc time spent working 
            usd1 := sum1 - idl1; 
            // calc ratio
            usg1 := 1.0*usd1 / sum1;
            break;
        end;
    end;
    closefile(fn);
    Delay(50);
    // test 2
    assignfile(fn, '/proc/stat');
    reset(fn);
    while not eof(fn) do
    begin
        readln(fn, s);
        if (LeftStr(s, t0) = t) then 
        begin
            s := Trim(DelSpace1(RightStr(s, Length(s)-t0)));
            ms := s.Split([' ']);
            ml := Length(ms);
            SetLength(st, ml);
            for id := 0 to ml-1 do st[id] := StrToInt(ms[id]);
            // sum all and subtract old sum
            for id := 0 to ml-1 do sum2 := sum2 + st[id];
            //writeln(sum2);
            //writeln(sum1);
            sum2 := sum2 - sum1;
            // calc time spent idle and subtract old idle
            idl2 := st[3];
            idl2 := idl2 - idl1;
            // Calc time spent working 
            usd2 := sum2 - idl2; 
            // calc ratio
            //writeln(sum2);
            usg2 := 1.0*usd2 / sum2;
            break;
        end;
    end;
    closefile(fn);
    //Result := usg1;
    Result := usg2;
    //SetLength(st, 0);
end;