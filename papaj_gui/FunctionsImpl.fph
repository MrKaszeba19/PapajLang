procedure read_sourcefile(filename : String; var env : PSEnvironment; var db : PSCommandDB);
var
  fun, S : String;
  fp     : Text;
begin
  fun := '';
  assignfile(fp, filename);
  reset(fp);
  while not eof(fp) do
  begin
    readln(fp, S);
    if (S <> '') then S := trim(S);
    fun := fun + #10 + S;
  end;
  closefile(fp);
  //pocz := parseScoped(fun, pocz, sets, vardb);
  env.executePSCode(fun);
end;

// COMMANDS' EXECUTION

function lib_ultravanilla(i : String; var env : PSEnvironment; var db : PSCommandDB) : Boolean;
var
	Found          : Boolean;
	x, y, z, a     : ComplexType;
	Size           : Longint;
	index          : Longint;
	IntEax         : LongInt;
    IntEax2        : ShortInt;
	StrEbx         : String;
	StrEcx         : String;
	EntEax, EntEbx : Entity;
	ExtEax         : ComplexType;
    LogEax         : Boolean;
	HelpETable     : array of Entity;
begin
	Found := true;
	case i of
        're' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(y.Re));
        end;
        'im' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(y.Im));
        end;
        '^' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := pow(x,y);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'pow' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := pow(x,y);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'log' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := ln(x)/ln(y);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'exp' : begin
          	if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := exp(y);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'ln' : begin
            if (env.Settings.StrictType) and (assertComplexLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := ln(y);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'realroot' : begin
            // todo: change exception to real numbers
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := realroot(x.Re,y.Re);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'complexroot' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := root(x,y);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'root' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            if (isReal(x) and isReal(y))
            then z := realroot(x.Re,y.Re)
            else z := root(x,y);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'abs' : begin
          	if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := Abs(y);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'arg' : begin
          	if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := Arg(y);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        


        // constants
        'NULL' : begin
            stack_push(env.Stack[env.Settings.StackPointer], buildNull());
        end;
        '[]' : begin
            stack_push(env.Stack[env.Settings.StackPointer], buildNewArray(env.Stack, env.Settings, 0));
        end;
        'INF' : begin
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(Infinity));
        end;
        '+INF' : begin
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(Infinity));
        end;
        '-INF' : begin
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(-Infinity));
        end;
        '+Inf' : begin
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(Infinity));
        end;
        '-Inf' : begin
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(-Infinity));
        end;
        'NaN' : begin
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(NaN));
        end;
        '+i' : begin
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(Imag()));
        end;
        '-i' : begin
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(-Imag()));
        end;
        '+j' : begin
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(Imag()));
        end;
        '-j' : begin
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(-Imag()));
        end;

        // unary
		'trunc' : begin
            // todo: real
          	if (env.Settings.StrictType) and (assertRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := ftrunc(y.Re);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'frac' : begin
            if (env.Settings.StrictType) and (assertRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(ffrac(z.Re)));
        end;
		'sqrt' : begin
          	if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := sqrt(y);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;

        // String operations
        
        'call' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TFUN, i)) then Exit;  
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            env.doFunction(EntEax.Num2);
        end;
        'callIf' : begin
            if (env.Settings.StrictType) and (assertEitherLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TFUN, TBOO, i)) then Exit; 
            if (stack_get(env.Stack[env.Settings.StackPointer]).EntityType = TFUN) then
            begin
                if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TFUN, i)) then Exit;  
                EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TBOO, i)) then Exit;  
                if stack_pop(env.Stack[env.Settings.StackPointer]).Num = 0 then 
                    env.doFunction(EntEax.Num2);
            end else begin
                if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TBOO, i)) then Exit;  
                if stack_pop(env.Stack[env.Settings.StackPointer]).Num = 0 then 
                begin
                    if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TFUN, i)) then Exit;  
                    EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                    env.doFunction(EntEax.Num2);
                end else begin
                    if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TFUN, i)) then Exit;  
                    //StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
                end;
            end;
        end;   
        'callUnless' : begin
            if (env.Settings.StrictType) and (assertEitherLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TFUN, TBOO, i)) then Exit; 
            if (stack_get(env.Stack[env.Settings.StackPointer]).EntityType = TFUN) then
            begin
                if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TFUN, i)) then Exit;  
                EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TBOO, i)) then Exit;  
                if stack_pop(env.Stack[env.Settings.StackPointer]).Num <> 0 then 
                    env.doFunction(EntEax.Num2);
            end else begin
                if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TBOO, i)) then Exit;  
                if stack_pop(env.Stack[env.Settings.StackPointer]).Num <> 0 then 
                begin
                    if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TFUN, i)) then Exit;  
                    EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                    env.doFunction(EntEax.Num2);
                end else begin
                    if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TFUN, i)) then Exit;  
                    //StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
                end;
            end;
        end;   
        'callTimes' : begin
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TFUN, i)) then Exit;  
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            for IntEax := 1 to Int(y) do
                env.doFunction(EntEax.Num2);
        end; 
        'callWhile' : begin
            if (env.Settings.StrictType) and (assertEitherLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TFUN, TEXP, i)) then Exit; 
            if (stack_get(env.Stack[env.Settings.StackPointer]).EntityType = TFUN) then
            begin
                if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TFUN, i)) then Exit;  
                EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TFUN, i)) then Exit;  
                EntEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
                //doWhileOld(StrEbx, EntEax.Str, env.Stack, env.Settings, env.Variables);
                env.doWhile(db, EntEbx.Num2, EntEax.Num2);
            end else begin
                if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TFUN, i)) then Exit;  
                EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TEXP, i)) then Exit;  
                EntEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
                //doWhileOld(StrEbx, EntEax.Str, env.Stack, env.Settings, env.Variables);
                env.doDoWhile(db, EntEbx.Num2, EntEax.Num2);
            end;
            //while (True) do
            //begin
            //    env.Stack := parseOpen(StrEbx, env.Stack, env.Settings, env.Variables);
            //    if (trunc(stack_pop(env.Stack[env.Settings.StackPointer]).Num) <> 0) then break;
            //    //doFunction(EntEax, env.Stack, env.Settings, env.Variables);
            //    env.Stack := parseOpen(EntEax.Str, env.Stack, env.Settings, env.Variables);
            //end;
        end; 
        'callUntil' : begin
            if (env.Settings.StrictType) and (assertEitherLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TFUN, TEXP, i)) then Exit; 
            if (stack_get(env.Stack[env.Settings.StackPointer]).EntityType = TFUN) then
            begin
                if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TFUN, i)) then Exit;  
                EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TFUN, i)) then Exit;  
                EntEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
                env.doUntil(db, EntEbx.Num2, EntEax.Num2);
            end else begin
                if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TFUN, i)) then Exit;  
                EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TEXP, i)) then Exit;  
                EntEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
                env.doDoUntil(db, EntEbx.Num2, EntEax.Num2);
            end;
        end;        

        'break' : begin
            env.Settings.KeepWorking := 0;
        end;
        'continue' : begin
            env.Settings.KeepWorking := 1;
        end;

        'rand' : begin
            z := random();
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'random' : begin
            // todo: real
          	if (env.Settings.StrictType) and (assertRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            y := stack_get(env.Stack[env.Settings.StackPointer]).Num;
            stack_pop(env.Stack[env.Settings.StackPointer]);
            z := random(trunc(y.Re));
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;

        // single operands
        'scannum' : begin
            EntEax := scan_number();
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            stack_push(env.Stack[env.Settings.StackPointer], EntEax);
        end;
        'scanstr' : begin
            EntEax := scan_string();
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit; 
            stack_push(env.Stack[env.Settings.StackPointer], EntEax);
        end;
        //'tilleof' : begin
        //  	Steps := -1;
        //end;
        'clone' : begin
            EntEax := stack_get(env.Stack[env.Settings.StackPointer]);
            stack_push(env.Stack[env.Settings.StackPointer], EntEax);
        end;
        'type' : begin
          	EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
          	stack_push(env.Stack[env.Settings.StackPointer], buildString(getEntityTypeName(EntEax.EntityType)));
        end;
        'swapAt' : begin
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            index := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            swapEntities(env.Stack[env.Settings.StackPointer].Values[index-1], env.Stack[env.Settings.StackPointer].Values[index]);
        end;
        'swapAt2' : begin
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            index := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            IntEax := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            swapEntities(env.Stack[env.Settings.StackPointer].Values[IntEax], env.Stack[env.Settings.StackPointer].Values[index]);
        end;

        // casting types
        'toString' : begin
          	EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            if (EntEax.EntityType = TVEC) then
            begin
                stack_push(env.Stack[env.Settings.StackPointer], buildString(stack_showArrayPS(env.Stack[EntEax.Num2], env.Stack, env.Settings.Mask))); 
            end else if (EntEax.EntityType = TNUM) then
            begin
                stack_push(env.Stack[env.Settings.StackPointer], buildString(toStringFormat(EntEax.Num, env.Settings.Mask)));
            end else begin
                stack_push(env.Stack[env.Settings.StackPointer], buildString(EntEax.Str));
            end;
        end;
        'toNumber' : begin
            //if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit; 
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            Val(EntEax.Str, ExtEax, IntEax2); 
            if (IntEax2 = 0) then begin
             	stack_push(env.Stack[env.Settings.StackPointer], buildNumber(ExtEax));
            end else begin
            	if (env.Settings.StrictType) and (EntEax.EntityType <> TBOO) and (EntEax.EntityType <> TDAT) 
                    then stack_push(env.Stack[env.Settings.StackPointer], buildException('EType:CNonNumeric: Got a non-numeric entity at "toNumber".'))
            	    else stack_push(env.Stack[env.Settings.StackPointer], buildNumber(EntEax.Num));
            end;
        end;
        'toBoolean' : begin
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            if EntEax.Num = 0 then LogEax := true else LogEax := false;
            stack_push(env.Stack[env.Settings.StackPointer], buildBoolean(LogEax));
        end;
        'toArray' : begin
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            IntEax := trunc(stack_pop(env.Stack[env.Settings.StackPointer]).Num.Re);
            // expection about boundaries
            if (IntEax > stack_size(env.Stack[env.Settings.StackPointer])) then IntEax := stack_size(env.Stack[env.Settings.StackPointer]); 
            stack_push(env.Stack[env.Settings.StackPointer], buildNewArray(env.Stack, env.Settings, IntEax));
        end;
        'makeChar' : begin
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            stack_push(env.Stack[env.Settings.StackPointer], buildString(Chr(Int(y))));
        end;
        'getAscii' : begin
            if (env.Settings.StrictType) and (assertCharLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            StrEcx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(Ord(StrEcx[1])));
        end;
        'isNumber' : begin
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            if EntEax.EntityType = TNUM 
                then stack_push(env.Stack[env.Settings.StackPointer], buildBoolean(True))
                else stack_push(env.Stack[env.Settings.StackPointer], buildBoolean(False));
        end;
        'isBoolean' : begin
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            if EntEax.EntityType = TBOO
                then stack_push(env.Stack[env.Settings.StackPointer], buildBoolean(True))
                else stack_push(env.Stack[env.Settings.StackPointer], buildBoolean(False));
        end;
        'isString' : begin
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            if EntEax.EntityType = TSTR 
                then stack_push(env.Stack[env.Settings.StackPointer], buildBoolean(True))
                else stack_push(env.Stack[env.Settings.StackPointer], buildBoolean(False));
        end;
        'isArray' : begin
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            if EntEax.EntityType = TVEC 
                then stack_push(env.Stack[env.Settings.StackPointer], buildBoolean(True))
                else stack_push(env.Stack[env.Settings.StackPointer], buildBoolean(False));
        end;
        'isNull' : begin
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            if EntEax.EntityType = TNIL 
                then stack_push(env.Stack[env.Settings.StackPointer], buildBoolean(True))
                else stack_push(env.Stack[env.Settings.StackPointer], buildBoolean(False));
        end;
        'isException' : begin
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            if EntEax.EntityType = TEXC 
                then stack_push(env.Stack[env.Settings.StackPointer], buildBoolean(True))
                else stack_push(env.Stack[env.Settings.StackPointer], buildBoolean(False));
        end;
        'isLogicalExpression' : begin
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            if EntEax.EntityType = TEXP 
                then stack_push(env.Stack[env.Settings.StackPointer], buildBoolean(True))
                else stack_push(env.Stack[env.Settings.StackPointer], buildBoolean(False));
        end;
        'isFunction' : begin
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            if EntEax.EntityType = TFUN 
                then stack_push(env.Stack[env.Settings.StackPointer], buildBoolean(True))
                else stack_push(env.Stack[env.Settings.StackPointer], buildBoolean(False));
        end;
        'isDateTime' : begin
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            if EntEax.EntityType = TDAT 
                then stack_push(env.Stack[env.Settings.StackPointer], buildBoolean(True))
                else stack_push(env.Stack[env.Settings.StackPointer], buildBoolean(False));
        end;
        //
        'length' : begin
            if (env.Settings.StrictType) and (assertEitherLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, TVEC, i)) then Exit; 
            if (stack_get(env.Stack[env.Settings.StackPointer]).EntityType = TVEC) then
            begin
                //IntEax := trunc(stack_get(env.Stack[env.Settings.StackPointer]).Num);
                IntEax := stack_pop(env.Stack[env.Settings.StackPointer]).Num2;
                stack_push(env.Stack[env.Settings.StackPointer], buildNumber(stack_size(env.Stack[IntEax])));
            end else begin
                //StrEbx := stack_get(env.Stack[env.Settings.StackPointer]).Str;
                StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
                stack_push(env.Stack[env.Settings.StackPointer], buildNumber(Length(StrEbx)));
            end;
        end;
        'rprint' : begin
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            if (EntEax.EntityType = TBOO) then writeOnConsole(EntEax.Str);
            if (EntEax.EntityType = TNUM) then writeOnConsole(toStringFormat(EntEax.Num, env.Settings.Mask));
            if (EntEax.EntityType = TSTR) then writeOnConsole(EntEax.Str);
            if (EntEax.EntityType = TNIL) then writeOnConsole(EntEax.Str);
            if (EntEax.EntityType = TVEC) then writeOnConsole(stack_showArrayPS(env.Stack[EntEax.Num2], env.Stack, env.Settings.Mask));
            if (EntEax.EntityType = TDAT) then writeOnConsole(EntEax.Str);
        end;
        'rprintln' : begin
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            if (EntEax.EntityType = TBOO) then writelnOnConsole(EntEax.Str);
            if (EntEax.EntityType = TNUM) then writelnOnConsole(toStringFormat(EntEax.Num, env.Settings.Mask));
            if (EntEax.EntityType = TSTR) then writelnOnConsole(EntEax.Str);
            if (EntEax.EntityType = TNIL) then writelnOnConsole(EntEax.Str);
            if (EntEax.EntityType = TVEC) then writelnOnConsole(stack_showArrayPS(env.Stack[EntEax.Num2], env.Stack, env.Settings.Mask));
            if (EntEax.EntityType = TDAT) then writelnOnConsole(EntEax.Str);
        end;
        'colprint' : begin
        	if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;  
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            if (EntEax.EntityType = TBOO) then write(EntEax.Str : Int(y));
            if (EntEax.EntityType = TNUM) then write(toStringFormat(EntEax.Num, env.Settings.Mask) : Int(y));
            if (EntEax.EntityType = TSTR) then write(EntEax.Str : Int(y));
            if (EntEax.EntityType = TNIL) then write(EntEax.Str : Int(y));
            if (EntEax.EntityType = TVEC) then write(stack_showArrayPS(env.Stack[EntEax.Num2], env.Stack, env.Settings.Mask) : Int(y));
            if (EntEax.EntityType = TDAT) then write(EntEax.Str : Int(y));
        end;
        'colprintln' : begin
        	if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;  
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            if (EntEax.EntityType = TNUM) then writeln(toStringFormat(EntEax.Num, env.Settings.Mask) : Int(y));
            if (EntEax.EntityType = TSTR) then writeln(EntEax.Str : Int(y));
            if (EntEax.EntityType = TNIL) then writeln(EntEax.Str : Int(y));
            if (EntEax.EntityType = TBOO) then writeln(EntEax.Str : Int(y));
            if (EntEax.EntityType = TVEC) then writeln(stack_showArrayPS(env.Stack[EntEax.Num2], env.Stack, env.Settings.Mask) : Int(y));
            if (EntEax.EntityType = TDAT) then writeln(EntEax.Str : Int(y));
        end;
        'newln' : begin
            writelnOnConsole('');
        end;
        'status' : begin
            writeOnConsole(stack_show(env.Stack[env.Settings.StackPointer], env.Settings.Mask));
        end;
        'statusln' : begin
            writelnOnConsole(stack_show(env.Stack[env.Settings.StackPointer], env.Settings.Mask));
        end;
        'autocolstatus' : begin
            writeOnConsole(stack_showBeautiful(env.Stack[env.Settings.StackPointer], env.Settings.Mask));
        end;
        'autocolstatusln' : begin
            writelnOnConsole(stack_showBeautiful(env.Stack[env.Settings.StackPointer], env.Settings.Mask));
        end;
        'statusfull' : begin
            writelnOnConsole(stack_showFull(env.Stack[env.Settings.StackPointer]));
        end;
        'getchar' : begin
            readln();
        end;
        //'rem' : begin
        //	stack_justpop(env.Stack[env.Settings.StackPointer]);
        //end;
        'frontrem' : begin
        	stack_justpopFront(env.Stack[env.Settings.StackPointer], 0);
        end;
        //'qshift' : begin
        //	stack_push(env.Stack[env.Settings.StackPointer], stack_firstpop(env.Stack[env.Settings.StackPointer]));
        //end;
        'clear' : begin
        	stack_clear(env.Stack[env.Settings.StackPointer]);
        end;
        'keep' : begin
          	if (env.Settings.StrictType) and (assertPositiveNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
          	y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
          	SetLength(HelpETable, trunc(y.Re));
          	for index := 0 to Int(y)-1 do HelpETable[index] := stack_pop(env.Stack[env.Settings.StackPointer]);
          	stack_clear(env.Stack[env.Settings.StackPointer]);
          	for index := Int(y)-1 downto 0 do stack_push(env.Stack[env.Settings.StackPointer], HelpETable[index]);
          	SetLength(HelpETable, 0);
        end;
        'copy' : begin
          	if (env.Settings.StrictType) and (assertPositiveNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            y := stack_get(env.Stack[env.Settings.StackPointer]).Num;
            stack_pop(env.Stack[env.Settings.StackPointer]);
            SetLength(HelpETable, Int(y));
            for index := 0 to Int(y)-1 do HelpETable[index] := stack_pop(env.Stack[env.Settings.StackPointer]);
            for index := trunc(y.Re)-1 downto 0 do stack_push(env.Stack[env.Settings.StackPointer], HelpETable[index]);
            for index := trunc(y.Re)-1 downto 0 do stack_push(env.Stack[env.Settings.StackPointer], HelpETable[index]);
            SetLength(HelpETable, 0);
        end;
        'mcopy' : begin
          	if (env.Settings.StrictType) and (assertPositiveNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
          	y := stack_get(env.Stack[env.Settings.StackPointer]).Num;
          	stack_pop(env.Stack[env.Settings.StackPointer]);
          	SetLength(HelpETable, Int(y));
          	for index := 0 to Int(y)-1 do begin
          		HelpETable[index] := stack_get(env.Stack[env.Settings.StackPointer]);
          		stack_pop(env.Stack[env.Settings.StackPointer]);
          	end;
          	for index := Int(y)-1 downto 0 do stack_push(env.Stack[env.Settings.StackPointer], HelpETable[index]);
          	for index := 0 to Int(y)-1 do stack_push(env.Stack[env.Settings.StackPointer], HelpETable[index]);
          	SetLength(HelpETable, 0);
        end;
        'sort' : begin
            if (stack_get(env.Stack[env.Settings.StackPointer]).EntityType = TNUM) then
            begin
                if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
                size := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
                if (size >= 0) then
                begin
                    SetLength(HelpETable, size);
                    HelpETable := stack_popCollection(env.Stack[env.Settings.StackPointer], size);
                    if (env.Settings.sorttype = 0) then bubblesort(HelpETable);
                    if (env.Settings.sorttype = 1) then quicksort(HelpETable);
                    if (env.Settings.sorttype = 2) then mergesort(HelpETable);
                    if (env.Settings.sorttype = 3) then bogosort(HelpETable);
                    stack_pushCollection(env.Stack[env.Settings.StackPointer], HelpETable);
                    SetLength(HelpETable, 0);
                end;
            end else Found := false;
        end;
        'numsort' : begin
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            size := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            if (size >= 0) then
            begin
                SetLength(HelpETable, size);
                HelpETable := stack_popCollection(env.Stack[env.Settings.StackPointer], size);
                if (env.Settings.sorttype = 0) then bubblesort(HelpETable);
                if (env.Settings.sorttype = 1) then quicksort(HelpETable);
                if (env.Settings.sorttype = 2) then mergesort(HelpETable);
                if (env.Settings.sorttype = 3) then bogosort(HelpETable);
                stack_pushCollection(env.Stack[env.Settings.StackPointer], HelpETable);
                SetLength(HelpETable, 0);
            end;
        end;
		'strsort' : begin
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            size := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            if (size >= 0) then
            begin
                SetLength(HelpETable, size);
                HelpETable := stack_popCollection(env.Stack[env.Settings.StackPointer], size);
                strings_sort(HelpETable);
                stack_pushCollection(env.Stack[env.Settings.StackPointer], HelpETable);
                SetLength(HelpETable, 0);
            end;
        end;
        'reverse' : begin
            env.Stack[env.Settings.StackPointer] := stack_reverse(env.Stack[env.Settings.StackPointer]);
        end;
        'rev' : begin
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            size := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            if (size >= 0) then stack_reverseCollection(env.Stack[env.Settings.StackPointer], size);
        end;
        'swap' : begin
            stack_reverseCollection(env.Stack[env.Settings.StackPointer], 2);
        end;             


        // stack operands
        'sum' : begin
          	if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
          	size := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
          	if (size >= 0) then
            begin
                SetLength(HelpETable, size);
                HelpETable := stack_popCollection(env.Stack[env.Settings.StackPointer], size);
                ExtEax := table_sum(HelpETable);
                stack_push(env.Stack[env.Settings.StackPointer], buildNumber(ExtEax));
                SetLength(HelpETable, 0);
            end else begin
                stack_push(env.Stack[env.Settings.StackPointer], buildNumber(0.0));
            end;
        end;
        'product' : begin
          	if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            size := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            if (size >= 0) then
            begin
                SetLength(HelpETable, size);
                HelpETable := stack_popCollection(env.Stack[env.Settings.StackPointer], size);
                ExtEax := table_product(HelpETable);
                stack_push(env.Stack[env.Settings.StackPointer], buildNumber(ExtEax));
                SetLength(HelpETable, 0);
            end else begin
                stack_push(env.Stack[env.Settings.StackPointer], buildNumber(1.0));
            end;
        end;
        'count' : begin
          	z := 0.0;
          	while (stack_size(env.Stack[env.Settings.StackPointer]) > 0) do
          	begin
          		z := z + 1;
          		stack_justpop(env.Stack[env.Settings.StackPointer]);
          	end;
          	stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'size',
        'all' : begin
          	z := stack_size(env.Stack[env.Settings.StackPointer]);
          	stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'avg' : begin
          	if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            size := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            if (size >= 0) then
            begin
                SetLength(HelpETable, size);
                HelpETable := stack_popCollection(env.Stack[env.Settings.StackPointer], size);
                ExtEax := table_avg(HelpETable);
                stack_push(env.Stack[env.Settings.StackPointer], buildNumber(ExtEax));
                SetLength(HelpETable, 0);
            end else begin
                stack_push(env.Stack[env.Settings.StackPointer], buildNumber(0.0));
            end;
        end;
        'mean' : begin
          	if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            size := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            if (size >= 0) then
            begin
                SetLength(HelpETable, size);
                HelpETable := stack_popCollection(env.Stack[env.Settings.StackPointer], size);
                ExtEax := table_avg(HelpETable);
                stack_push(env.Stack[env.Settings.StackPointer], buildNumber(ExtEax));
                SetLength(HelpETable, 0);
            end else begin
                stack_push(env.Stack[env.Settings.StackPointer], buildNumber(0.0));
            end;
        end;
        'min' : begin
          	if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            size := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            if (size >= 0) then
            begin
                SetLength(HelpETable, size);
                HelpETable := stack_popCollection(env.Stack[env.Settings.StackPointer], size);
                ExtEax := table_min(HelpETable);
                stack_push(env.Stack[env.Settings.StackPointer], buildNumber(ExtEax));
                SetLength(HelpETable, 0);
            end else begin
                stack_push(env.Stack[env.Settings.StackPointer], buildNull());
            end;
        end;
        'max' : begin
          	if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            size := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            if (size >= 0) then
            begin
                SetLength(HelpETable, size);
                HelpETable := stack_popCollection(env.Stack[env.Settings.StackPointer], size);
                ExtEax := table_max(HelpETable);
                stack_push(env.Stack[env.Settings.StackPointer], buildNumber(ExtEax));
                SetLength(HelpETable, 0);
            end else begin
                stack_push(env.Stack[env.Settings.StackPointer], buildNull());
            end;
        end;
        'median' : begin
          	if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            size := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            if (size >= 0) then
            begin
                SetLength(HelpETable, size);
                HelpETable := stack_popCollection(env.Stack[env.Settings.StackPointer], size);
                ExtEax := table_median(HelpETable);
                stack_push(env.Stack[env.Settings.StackPointer], buildNumber(ExtEax));
                SetLength(HelpETable, 0);
            end else begin
                stack_push(env.Stack[env.Settings.StackPointer], buildNull());
            end;
        end;
        'variance' : begin
          	if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            size := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            if (size >= 0) then
            begin
                SetLength(HelpETable, size);
                HelpETable := stack_popCollection(env.Stack[env.Settings.StackPointer], size);
                ExtEax := table_variance(HelpETable);
                stack_push(env.Stack[env.Settings.StackPointer], buildNumber(ExtEax));
                SetLength(HelpETable, 0);
            end else begin
                stack_push(env.Stack[env.Settings.StackPointer], buildNull());
            end;
        end;
        'stddev' : begin
          	if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            size := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            if (size >= 0) then
            begin
                SetLength(HelpETable, size);
                HelpETable := stack_popCollection(env.Stack[env.Settings.StackPointer], size);
                ExtEax := table_stddev(HelpETable);
                stack_push(env.Stack[env.Settings.StackPointer], buildNumber(ExtEax));
                SetLength(HelpETable, 0);
            end else begin
                stack_push(env.Stack[env.Settings.StackPointer], buildNull());
            end;
        end;
        'variance2' : begin
          	if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            size := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            if (size >= 0) then
            begin
                SetLength(HelpETable, size);
                HelpETable := stack_popCollection(env.Stack[env.Settings.StackPointer], size);
                ExtEax := table_variance2(HelpETable);
                stack_push(env.Stack[env.Settings.StackPointer], buildNumber(ExtEax));
                SetLength(HelpETable, 0);
            end else begin
                stack_push(env.Stack[env.Settings.StackPointer], buildNull());
            end;
        end;
        'stddev2' : begin
          	if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            size := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            if (size >= 0) then
            begin
                SetLength(HelpETable, size);
                HelpETable := stack_popCollection(env.Stack[env.Settings.StackPointer], size);
                ExtEax := table_stddev2(HelpETable);
                stack_push(env.Stack[env.Settings.StackPointer], buildNumber(ExtEax));
                SetLength(HelpETable, 0);
            end else begin
                stack_push(env.Stack[env.Settings.StackPointer], buildNull());
            end;
        end;
             
        // stack creators
        // todo: support for complex numbers
// todo: check this error
// ./papaj do '[7.5 0.25 2.1 seq] function(x){x ++} map println' -L
// [ 8.5 8.25 8 7.75 7.5 7.25 7 6.75 6.5 6.25 6 5.75 5.5 5.25 5 4.75 4.5 4.25 4 3.75 3.5 3.25 ]
// ./papaj do '[7.5 0.25 2.1 seq] function($x){$x ++} map println' -L
// [ 8.5 8.25 8 7.75 7.5 7.25 7 6.75 6.5 6.25 6 5.75 5.5 5.25 5 4.75 4.5 4.25 4 3.75 3.5 3.25 ]
// ./papaj do '[7.5 0.25 2.1 seq] function(x){$x ++} map println' -L
// EAccessViolation: Access violation
// fixed somehow by itself, pay attention for this piece
        // todo: check for memory leakages
        // todo: try to work with complex numbers
        'seq' : begin
          	if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
          	z := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
          	y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            IntEax := Length(env.Stack[env.Settings.StackPointer].Values);
            if (y = 0) and (x = z) then
            begin
                SetLength(env.Stack[env.Settings.StackPointer].Values, IntEax + 2);
                env.Stack[env.Settings.StackPointer].Values[IntEax] := buildNumber(x);
                env.Stack[env.Settings.StackPointer].Values[IntEax + 1] := buildNumber(x);
            end else begin
                Size := floor(system.abs(z.Re - x.Re)/system.abs(y.Re)) + 1;
                SetLength(env.Stack[env.Settings.StackPointer].Values, IntEax + Size);
                index := 0;
                if (x.Re <= z.Re) then
                begin
                	while (index < size) and (x.Re <= z.Re) do 
                	begin
                        //checkSIGINT();
                		env.Stack[env.Settings.StackPointer].Values[IntEax + index] := buildNumber(x);
                		x := x + y;
                        index := index + 1;
                	end;
                end else begin
                	while (index < size) and (x.Re >= z.Re) do 
                	begin
                        //checkSIGINT();
                		env.Stack[env.Settings.StackPointer].Values[IntEax + index] := buildNumber(x);
                		x := x - y;
                        index := index + 1;
                	end;
                end;
                SetLength(env.Stack[env.Settings.StackPointer].Values, IntEax + index);
            end;
        end;
        'seql' : begin
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            z := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            IntEax := Length(env.Stack[env.Settings.StackPointer].Values);
            Size := Int(z);
            SetLength(env.Stack[env.Settings.StackPointer].Values, IntEax + Size);
            index := 0;
            while (index < Size) do 
            begin
                env.Stack[env.Settings.StackPointer].Values[IntEax+index] := buildNumber(x);
            	x := x + y;
            	index := index + 1;
            end;
        end;
        'gseq' : begin
            // todo: optimize it maybe
            // a_n = a_1 * q^{n-1}
            // q^{n-1} = a_n / a_1
            // n - 1 = log_q (a_n / a_1)
            // n = log_q (a_n / a_1) + 1
            // n = log_q (a_n) - log_q (a_1) + 1
          	if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            z := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            IntEax := Length(env.Stack[env.Settings.StackPointer].Values);
            if (y = 0) and (z = 0) then
            begin
                SetLength(env.Stack[env.Settings.StackPointer].Values, IntEax + 2);
                env.Stack[env.Settings.StackPointer].Values[IntEax] := buildNumber(x);
                env.Stack[env.Settings.StackPointer].Values[IntEax + 1] := buildNumber(0);
            end else if (y = 1) and (x = z) then
            begin
                SetLength(env.Stack[env.Settings.StackPointer].Values, IntEax + 2);
                env.Stack[env.Settings.StackPointer].Values[IntEax] := buildNumber(x);
                env.Stack[env.Settings.StackPointer].Values[IntEax + 1] := buildNumber(x);
            end else if (y = -1) and (x = -z) then
            begin
                SetLength(env.Stack[env.Settings.StackPointer].Values, IntEax + 2);
                env.Stack[env.Settings.StackPointer].Values[IntEax] := buildNumber(x);
                env.Stack[env.Settings.StackPointer].Values[IntEax + 1] := buildNumber(-x);
            end else if (y = -1) and (x = z) then
            begin
                SetLength(env.Stack[env.Settings.StackPointer].Values, IntEax + 3);
                env.Stack[env.Settings.StackPointer].Values[IntEax] := buildNumber(x);
                env.Stack[env.Settings.StackPointer].Values[IntEax + 1] := buildNumber(-x);
                env.Stack[env.Settings.StackPointer].Values[IntEax + 2] := buildNumber(x);
            end else begin
                // todo: inspect this floor
                if (x.Re <= z.Re) 
                    then Size := floor(system.ln(system.abs(z.Re/x.Re))/system.ln(system.abs(y.Re)))+1
                    else Size := floor(system.ln(system.abs(x.Re/z.Re))/system.ln(system.abs(y.Re)))+1;
                SetLength(env.Stack[env.Settings.StackPointer].Values, IntEax + Size);
                index := 0;
                if (x.Re <= z.Re) then
                begin
                	while (index < size) and (x.Re <= z.Re) do 
                	begin
                		env.Stack[env.Settings.StackPointer].Values[IntEax + index] := buildNumber(x);
                		x := x * y;
                        index := index + 1;
                	end;
                end else begin
                	while (index < size) and (x.Re >= z.Re) do 
                	begin
                		env.Stack[env.Settings.StackPointer].Values[IntEax + index] := buildNumber(x);
                		x := x / y;
                        index := index + 1;
                	end;
                end;
                SetLength(env.Stack[env.Settings.StackPointer].Values, IntEax + index);
            end;
        end;
        'gseql' : begin
          	if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            z := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            IntEax := Length(env.Stack[env.Settings.StackPointer].Values);
            Size := Int(z);
            SetLength(env.Stack[env.Settings.StackPointer].Values, IntEax + Size);
            index := 0;
            while (index < Size) do 
            begin
                env.Stack[env.Settings.StackPointer].Values[IntEax+index] := buildNumber(x);
            	x := x * y;
            	index := index + 1;
            end;
        end;
        else begin
            Found := false;
        end;
    end;
    Result := Found;
end;

function lib_math(i : String; var env : PSEnvironment; var db : PSCommandDB) : Boolean;
var
	Found        : Boolean;
	x, y, z, w   : ComplexType;
    index, jndex : LongInt;
    ArrEax       : Entity;
begin
	Found := true;
	case i of

		// binary
		'Math.choose' : begin
            if (env.Settings.StrictType) and (assertIntegerLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            if (env.Settings.StrictType) and (assertComplexLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            //if (isInteger(x)) then begin
            //    z := newton_int(x,y);
            //end else begin
            //    z := newton_real(x,y);
            //end;
            z := Newton(x,y);
        	stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'Math.gcd' : begin
            if (env.Settings.StrictType) and (assertIntegerLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            if (env.Settings.StrictType) and (assertIntegerLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := gcd(Real(x), Real(y));
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'Math.lcm' : begin
            if (env.Settings.StrictType) and (assertIntegerLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            if (env.Settings.StrictType) and (assertIntegerLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := lcm(Real(x), Real(y));
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
		'Math.fibonacci' : begin
          	if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := fib(Int(y)); 
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;

        // Trigonometrics

        'Math.sin' : begin
          	if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := sin(y);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'Math.cos' : begin
          	if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := cos(y);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'Math.csc' : begin
          	if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := Inv(sin(y));
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'Math.sec' : begin
          	if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := Int(cos(y));
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'Math.tan' : begin
          	if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := sin(y)/cos(y);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'Math.cot' : begin
          	if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := cos(y)/sin(y);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'Math.arcsin' : begin
          	if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := ComplexNumbers.arcsin(y);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'Math.arccos' : begin
          	if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := ComplexNumbers.arccos(y);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'Math.arctan' : begin
          	if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := ComplexNumbers.arctan(y);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'Math.arccot' : begin
          	if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            //z := PI/2-arctan(y);
            z := ComplexNumbers.ArcCot(y);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'Math.arcsec' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := 1.0 / y;
            z := ComplexNumbers.arccos(z);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'Math.arccsc' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := 1.0 / y;
            z := ComplexNumbers.arcsin(z);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'Math.sinh' : begin
          	if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := ComplexNumbers.sinh(y);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'Math.cosh' : begin
          	if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := ComplexNumbers.cosh(y);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'Math.csch' : begin
          	if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := Inv(ComplexNumbers.sinh(y));
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'Math.sech' : begin
          	if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := Inv(ComplexNumbers.cosh(y));
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'Math.tanh' : begin
          	if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := ComplexNumbers.sinh(y)/ComplexNumbers.cosh(y);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'Math.coth' : begin
          	if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := ComplexNumbers.cosh(y)/ComplexNumbers.sinh(y);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'Math.arsinh' : begin
          	if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := ComplexNumbers.arsinh(y);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'Math.arcosh' : begin
          	if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := ComplexNumbers.arcosh(y);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'Math.artanh' : begin
          	if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := ComplexNumbers.artanh(y);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'Math.arcoth' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := 0.5*ln((y+1)/(y-1));
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'Math.arsech' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := ln((1 + sqrt(1 - y*y)) / y);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'Math.arcsch' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := ln(1.0/y + sqrt(1.0/(y*y) + 1));
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'Math.toRadians' : begin
            if (env.Settings.StrictType) and (assertRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := degtorad(Real(y));
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'Math.toDegrees' : begin
            if (env.Settings.StrictType) and (assertRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := radtodeg(Real(y));
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;


        // constants
		'Math.PI' : begin
          stack_push(env.Stack[env.Settings.StackPointer], buildNumber(Pi));
        end;
        'Math.EU' : begin
          stack_push(env.Stack[env.Settings.StackPointer], buildNumber(EulerNum()));
        end;
        'Math.FI' : begin
          stack_push(env.Stack[env.Settings.StackPointer], buildNumber(GoldenNum()));
        end;
		'Math.EM' : begin
          stack_push(env.Stack[env.Settings.StackPointer], buildNumber(EulerMascheroni()));
        end;

        // Statistics
		'Math.gamma' : begin
          	if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := Gamma(y);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'Math.gammaln' : begin
          	if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := GammaLn(y);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
		'Math.distNormStd' : begin
          	if (env.Settings.StrictType) and (assertRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := dstdnorm(Real(y));
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'Math.funcNormStd' : begin
			if (env.Settings.StrictType) and (assertRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            w := fnorm(Real(x), 0, 1);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(w));
        end;
        'Math.randomNormStd' : begin
            z := randg(0, 1);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'Math.genNormStd' : begin
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            for index := 1 to Int(x) do
            begin
                //checkSIGINT();
                w := randg(0, 1);
                stack_push(env.Stack[env.Settings.StackPointer], buildNumber(w));
            end;
        end;
		'Math.distNorm' : begin
          	if (env.Settings.StrictType) and (assertRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            z := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
			if (env.Settings.StrictType) and (assertRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
			if (env.Settings.StrictType) and (assertRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            w := dnorm(Real(x), Real(y), Real(z));
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(w));
        end;
        'Math.funcNorm' : begin
          	if (env.Settings.StrictType) and (assertRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            z := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
			if (env.Settings.StrictType) and (assertRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
			if (env.Settings.StrictType) and (assertRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            w := fnorm(Real(x), Real(y), Real(z));
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(w));
        end;
        'Math.randomNorm' : begin
            if (env.Settings.StrictType) and (assertRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
			if (env.Settings.StrictType) and (assertRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := randg(Real(x), Real(y));
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'Math.genNorm' : begin
            if (env.Settings.StrictType) and (assertRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            z := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            if (env.Settings.StrictType) and (assertRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
			if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            for index := 1 to Int(x) do
            begin
                //checkSIGINT();
                w := randg(Real(y), Real(z));
                stack_push(env.Stack[env.Settings.StackPointer], buildNumber(w));
            end;
        end;
        'Math.randomBinom' : begin
            if (env.Settings.StrictType) and (assertRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            z := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            w := rbinom(Int(y), Real(z));
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(w));
        end;
        'Math.genBinom' : begin
            if (env.Settings.StrictType) and (assertRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            z := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
			if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            for index := 1 to Int(x) do
            begin
                w := rbinom(Int(y), Real(z));
                stack_push(env.Stack[env.Settings.StackPointer], buildNumber(w));
            end;
        end;
        'Math.funcBinom' : begin
			if (env.Settings.StrictType) and (assertRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            z := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
			if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            w := fbinom(Int(y), Int(x), Real(z));
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(w));
        end;
        'Math.distBinom' : begin
			if (env.Settings.StrictType) and (assertRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            z := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
			if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            w := dbinom(Int(y), Int(x), Real(z));
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(w));
        end;

        'Math.funcGeom' : begin
            if (env.Settings.StrictType) and (assertRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
			if (env.Settings.StrictType) and (assertPositiveNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            w := fgeom(Int(x), Real(y));
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(w));
        end;
        'Math.distGeom' : begin
			if (env.Settings.StrictType) and (assertRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
			if (env.Settings.StrictType) and (assertPositiveNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;  
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            w := dgeom(Int(x), Real(y));
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(w));
        end;
        'Math.randomGeom' : begin
			if (env.Settings.StrictType) and (assertRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            w := rgeom(Real(x));
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(w));
        end;
        'Math.genGeom' : begin
            if (env.Settings.StrictType) and (assertRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
			if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            for index := 1 to Int(x) do
            begin
                w := rgeom(Real(y));
                stack_push(env.Stack[env.Settings.StackPointer], buildNumber(w));
            end;            
        end;
        'Math.funcExp' : begin
            if (env.Settings.StrictType) and (assertRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
			if (env.Settings.StrictType) and (assertNotNegativeRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            w := fexp(Real(x), Real(y));
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(w));
        end;
        'Math.distExp' : begin
			if (env.Settings.StrictType) and (assertRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
			if (env.Settings.StrictType) and (assertNotNegativeRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            w := dexp(Real(x), Real(y));
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(w));
        end;
        'Math.randomExp' : begin
			if (env.Settings.StrictType) and (assertRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            w := rexp(Real(x));
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(w));
        end;
        'Math.genExp' : begin
            if (env.Settings.StrictType) and (assertRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
			if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            for index := 1 to Int(x) do
            begin
                w := rexp(Real(y));
                stack_push(env.Stack[env.Settings.StackPointer], buildNumber(w));
            end;
        end;
        'Math.funcPoisson' : begin
            if (env.Settings.StrictType) and (assertPositiveNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;  
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
			if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            w := fpoisson(Int(x), Int(y));
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(w));
        end;
        'Math.distPoisson' : begin
			if (env.Settings.StrictType) and (assertPositiveNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;  
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
			if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            w := dpoisson(Int(x), Int(y));
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(w));
        end;
        'Math.randomPoisson' : begin
			if (env.Settings.StrictType) and (assertPositiveNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;  
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            w := rpoisson(Int(x));
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(w));
        end;
        'Math.genPoisson' : begin
            if (env.Settings.StrictType) and (assertPositiveNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;  
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
			if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            for index := 1 to Int(x) do
            begin
                w := rpoisson(Int(y));
                stack_push(env.Stack[env.Settings.StackPointer], buildNumber(w));
            end;
        end;
        'Math.funcGamma' : begin
			if (env.Settings.StrictType) and (assertNotNegativeRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            z := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            if (env.Settings.StrictType) and (assertNotNegativeRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
			if (env.Settings.StrictType) and (assertNotNegativeRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            w := fgamma(Real(x), Real(y), Real(z));
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(w));
        end;
        'Math.distGamma' : begin
			if (env.Settings.StrictType) and (assertNotNegativeLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            z := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            if (env.Settings.StrictType) and (assertNotNegativeLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
			if (env.Settings.StrictType) and (assertNotNegativeLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            w := dgamma(Real(x), Real(y), Real(z));
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(w));
        end;
        'Math.randomGamma' : begin
            if (env.Settings.StrictType) and (assertNotNegativeRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
			if (env.Settings.StrictType) and (assertNotNegativeRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := rgamma1(Real(x), Real(y));
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'Math.genGamma' : begin
            if (env.Settings.StrictType) and (assertNotNegativeRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            z := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            if (env.Settings.StrictType) and (assertNotNegativeRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
			if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            for index := 1 to Int(x) do
            begin
                w := rgamma1(Real(y), Real(z));
                stack_push(env.Stack[env.Settings.StackPointer], buildNumber(w));
            end;
        end;
        'Math.funcChiSq' : begin
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
			if (env.Settings.StrictType) and (assertNotNegativeRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            w := fchisq(Real(x), Int(y));
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(w));
        end;
        'Math.distChiSq' : begin
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
			if (env.Settings.StrictType) and (assertNotNegativeRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            w := dchisq(Real(x), Int(y));
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(w));
        end;
        'Math.randomChiSq' : begin
			if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := rchisq(Real(x));
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'Math.genChiSq' : begin
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;  
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
			if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            for index := 1 to Int(x) do
            begin
                w := rchisq(Real(y));
                stack_push(env.Stack[env.Settings.StackPointer], buildNumber(w));
            end;
        end;
        'Math.funcErlang' : begin
			if (env.Settings.StrictType) and (assertNotNegativeRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            z := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;  
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
			if (env.Settings.StrictType) and (assertNotNegativeRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            w := ferlang(Real(x), Int(y), Real(z));
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(w));
        end;
        'Math.distErlang' : begin
			if (env.Settings.StrictType) and (assertNotNegativeRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            z := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;  
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
			if (env.Settings.StrictType) and (assertNotNegativeRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            w := derlang(Real(x), Int(y), Real(z));
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(w));
        end;
        'Math.randomErlang' : begin
            if (env.Settings.StrictType) and (assertNotNegativeRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
			if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := rerlang(Int(x), Real(y));
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'Math.genErlang' : begin
            if (env.Settings.StrictType) and (assertNotNegativeRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            z := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;  
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
			if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            for index := 1 to Int(x) do
            begin
                w := rerlang(Int(y), Real(z));
                stack_push(env.Stack[env.Settings.StackPointer], buildNumber(w));
            end;
        end;
        'Math.funcT' : begin
            if (env.Settings.StrictType) and (assertNotNegativeRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
			if (env.Settings.StrictType) and (assertRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            //w := fgamma(x, y/2, 0.5);
            w := fstudentt(Real(x), Real(y));
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(w));
        end;
        'Math.distT' : begin
            if (env.Settings.StrictType) and (assertNotNegativeRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
			if (env.Settings.StrictType) and (assertRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            //w := dgamma(x, y/2, 0.5);
            w := dstudentt(Real(x), Real(y));
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(w));
        end;
        'Math.randomT' : begin
			if (env.Settings.StrictType) and (assertNotNegativeRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := rstudentt(Real(x));
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'Math.genT' : begin
            if (env.Settings.StrictType) and (assertNotNegativeRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
			if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            for index := 1 to Int(x) do
            begin
                w := rstudentt(Real(y));
                stack_push(env.Stack[env.Settings.StackPointer], buildNumber(w));
            end;
        end;
        'Math.funcBeta' : begin
			if (env.Settings.StrictType) and (assertNotNegativeRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            z := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            if (env.Settings.StrictType) and (assertNotNegativeRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
			if (env.Settings.StrictType) and (assertNotNegativeRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            w := fbeta(Real(x), Real(y), Real(z));
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(w));
        end;
        'Math.distBeta' : begin
			if (env.Settings.StrictType) and (assertNotNegativeRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            z := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            if (env.Settings.StrictType) and (assertNotNegativeRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
			if (env.Settings.StrictType) and (assertNotNegativeRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            w := dbeta(Real(x), Real(y), Real(z));
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(w));
        end;
        'Math.randomBeta' : begin
            if (env.Settings.StrictType) and (assertNotNegativeRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
			if (env.Settings.StrictType) and (assertNotNegativeRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := rbeta(Real(x), Real(y));
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'Math.genBeta' : begin
            if (env.Settings.StrictType) and (assertNotNegativeRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            z := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            if (env.Settings.StrictType) and (assertNotNegativeRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
			if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            for index := 1 to Int(x) do
            begin
                w := rbeta(Real(y), Real(z));
                stack_push(env.Stack[env.Settings.StackPointer], buildNumber(w));
            end;
        end;
        'Math.funcF' : begin
			if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            z := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
			if (env.Settings.StrictType) and (assertNotNegativeRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            w := ffischerf(Real(x), Int(y), Int(z));
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(w));
        end;
        'Math.distF' : begin
			if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            z := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
			if (env.Settings.StrictType) and (assertNotNegativeRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            w := dfischerf(Real(x), Int(y), Int(z));
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(w));
        end;
        'Math.randomF' : begin
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
			if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := rfischerf(Int(x), Int(y));
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'Math.genF' : begin
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            z := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
			if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            for index := 1 to Int(x) do
            begin
                w := rfischerf(Int(y), Int(z));
                stack_push(env.Stack[env.Settings.StackPointer], buildNumber(w));
            end;
        end;
        'Math.funcArcsine' : begin
			if (env.Settings.StrictType) and (assertNotNegativeRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            w := farcsine(Real(x));
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(w));
        end;
        'Math.distArcsine' : begin
			if (env.Settings.StrictType) and (assertNotNegativeRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            w := darcsine(Real(x));
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(w));
        end;
        'Math.randomArcsine' : begin
            z := rarcsine();
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'Math.genArcsine' : begin
			if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            for index := 1 to Int(x) do
            begin
                w := rarcsine();
                stack_push(env.Stack[env.Settings.StackPointer], buildNumber(w));
            end;
        end;

        'Math.moment' : begin
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            index := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(table_moment(env.Stack[ArrEax.Num2].Values, index)));
        end;
        'Math.quantile' : begin
            if (env.Settings.StrictType) and (assertNotNegativeRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            if (x.Re >= 0) and (x.Re <= 1) then
            begin
                stack_push(env.Stack[env.Settings.StackPointer], buildNumber(table_quantile(env.Stack[ArrEax.Num2].Values, Real(x))));
            end else begin
                stack_push(env.Stack[env.Settings.StackPointer], raiseNumRangeConstraint(i, 0, 1));
            end;
        end;
        'Math.tertile' : begin
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            if (x.Re >= 0) and (x.Re <= 3) then
            begin
                stack_push(env.Stack[env.Settings.StackPointer], buildNumber(table_quantile2(env.Stack[ArrEax.Num2].Values, Int(x), 3)));
            end else begin
                stack_push(env.Stack[env.Settings.StackPointer], raiseNumRangeConstraint(i, 0, 3));
            end;
        end;
        'Math.quartile' : begin
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            if (x.Re >= 0) and (x.Re <= 4) then
            begin
                stack_push(env.Stack[env.Settings.StackPointer], buildNumber(table_quantile2(env.Stack[ArrEax.Num2].Values, Int(x), 4)));
            end else begin
                stack_push(env.Stack[env.Settings.StackPointer], raiseNumRangeConstraint(i, 0, 4));
            end;
        end;
        'Math.octile' : begin
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            if (x.Re >= 0) and (x.Re <= 8) then
            begin
                stack_push(env.Stack[env.Settings.StackPointer], buildNumber(table_quantile2(env.Stack[ArrEax.Num2].Values, Int(x), 8)));
            end else begin
                stack_push(env.Stack[env.Settings.StackPointer], raiseNumRangeConstraint(i, 0, 8));
            end;
        end;
        'Math.decile' : begin
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            if (x.Re >= 0) and (x.Re <= 10) then
            begin
                stack_push(env.Stack[env.Settings.StackPointer], buildNumber(table_quantile2(env.Stack[ArrEax.Num2].Values, Int(x), 10)));
            end else begin
                stack_push(env.Stack[env.Settings.StackPointer], raiseNumRangeConstraint(i, 0, 10));
            end;
        end;
        'Math.hexadecile' : begin
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            if (x.Re >= 0) and (x.Re <= 16) then
            begin
                stack_push(env.Stack[env.Settings.StackPointer], buildNumber(table_quantile2(env.Stack[ArrEax.Num2].Values, Int(x), 16)));
            end else begin
                stack_push(env.Stack[env.Settings.StackPointer], raiseNumRangeConstraint(i, 0, 16));
            end;
        end;
        'Math.percentile' : begin
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            if (x.Re >= 0) and (x.Re <= 100) then
            begin
                stack_push(env.Stack[env.Settings.StackPointer], buildNumber(table_quantile2(env.Stack[ArrEax.Num2].Values, Int(x), 100)));
            end else begin
                stack_push(env.Stack[env.Settings.StackPointer], raiseNumRangeConstraint(i, 0, 100));
            end;
        end;
        'Math.skewness' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(table_skewness(env.Stack[ArrEax.Num2].Values)));
        end;
        'Math.kurtosis3' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(table_kurtosis(env.Stack[ArrEax.Num2].Values)-3));
        end;
        'Math.excessKurtosis' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(table_kurtosis(env.Stack[ArrEax.Num2].Values)-3));
        end;
        'Math.kurtosis' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(table_kurtosis(env.Stack[ArrEax.Num2].Values)));
        end;


        // Number Theory
        'Math.genNaturalDivisors' : begin
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            index := 1;
            jndex := Int(x);
            while (index*index <= jndex) do
            begin
                if (divides(jndex, index)) then 
                begin
                    stack_push(env.Stack[env.Settings.StackPointer], buildNumber(index));
                    if (index*index <> jndex) then stack_push(env.Stack[env.Settings.StackPointer], buildNumber(jndex div index));
                end;
                index := index + 1;
            end;
        end;
        'Math.genDivisors' : begin
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            index := 1;
            jndex := Int(x);
            while (index*index <= jndex) do
            begin
                if (divides(jndex, index)) then 
                begin
                    stack_push(env.Stack[env.Settings.StackPointer], buildNumber(index));
                    stack_push(env.Stack[env.Settings.StackPointer], buildNumber(-index));
                    if (index*index <> jndex) then begin 
                        stack_push(env.Stack[env.Settings.StackPointer], buildNumber(jndex div index));
                        stack_push(env.Stack[env.Settings.StackPointer], buildNumber(-(jndex div index)));
                    end;
                end;
                index := index + 1;
            end;
        end;
        'Math.divides' : begin
            if (env.Settings.StrictType) and (assertRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            if (env.Settings.StrictType) and (assertRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            stack_push(env.Stack[env.Settings.StackPointer], buildBoolean(divides(Real(x), Real(y))));
        end;
        'Math.countNaturalDivisors',
        'Math.fTau' : begin
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(num_tau(Int(x))));
        end;
        'Math.sumNaturalDivisors',
        'Math.fSigma' : begin
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(num_sigma(Int(x))));
        end;
        'Math.fMobius',
        'Math.fMu' : begin
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(num_mobius(Int(x))));
        end;
        'Math.fEuler',
        'Math.fPhi' : begin
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(num_euler(Int(x))));
        end;
        'Math.fPi' : begin
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(num_pi(Int(x))));
        end;
        'Math.primeDistribution' : begin
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            index := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            while (index > 1) do
            begin
                if (isPrime(index)) then
                begin
                    stack_push(env.Stack[env.Settings.StackPointer], buildNumber(index));
                    //stack_push(env.Stack[env.Settings.StackPointer], buildNumber(1));
                    index := 1;
                end else begin
                    jndex := 2;
                    while not (divides(index, jndex)) do jndex := jndex + 1;
                    stack_push(env.Stack[env.Settings.StackPointer], buildNumber(jndex));
                    index := index div jndex;
                end;
            end;
        end;
        'Math.leastPrimeDivisor' : begin
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            index := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            if (isPrime(index)) then
            begin
                stack_push(env.Stack[env.Settings.StackPointer], buildNumber(index));
            end else begin
                jndex := 2;
                while not (divides(index, jndex)) do jndex := jndex + 1;
                stack_push(env.Stack[env.Settings.StackPointer], buildNumber(jndex));
            end;
        end;
        'Math.factorize' : begin
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            index := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            if (isPrime(index)) then
            begin
                stack_push(env.Stack[env.Settings.StackPointer], buildNumber(index));
                stack_push(env.Stack[env.Settings.StackPointer], buildNumber(1));
            end else begin
                jndex := 2;
                while not (divides(index, jndex)) do jndex := jndex + 1;
                stack_push(env.Stack[env.Settings.StackPointer], buildNumber(jndex));
                stack_push(env.Stack[env.Settings.StackPointer], buildNumber(index div jndex));
            end;
        end;
        'Math.randomIntRange' : begin
            if (env.Settings.StrictType) and (assertIntegerLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            jndex := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            if (env.Settings.StrictType) and (assertIntegerLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            index := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            if (index < jndex) then
            begin
                stack_push(env.Stack[env.Settings.StackPointer], buildNumber(randomIntRange(index, jndex)));
            end else if (index = jndex) then
            begin
                stack_push(env.Stack[env.Settings.StackPointer], buildNumber(index));
            end else begin
                stack_push(env.Stack[env.Settings.StackPointer], buildNumber(randomIntRange(jndex, index)));
            end;
        end;
        'Math.randomRealRange' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            if (Real(x) < Real(y)) then
            begin
                stack_push(env.Stack[env.Settings.StackPointer], buildNumber(randomRealRange(Real(x), Real(y))));
            end else if (Real(x) = Real(y)) then
            begin
                stack_push(env.Stack[env.Settings.StackPointer], buildNumber(NaN));
            end else begin
                stack_push(env.Stack[env.Settings.StackPointer], buildNumber(randomRealRange(Real(y), Real(x))));
            end;
        end;
        'Math.euclidean',
        'Math.bezoutCoefs' : begin
            if (env.Settings.StrictType) and (assertIntegerLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            if (env.Settings.StrictType) and (assertIntegerLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            w := gcdExtended(Int(x), Int(y), index, jndex);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(index));
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(jndex));
        end;
        'Math.erf' : begin
			if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            w := Erf(x);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(w));
        end;
        'Math.erfc' : begin
			if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            w := Erfc(x);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(w));
        end;
        'Math.erfi' : begin
			if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            w := Erfi(x);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(w));
        end;
        'Math.fomega',
        'Math.countDistinctFactors' : begin
			if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(num_omega(Int(x))));
        end;
        'Math.fOmega',
        'Math.countAllFactors' : begin
			if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(num_omega2(Int(x))));
        end;
        'Math.fLambda',
        'Math.fLiouville' : begin
			if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(num_liouville(Int(x))));
        end;
        'Math.isSquareFree' : begin
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            stack_push(env.Stack[env.Settings.StackPointer], buildBoolean(num_isSquareFree(Int(y))));
        end;
        'Math.modularPower',
        'Math.modPower',
        'Math.modPow' : begin
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            z := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(modularPower(Int(x), Int(y), Int(z))));
        end;
        'Math.modularInverse',
        'Math.modularMulInverse',
        'Math.modMulInv' : begin
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(modularInverse(Int(x), Int(y))));
        end;
        'Math.coprimes' : begin
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            stack_push(env.Stack[env.Settings.StackPointer], buildBoolean(gcd(Int(x), Int(y)) = 1));
        end;
        'Math.isCarmichael' : begin
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            stack_push(env.Stack[env.Settings.StackPointer], buildBoolean(num_isCarmichael(Int(y))));
        end;
		else begin
            Found := false;
        end;
	end;
    Result := Found;
end;

function lib_strings(i : String; var env : PSEnvironment; var db : PSCommandDB) : Boolean;
var
	Found          : Boolean;
	x, y           : Extended;
    flag           : ShortInt;
    CmpEax         : ComplexType;
	index          : Longint;
	IntEax, IntEbx : LongInt;
	StrEax, StrEbx : String;
	StrEcx, StrEdx : String;
	ExtEax         : Extended;
    EntEax, EntEbx : Entity;
	HelpTStrings   : TStrings;
    HelpSTable     : array of String;
begin
	Found := true;
	case i of
		'String.concat' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit; 
            StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit; 
            StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            stack_push(env.Stack[env.Settings.StackPointer], buildString(concat(StrEax, StrEbx)));
        end;
        'String.join' : begin
            if  (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TSTR) 
            and (stack_getback(env.Stack[env.Settings.StackPointer], 1).EntityType = TSTR) then
            begin
                //if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit; 
                StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
                //if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit; 
                StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
                stack_push(env.Stack[env.Settings.StackPointer], buildString(concat(StrEax, StrEbx)));
            end else Found := false;
        end;
        'String.crush' : begin
            if (stack_get(env.Stack[env.Settings.StackPointer]).EntityType = TSTR) then
            begin
                SetLength(HelpSTable, 0);
                if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit; 
                StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
                IntEbx := 1;
                while (IntEbx <= Length(StrEbx)) do begin
                	SetLength(HelpSTable, IntEbx+1);
                	HelpSTable[IntEbx] := Copy(StrEbx, IntEbx, 1);
                	IntEbx := IntEbx + 1; 
                end;
                for index := 1 to Length(HelpSTable)-1 do stack_push(env.Stack[env.Settings.StackPointer], buildString(HelpSTable[index])); 
                SetLength(HelpSTable, 0);
            end else Found := false;
        end;
        'String.crushBy' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TSTR) then
            begin
          	    if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;  
                y := Real(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
                if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
                StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
                IntEax := 1;
                IntEbx := 1;
                SetLength(HelpSTable, 0);
                while (IntEax <= Length(StrEbx)) do begin
                	SetLength(HelpSTable, IntEbx+1);
                	HelpSTable[IntEbx] := Copy(StrEbx, IntEax, trunc(y));
                	IntEax := IntEax + Int(y);
                	IntEbx := IntEbx + 1; 
                end;
                for index := 1 to Length(HelpSTable)-1 do stack_push(env.Stack[env.Settings.StackPointer], buildString(HelpSTable[index])); 
                SetLength(HelpSTable, 0);
            end else Found := false;
        end;
        'String.left' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TSTR) then
            begin
          	    if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;  
                y := Real(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
                //if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit; 
                StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
                stack_push(env.Stack[env.Settings.StackPointer], buildString(LeftStr(StrEbx, trunc(y))));
            end else Found := false;
        end;
        'String.right' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TSTR) then
            begin
          	    if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
                y := Real(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
                //if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
                StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
                stack_push(env.Stack[env.Settings.StackPointer], buildString(RightStr(StrEbx, trunc(y))));
            end else Found := false;
        end;
        'String.trim' : begin
            if (stack_get(env.Stack[env.Settings.StackPointer]).EntityType = TSTR) then
            begin
                if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
                StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
                stack_push(env.Stack[env.Settings.StackPointer], buildString(Trim(StrEbx)));
            end else Found := False;
        end;
        'String.trimLeft' : begin
            if (stack_get(env.Stack[env.Settings.StackPointer]).EntityType = TSTR) then
            begin
                if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
                StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
                stack_push(env.Stack[env.Settings.StackPointer], buildString(TrimLeft(StrEbx)));
            end else Found := False;
        end;
        'String.trimRight' : begin
            if (stack_get(env.Stack[env.Settings.StackPointer]).EntityType = TSTR) then
            begin
                if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit; 
                StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
                stack_push(env.Stack[env.Settings.StackPointer], buildString(TrimRight(StrEbx)));
            end else Found := False;
        end;
        'String.trimChars' : begin
            if (env.Settings.StrictType) and (assertCharLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
            StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            stack_push(env.Stack[env.Settings.StackPointer], buildString(TrimChars(StrEbx, StrEax[1])));
        end;
        'String.trimCharsLeft' : begin
            if (env.Settings.StrictType) and (assertCharLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
            StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            stack_push(env.Stack[env.Settings.StackPointer], buildString(TrimCharsLeft(StrEbx, StrEax[1])));
        end;
        'String.trimCharsRight' : begin
            if (env.Settings.StrictType) and (assertCharLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit; 
            StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            stack_push(env.Stack[env.Settings.StackPointer], buildString(TrimCharsRight(StrEbx, StrEax[1])));
        end;
        'String.padLeft' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TSTR) then
            begin
        	    if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
                y := Real(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
                //if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
                StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
                stack_push(env.Stack[env.Settings.StackPointer], buildString(PadLeft(StrEbx, trunc(y))));
            end else Found := False;
        end;
        'String.padRight' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TSTR) then
            begin
                if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
                y := Real(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
                //if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
                StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
                stack_push(env.Stack[env.Settings.StackPointer], buildString(PadRight(StrEbx, trunc(y))));
            end else Found := False;
        end;
        'String.pad' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TSTR) then
            begin
                if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
                y := Real(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
                if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
                StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
                stack_push(env.Stack[env.Settings.StackPointer], buildString(PadCenter(StrEbx, trunc(y))));
            end else Found := False;
        end;
        'String.padCharsLeft' : begin
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            y := Real(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            if (env.Settings.StrictType) and (assertCharLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
            StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            //StrEcx := AddChar(StrEax[1], StrEbx, trunc(y));
            //stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEcx));
            stack_push(env.Stack[env.Settings.StackPointer], buildString(AddChar(StrEax[1], StrEbx, trunc(y))));
        end;
        'String.padCharsRight' : begin
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            y := Real(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            if (env.Settings.StrictType) and (assertCharLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
            StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            //StrEcx := AddCharR(StrEax[1], StrEbx, trunc(y));
            //stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEcx));
            stack_push(env.Stack[env.Settings.StackPointer], buildString(AddCharR(StrEax[1], StrEbx, trunc(y))));
        end;
        'String.padChars' : begin
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            y := Real(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            if (env.Settings.StrictType) and (assertCharLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
            StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            stack_push(env.Stack[env.Settings.StackPointer], buildString(PadCharsCenter(StrEbx, trunc(y), StrEax[1])));
        end;
        'String.despace' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
            StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            stack_push(env.Stack[env.Settings.StackPointer], buildString(DelChars(StrEbx, ' ')));
        end;
        'String.onespace' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit; 
            StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            stack_push(env.Stack[env.Settings.StackPointer], buildString(DelSpace1(StrEbx)));
        end;
        'String.dechar' : begin
            if (env.Settings.StrictType) and (assertCharLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            StrEcx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
            StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEcx));
        end;
        'String.bind' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit; 
            StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit; 
            StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEax + ' ' + StrEbx));
        end;
        'String.bindBy' : begin
          	if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit; 
            StrEcx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
            StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit; 
            StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEax + StrEcx + StrEbx));
        end;
        'String.splitBySpace' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit; 
            StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str; 
            HelpTStrings := TStringlist.Create;
            HelpTStrings.Delimiter := ' ';
            HelpTStrings.QuoteChar := '"';
            HelpTStrings.StrictDelimiter := false;
            HelpTStrings.DelimitedText := StrEbx;
            for StrEax in HelpTStrings do stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEax)); 
            HelpTStrings.Free;
        end;
        'String.splitBy' : begin
            if (env.Settings.StrictType) and (assertCharLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            StrEcx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit; 
            StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;   
            HelpTStrings := TStringlist.Create;
            HelpTStrings.Delimiter := StrEcx[1];
            HelpTStrings.QuoteChar := '"';
            HelpTStrings.StrictDelimiter := false;
            HelpTStrings.DelimitedText := StrEbx;
            for StrEax in HelpTStrings do stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEax)); 
            HelpTStrings.Free;
        end;
        'String.splitByExpression' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TSTR) then
            begin
                if (env.Settings.StrictType) and (assertEitherLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TEXP, TFUN, i)) then Exit;
                EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit; 
                StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
                StrEbx := '';
                StrEcx := '';
                env.Variables.addLayer();
                if (EntEax.EntityType = TFUN) then
                begin
                    for index := 1 to Length(StrEax) do
                    begin
                        stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEax[index]));
                        env.doFunction(EntEax.Num2);
                        if (stack_pop(env.Stack[env.Settings.StackPointer]).Num = 0) 
                            then StrEbx := StrEbx + StrEax[index]
                            else StrEcx := StrEcx + StrEax[index];
    		        end;
                end else begin
                    for index := 1 to Length(StrEax) do
                    begin
                        stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEax[index]));
                        env.doFunction(EntEax.Num2);
                        if (stack_pop(env.Stack[env.Settings.StackPointer]).Num = 0) 
                            then StrEbx := StrEbx + StrEax[index]
                            else StrEcx := StrEcx + StrEax[index];
    		        end;
                end;
                env.Variables.removeLayer();
                stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEbx));
                stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEcx));
            end else Found := False;
        end;
        'String.substring' : begin
          	if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;  
            y := Real(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            x := Real(stack_pop(env.Stack[env.Settings.StackPointer]).Num) +1-env.Settings.StringStart;
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
            StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            stack_push(env.Stack[env.Settings.StackPointer], buildString(Copy(StrEbx, trunc(x), trunc(y)))); 
        end;
        'String.between' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 3).EntityType = TSTR) then
            begin
          	    if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
                y := Real(stack_pop(env.Stack[env.Settings.StackPointer]).Num) +1-env.Settings.StringStart;
                if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
                x := Real(stack_pop(env.Stack[env.Settings.StackPointer]).Num) +1-env.Settings.StringStart;
                //if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit; 
                StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
                stack_push(env.Stack[env.Settings.StackPointer], buildString(Copy(StrEbx, trunc(x), trunc(y)-trunc(x)+1))); 
            end else Found := false;
        end;
        'String.positionFirst' : begin
          	if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
            StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit; 
            StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(Pos(StrEbx, StrEax) -1+env.Settings.StringStart)); 
        end;
        'String.remove' : begin 
          	if (stack_get(env.Stack[env.Settings.StackPointer]).EntityType = TSTR) then
          	begin
          	  	if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit; 
              	StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
              	if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
              	StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
                Delete(StrEax, Pos(StrEbx, StrEax), Length(StrEbx));
              	stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEax)); 
          	end else begin
          	  	if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
              	y := Real(stack_pop(env.Stack[env.Settings.StackPointer]).Num); // check
          	  	if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
              	x := Real(stack_pop(env.Stack[env.Settings.StackPointer]).Num) +1-env.Settings.StringStart;
              	if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
              	StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
                Delete(StrEax, trunc(x), trunc(y)); 
              	stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEax));
          	end;
        end;
        'String.insert' : begin
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            y := Real(stack_pop(env.Stack[env.Settings.StackPointer]).Num) +1-env.Settings.StringStart;
          	if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
            StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
            StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            Insert(StrEbx, StrEax, trunc(y));
            stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEax)); 
        end;
        'String.replace' : begin
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            y := Real(stack_pop(env.Stack[env.Settings.StackPointer]).Num) +1-env.Settings.StringStart;
          	if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
            StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
            StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            Delete(StrEax, Length(StrEbx), trunc(y)); 
            Insert(StrEbx, StrEax, trunc(y));
            stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEax)); 
        end;
        'String.nthOccur' : begin
          	if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;  
            y := Real(stack_pop(env.Stack[env.Settings.StackPointer]).Num) +1-env.Settings.StringStart;
          	if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
            StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
            StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(NPos(StrEbx, StrEax, trunc(y)) -1+env.Settings.StringStart)); 
        end;
        'String.positionFrom' : begin
          	if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;  
            y := Real(stack_pop(env.Stack[env.Settings.StackPointer]).Num) +1-env.Settings.StringStart;
          	if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
            StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
            StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(PosEx(StrEbx, StrEax, trunc(y)) -1+env.Settings.StringStart)); 
        end;
		'String.positionLast' : begin
          	if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
            StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit; 
            StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(LastDelimiter(StrEbx, StrEax) -1+env.Settings.StringStart)); 
        end;
        'String.occurs' : begin
          	if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
            StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
            StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(OccurrencesOfSubstring(StrEax, StrEbx))); 
        end;
        'String.eval' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
            StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            env.executePSCode(StrEbx);
        end;
		'String.length' : begin
            if (stack_get(env.Stack[env.Settings.StackPointer]).EntityType = TSTR) then
            begin
          	    //if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit; 
                StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
                stack_push(env.Stack[env.Settings.StackPointer], buildNumber(Length(StrEax)));
            end else Found := false;
        end;
        'String.value' : begin
          	if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit; 
            StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            val(StrEax, CmpEax, flag); 
            if (flag = 0) then begin
              stack_push(env.Stack[env.Settings.StackPointer], buildNumber(CmpEax));
            end else begin
              stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEax));
            end;
        end;
		'String.inC' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit; 
            StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            StrEcx := string_fromC(StrEbx);
            stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEcx));
        end;
        //
        'String.cutLeft' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TSTR) then
            begin
          	    if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;  
                y := Real(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
                //if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit; 
                StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
                StrEax := RightStr(StrEbx, Length(StrEbx)-trunc(y));
                stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEax));
            end else Found := false;
        end;
        'String.cutRight' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TSTR) then
            begin
          	    if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
                y := Real(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
                //if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
                StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
                StrEax := LeftStr(StrEbx, Length(StrEbx)-trunc(y));
                stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEax));
            end else Found := false; 
        end;
        'String.cutBothSides' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 3).EntityType = TSTR) then
            begin
          	    if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
                y := Real(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
                if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
                x := Real(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
                //if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit; 
                StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
                //stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, Length(env.Stack[ArrEcx.Num2].Values)-IntEax-IntEbx));
                StrEax := Copy(StrEbx, trunc(x)+1, Length(StrEbx)-trunc(y)-trunc(x));
                stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEax)); 
            end else Found := false; 
        end;
        'String.lower' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
            StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            stack_push(env.Stack[env.Settings.StackPointer], buildString(LowerCase(StrEbx)));
        end;
        'String.upper' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
            StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            stack_push(env.Stack[env.Settings.StackPointer], buildString(UpperCase(StrEbx)));
        end;
        'String.uplower' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
            StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            StrEcx := LowerCase(StrEbx);
            if Length(StrEcx) > 0 then StrEcx[1] := capitalize(StrEcx[1]);
            stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEcx));
        end;
        'String.setAt' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 3).EntityType = TSTR) then
            begin
          	    if (env.Settings.StrictType) and (assertCharLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;  
                StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
                if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
                y := Real(stack_pop(env.Stack[env.Settings.StackPointer]).Num) +1-env.Settings.StringStart;
                //if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
                StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
                //StrEcx := StrEax;
                //StrEcx[trunc(y)] := StrEbx[1];
                //stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEcx)); 
                StrEax[trunc(y)] := StrEbx[1];
                stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEax)); 
            end else Found := false; 
        end;
        'String.getAt' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TSTR) then
            begin
                if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
                y := Real(stack_pop(env.Stack[env.Settings.StackPointer]).Num) +1-env.Settings.StringStart;
                //if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
                StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
                StrEbx := Copy(StrEax, trunc(y), 1);
                stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEbx)); 
            end else Found := false; 
        end;
        'String.compare' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit; 
            StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
            StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(CompareStr(StrEax, StrEbx)));
        end;
        'String.split' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TSTR) then
            begin
                if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
                x := Real(stack_pop(env.Stack[env.Settings.StackPointer]).Num) +1-env.Settings.StringStart;
                if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
                StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
                StrEax := LeftStr(StrEbx, trunc(x)-1);
                StrEcx := RightStr(StrEbx, Length(StrEbx)-trunc(x)+1);
                stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEax)); 
                stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEcx));
            end else Found := false; 
        end;
        'String.apostrophed' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
            StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            stack_push(env.Stack[env.Settings.StackPointer], buildString(quoteRaw(StrEax, '''')));
        end;
        'String.quoted' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
            StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            stack_push(env.Stack[env.Settings.StackPointer], buildString(quoteRaw(StrEax, '"')));
        end;
        'String.apostrophed2' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
            StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            stack_push(env.Stack[env.Settings.StackPointer], buildString(QuotedStr(StrEax)));
        end;
        'String.quoted2' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
            StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            stack_push(env.Stack[env.Settings.StackPointer], buildString(AnsiQuotedStr(StrEax, '"')));
        end;
        'String.enclosed' : begin
            //if (env.Settings.StrictType) and (assertCharLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
            StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
            StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            case Length(StrEax) of
                0 : stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEbx));
                1 : stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEax[1] + StrEbx + StrEax[1]));
                2 : stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEax[1] + StrEbx + StrEax[2]));
                else stack_push(env.Stack[env.Settings.StackPointer], raiseStringMaxLength(i, StrEax, 2));
            end;
        end;
        'String.map' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TSTR) then
            begin
                if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TFUN, i)) then Exit;
                EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                //if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
                StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
                StrEbx := '';
                env.Variables.addLayer();
                for index := 1 to Length(StrEax) do
                begin
                    stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEax[index]));
                    env.doFunction(EntEax.Num2);
                    StrEbx := StrEbx + stack_pop(env.Stack[env.Settings.StackPointer]).Str;
                end;
                env.Variables.removeLayer();
                stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEbx));
            end else Found := False;
        end;
        'String.filter' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TSTR) then
            begin
                if (env.Settings.StrictType) and (assertEitherLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TEXP, TFUN, i)) then Exit;
                EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
                StrEbx := '';
                env.Variables.addLayer();
                if (EntEax.EntityType = TFUN) then
                begin
                    for index := 1 to Length(StrEax) do
                    begin
                        stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEax[index]));
                        env.doFunction(EntEax.Num2);
                        if (stack_pop(env.Stack[env.Settings.StackPointer]).Num = 0) 
                            then StrEbx := StrEbx + StrEax[index];
    		        end;
                end else begin
                    for index := 1 to Length(StrEax) do
                    begin
                        stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEax[index]));
                        env.doFunction(EntEax.Num2);
                        if (stack_pop(env.Stack[env.Settings.StackPointer]).Num = 0) 
                            then StrEbx := StrEbx + StrEax[index];
    		        end;
                end;
                env.Variables.removeLayer();
                stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEbx));
            end else Found := False;
        end;
        'String.cut' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TSTR) then
            begin
                if (env.Settings.StrictType) and (assertEitherLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TEXP, TFUN, i)) then Exit;
                EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
                StrEbx := '';
                env.Variables.addLayer();
                if (EntEax.EntityType = TFUN) then
                begin
                    for index := 1 to Length(StrEax) do
                    begin
                        stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEax[index]));
                        env.doFunction(EntEax.Num2);
                        if (stack_pop(env.Stack[env.Settings.StackPointer]).Num <> 0) 
                            then StrEbx := StrEbx + StrEax[index];
    		        end;
                end else begin
                    for index := 1 to Length(StrEax) do
                    begin
                        stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEax[index]));
                        env.doFunction(EntEax.Num2);
                        if (stack_pop(env.Stack[env.Settings.StackPointer]).Num <> 0) 
                            then StrEbx := StrEbx + StrEax[index];
    		        end;
                end;
                env.Variables.removeLayer();
                stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEbx));
            end else Found := False;
        end;
        'String.reduce',
        'String.reduceLeft' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 3).EntityType = TSTR) then
            begin
                EntEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
                if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TFUN, i)) then Exit;
                EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
                env.Variables.addLayer();
                for index := 1 to Length(StrEax) do
                begin
                    stack_push(env.Stack[env.Settings.StackPointer], EntEbx);
                    stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEax[index]));
                    env.doFunction(EntEax.Num2);
                    EntEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
                end;
                env.Variables.removeLayer();
                stack_push(env.Stack[env.Settings.StackPointer], EntEbx);
            end else Found := False;
        end;
        'String.reduceFromFirst',
        'String.reduceLeftFromFirst' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TSTR) then
            begin
                if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TFUN, i)) then Exit;
                EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
                EntEbx := buildString(StrEax[1]);
                env.Variables.addLayer();
                for index := 2 to Length(StrEax) do
                begin
                    stack_push(env.Stack[env.Settings.StackPointer], EntEbx);
                    stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEax[index]));
                    //doFunctionOld(EntEax, env.Stack, env.Settings, env.Variables);
                    env.doFunction(EntEax.Num2);
                    EntEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
                end;
                env.Variables.removeLayer();
                stack_push(env.Stack[env.Settings.StackPointer], EntEbx);
            end else Found := False;
        end;
        'String.reduceRight' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 3).EntityType = TSTR) then
            begin
                EntEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
                if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TFUN, i)) then Exit;
                EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
                env.Variables.addLayer();
                for index := Length(StrEax) downto 1 do
                begin
                    stack_push(env.Stack[env.Settings.StackPointer], EntEbx);
                    stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEax[index]));
                    //doFunctionOld(EntEax, env.Stack, env.Settings, env.Variables);
                    env.doFunction(EntEax.Num2);
                    EntEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
                end;
                env.Variables.removeLayer();
                stack_push(env.Stack[env.Settings.StackPointer], EntEbx);
            end else Found := False;
        end;
        'String.reduceRightFromLast' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TSTR) then
            begin
                if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TFUN, i)) then Exit;
                EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
                EntEbx := buildString(StrEax[Length(StrEax)]);
                env.Variables.addLayer();
                for index := Length(StrEax)-1 downto 1 do
                begin
                    stack_push(env.Stack[env.Settings.StackPointer], EntEbx);
                    stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEax[index]));
                    //doFunctionOld(EntEax, env.Stack, env.Settings, env.Variables);
                    env.doFunction(EntEax.Num2);
                    EntEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
                end;
                env.Variables.removeLayer();
                stack_push(env.Stack[env.Settings.StackPointer], EntEbx);
            end else Found := False;
        end;
        'String.strreduce',
        'String.strreduceLeft' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 3).EntityType = TSTR) then
            begin
                if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
                StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
                if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TFUN, i)) then Exit;
                EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
                env.Variables.addLayer();
                for index := 1 to Length(StrEax) do
                begin
                    stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEbx));
                    stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEax[index]));
                    //doFunctionOld(EntEax, env.Stack, env.Settings, env.Variables);
                    env.doFunction(EntEax.Num2);
                    StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
                end;
                env.Variables.removeLayer();
                stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEbx));
            end else Found := False;
        end;
        'String.strreduceFromFirst',
        'String.strreduceLeftFromFirst' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TSTR) then
            begin
                if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TFUN, i)) then Exit;
                EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
                StrEbx := StrEax[1];
                env.Variables.addLayer();
                for index := 2 to Length(StrEax) do
                begin
                    stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEbx));
                    stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEax[index]));
                    //doFunctionOld(EntEax, env.Stack, env.Settings, env.Variables);
                    env.doFunction(EntEax.Num2);
                    StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
                end;
                env.Variables.removeLayer();
                stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEbx));
            end else Found := False;
        end;
        'String.strreduceRight' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 3).EntityType = TSTR) then
            begin
                if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
                StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
                if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TFUN, i)) then Exit;
                EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
                env.Variables.addLayer();
                for index := Length(StrEax) downto 1 do
                begin
                    stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEbx));
                    stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEax[index]));
                    //doFunctionOld(EntEax, env.Stack, env.Settings, env.Variables);
                    env.doFunction(EntEax.Num2);
                    StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
                end;
                env.Variables.removeLayer();
                stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEbx));
            end else Found := False;
        end;
        'String.strreduceRightFromLast' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TSTR) then
            begin
                if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TFUN, i)) then Exit;
                EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
                StrEbx := StrEax[Length(StrEax)];
                env.Variables.addLayer();
                for index := Length(StrEax)-1 downto 1 do
                begin
                    stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEbx));
                    stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEax[index]));
                    //doFunctionOld(EntEax, env.Stack, env.Settings, env.Variables);
                    env.doFunction(EntEax.Num2);
                    StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
                end;
                env.Variables.removeLayer();
                stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEbx));
            end else Found := False;
        end;
        'String.first' : begin
            if (stack_get(env.Stack[env.Settings.StackPointer]).EntityType = TSTR) then
            begin
                //if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
                StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
                stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEax[1])); 
            end else Found := False;
        end;
        'String.last' : begin
            if (stack_get(env.Stack[env.Settings.StackPointer]).EntityType = TSTR) then
            begin
                //if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
                StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
                stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEax[Length(StrEax)])); 
            end else Found := False;
        end;

        // String.-
        'String.delete' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TSTR) and (stack_getback(env.Stack[env.Settings.StackPointer], 1).EntityType = TSTR) then
            begin
                // STR1 STR2 delete
                //if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
                StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
                //if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
                StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
                stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEax - StrEbx));
            end else if (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TSTR) and (stack_getback(env.Stack[env.Settings.StackPointer], 1).EntityType = TNUM) then
            begin
                // STR1 NUM1 delete
                if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
                ExtEax := Real(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
                //if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
                StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
                stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEax - trunc(ExtEax)));
            end else Found := False;
        end;
        // String.*
        'String.copies' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TNUM) and (stack_getback(env.Stack[env.Settings.StackPointer], 1).EntityType = TSTR) then
            begin
                // NUM1 STR1 copies
                StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
                if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
                ExtEax := Real(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
                stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEax * trunc(ExtEax)));
            end else if (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TSTR) and (stack_getback(env.Stack[env.Settings.StackPointer], 1).EntityType = TNUM) then
            begin
                // STR1 NUM1 copies
                if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
                ExtEax := Real(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
                StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
                stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEax * trunc(ExtEax)));
            end else Found := False;
        end;
        // String./
        'String.divide' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TSTR) and (stack_getback(env.Stack[env.Settings.StackPointer], 1).EntityType = TSTR) then
            begin
                // STR1 STR2 delete
                //if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
                StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
                //if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
                StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
                stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEax / StrEbx));
            end else if (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TSTR) and (stack_getback(env.Stack[env.Settings.StackPointer], 1).EntityType = TNUM) then
            begin
                // STR1 NUM1 delete
                if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
                ExtEax := Real(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
                //if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
                StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
                stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEax / Int(ExtEax)));
            end else Found := False;
        end;
        'String.removeMatching' : begin
            //if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
            StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            //if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
            StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEax / StrEbx));
        end;
        // logics
        'String.isEmpty' : begin
            if (stack_get(env.Stack[env.Settings.StackPointer]).EntityType = TSTR) then
            begin
                //if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit; 
                StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
                stack_push(env.Stack[env.Settings.StackPointer], buildBoolean(StrEax = ''));
            end else Found := False;
        end;

        // others
        'String.translate' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit; 
            StrEcx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit; 
            StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
            StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            if (length(StrEbx) = length(StrEcx))
                then stack_push(env.Stack[env.Settings.StackPointer], buildString(StringTranslate(StrEax, StrEbx, StrEcx)))
                else stack_push(env.Stack[env.Settings.StackPointer], raiseStringSameLength(i));
        end;
        else begin
        	Found := false;
        end;
	end;
	Result := Found;
end;

function lib_directives(i : String; var env : PSEnvironment; var db : PSCommandDB) : Boolean;
var
	Found          : Boolean;
	StrEax         : String;
    IntEax, IntEbx : Integer;
begin
	Found := true;
    //writeln('dir: ', i);
    if (i[1] <> '@') then begin
        Found := false;
        lib_directives := false;
        Exit;
    end;
	case i of
        '@silent',
        '@silent(true)',
        '@silent(TRUE)' : begin
           env.Settings.Prevent := true;
        end;
        '@silent(false)',
        '@silent(FALSE)' : begin
           env.Settings.Prevent := false;
        end;
        '@autoclear(true)', 
        '@autoclear(TRUE)' : begin // obsolete since v053
           env.Settings.Autoclear := true;
        end;
        '@autoclear(false)',
        '@autoclear(FALSE)' : begin
           env.Settings.Autoclear := false;
        end;
        '@stricttype(true)',
        '@stricttype(TRUE)' : begin
           env.Settings.StrictType := true;
        end;
        '@stricttype(false)',
        '@stricttype(FALSE)' : begin
           env.Settings.StrictType := false;
        end;
        '@casesensitive(true)',
        '@casesensitive(TRUE)' : begin
           env.Settings.CaseSensitive := true;
        end;
        '@casesensitive(false)',
        '@casesensitive(FALSE)' : begin
           env.Settings.CaseSensitive := false;
        end;
        '@infmode',
        '@infmode(TRUE)',
        '@infmode(true)' : begin
           env.Settings.InfMode := true;
        end;
        '@infmode(FALSE)',
        '@infmode(false)' : begin
           env.Settings.InfMode := false;
        end;
        '@real' : begin
           env.Settings.Mask := '0.################';
        end;
        '@decimal' : begin
           env.Settings.Mask := '#,###.################';
        end;
        '@milli' : begin
           env.Settings.Mask := '0.000';
        end;
        '@float' : begin
           env.Settings.Mask := '0.000000';
        end;
        '@double' : begin
           env.Settings.Mask := '0.000000000000000';
        end;
        '@money' : begin
           env.Settings.Mask := '0.00';
        end;
        '@amoney' : begin
           env.Settings.Mask := '#,###.00';
        end;
        '@int' : begin
           env.Settings.Mask := '0';
        end;
        '@scientific' : begin
           env.Settings.Mask := '0.################E+00';
        end;
        '@scientific1' : begin
           env.Settings.Mask := '0.000000000000000E+0000';
        end;
        '@sorttype(BUBBLESORT)',
        '@sorttype(BSORT)',
        '@sorttype(0)' : begin
           env.Settings.sorttype := 0;
        end;
        '@sorttype(QUICKSORT)',
        '@sorttype(QSORT)',
        '@sorttype(1)' : begin
           env.Settings.sorttype := 1;
        end;
        '@sorttype(MERGESORT)',
        '@sorttype(MSORT)',
        '@sorttype(2)' : begin
           env.Settings.sorttype := 2;
        end;
        '@sorttype(BOGOSORT)',
        '@sorttype(RSORT)',
        '@sorttype(RANDOMSORT)',
        '@sorttype(3)' : begin
           env.Settings.sorttype := 3;
        end;
        '@useshell(BASH)' : begin
           env.Settings.Shell := SHELL_BASH;
        end;
        '@useshell(ZSH)' : begin
           env.Settings.Shell := SHELL_ZSH;
        end;
        '@useshell(SH)' : begin
           env.Settings.Shell := SHELL_SH;
        end;
        '@useshell(CMD)' : begin
           env.Settings.Shell := SHELL_CMD;
        end;
        '@useshell(POWERSHELL)',
        '@useshell(PWSH)' : begin
           env.Settings.Shell := SHELL_PWSH;
        end;

		'@use(Math)' : begin
           env.Settings.Packages.UseMath := true;
		   env.Settings.Packages.UseAnything := true;
        end;
		'@unuse(Math)' : begin
           env.Settings.Packages.UseMath := false;
		   env.Settings.Packages.UseAnything := verifyPackages(env.Settings.Packages);
        end;
		'@use(String)' : begin
           env.Settings.Packages.UseString := true;
		   env.Settings.Packages.UseAnything := true;
        end;
		'@unuse(String)' : begin
           env.Settings.Packages.UseString := false;
		   env.Settings.Packages.UseAnything := verifyPackages(env.Settings.Packages);
        end;
        '@use(Array)' : begin
           env.Settings.Packages.UseArray := true;
		   env.Settings.Packages.UseAnything := true;
        end;
		'@unuse(Array)' : begin
           env.Settings.Packages.UseArray := false;
		   env.Settings.Packages.UseAnything := verifyPackages(env.Settings.Packages);
        end;
        '@use(Console)' : begin
           env.Settings.Packages.UseConsole := true;
		   env.Settings.Packages.UseAnything := true;
        end;
		'@unuse(Console)' : begin
           env.Settings.Packages.UseConsole := false;
		   env.Settings.Packages.UseAnything := verifyPackages(env.Settings.Packages);
        end;
        '@use(Date)' : begin
           env.Settings.Packages.UseDate := true;
		   env.Settings.Packages.UseAnything := true;
        end;
		'@unuse(Date)' : begin
           env.Settings.Packages.UseDate := false;
		   env.Settings.Packages.UseAnything := verifyPackages(env.Settings.Packages);
        end;
        '@use(Number)' : begin
           env.Settings.Packages.UseNumber := true;
		   env.Settings.Packages.UseAnything := true;
        end;
		'@unuse(Number)' : begin
           env.Settings.Packages.UseNumber := false;
		   env.Settings.Packages.UseAnything := verifyPackages(env.Settings.Packages);
        end;
        


        '@stringmode' : begin
            env.Settings.StringStart := 0;
            env.Settings.StringMode := MCLIKE;
        end;
        '@stringmode(DEFAULT)' : begin
            env.Settings.StringStart := 0;
            env.Settings.StringMode := MCLIKE;
        end;
        '@stringmode(CLIKE)' : begin
            env.Settings.StringStart := 0;
            env.Settings.StringMode := MCLIKE;
        end;
        '@stringmode(PASCAL)' : begin
            env.Settings.StringStart := 1;
            env.Settings.StringMode := MPASCL;
        end;

        '@stringindex' : begin
            env.Settings.StringStart := 0;
        end;
        '@stringindex(DEFAULT)' : begin
            env.Settings.StringStart := 0;
        end;
        '@stringindex(0)' : begin
            env.Settings.StringStart := 0;
        end;
        '@stringindex(1)' : begin
            env.Settings.StringStart := 1;
        end;

        '@maxprecision(0)' : begin
            env.Settings.Mask := '0';
        end;
        '@fixprecision(0)' : begin
            env.Settings.Mask := '0';
        end;
        '@maxprecision(-1)' : begin
            env.Settings.Mask := '0.################';
        end;
        '@fixprecision(-1)' : begin
            env.Settings.Mask := '0.000000000000000';
        end;
        '@maxprecision(DEFAULT)' : begin
            env.Settings.Mask := '0.################';
        end;
        '@fixprecision(DEFAULT)' : begin
            env.Settings.Mask := '0.000000000000000';
        end;
		
        else begin
        	case LeftStr(i, 9) of
            	'@source("' : begin
              		if (RightStr(i, 2) = '")') then begin
                		StrEax := RightStr(i, Length(i)-9);
                		StrEax := LeftStr(StrEax, Length(StrEax)-2);
                		read_sourcefile(StrEax, env, db);
              		end else begin
                        stack_push(env.Stack[env.Settings.StackPointer], raiseException('ESyntax:CExpression: Syntax Error at expression "'+i+'".'));
              		end;
             	end;
             	else begin
                    case LeftStr(i, 14) of
                        '@maxprecision(' : begin
                            if (RightStr(i, 1) = ')') then begin
                                StrEax := RightStr(i, Length(i)-14);
                		        StrEax := LeftStr(StrEax, Length(StrEax)-1);
                                if (TryStrToInt(StrEax, IntEax)) 
                                then begin
                                    if IntEax > 0 then
                                    begin
                                        StrEax := '0.';
                                        for IntEbx := 1 to IntEax do
                                            StrEax := StrEax + '#';
                                        env.Settings.Mask := StrEax;
                                    end else begin
                                        stack_push(env.Stack[env.Settings.StackPointer], raiseException('EConstraint:CIntegerEx: a non-negative integer (or -1) expected at "'+i+'".'));  
                                    end;
                                end else begin
                                    stack_push(env.Stack[env.Settings.StackPointer], raiseException('EConstraint:CIntegerEx: a non-negative integer (or -1) expected at "'+i+'".'));
                                end;
                            end else begin
                	        	stack_push(env.Stack[env.Settings.StackPointer], raiseException('ESyntax:CExpression: Syntax Error at expression "'+i+'".'));
              		        end;
                        end;
                        '@fixprecision(' : begin
                            if (RightStr(i, 1) = ')') then begin
                                StrEax := RightStr(i, Length(i)-14);
                		        StrEax := LeftStr(StrEax, Length(StrEax)-1);
                                if (TryStrToInt(StrEax, IntEax)) 
                                then begin
                                    if IntEax > 0 then
                                    begin
                                        StrEax := '0.';
                                        for IntEbx := 1 to IntEax do
                                            StrEax := StrEax + '0';
                                        env.Settings.Mask := StrEax;
                                    end else begin
                                        stack_push(env.Stack[env.Settings.StackPointer], raiseException('EConstraint:CIntegerEx: a non-negative integer (or -1) expected at "'+i+'".'));  
                                    end;
                                end else begin
                                    stack_push(env.Stack[env.Settings.StackPointer], raiseException('EConstraint:CIntegerEx: a non-negative integer (or -1) expected at "'+i+'".'));
                                end;
                            end else begin
                	        	stack_push(env.Stack[env.Settings.StackPointer], raiseException('ESyntax:CExpression: Syntax Error at expression "'+i+'".'));
              		        end;
                        end;
                        else Found := false;
                    end;
             	end;
        	end;
        end;
    end;
    lib_directives := Found;
end;

function lib_constants(i : String; var env : PSEnvironment; var db : PSCommandDB) : Boolean;
var
	Found  : Boolean;
begin
	Found := true;
	case i of
        'NULL' : begin
            stack_push(env.Stack[env.Settings.StackPointer], buildNull());
        end;
        'TRUE' : begin
            stack_push(env.Stack[env.Settings.StackPointer], buildBoolean(True));
        end;
        'FALSE' : begin
            stack_push(env.Stack[env.Settings.StackPointer], buildBoolean(False));
        end;
        else begin
        	Found := false;
        end;
	end;
    lib_constants := Found;
end;


function lib_variables(i : String; var env : PSEnvironment; var db : PSCommandDB) : Boolean;
var
	Found  : Boolean;
	StrEax, StrEbx : String;
	EntEax : Entity;
	LogEax : Boolean;
begin
	Found := true;
    case LeftStr(i, 1) of
    	'$' : begin
      		if (RightStr(i, Length(i)-1) <> '') then begin
        		StrEax := RightStr(i, Length(i)-1);
                if LeftStr(StrEax, 7) = 'global.'  
                    then EntEax := env.Variables.getGlobalVariable(StrEax)
                    else EntEax := env.Variables.getVariable(StrEax);
    			stack_push(env.Stack[env.Settings.StackPointer], EntEax);
      		end else begin
                stack_push(env.Stack[env.Settings.StackPointer], raiseGetUnnamedVariable());
      		end;
     	end;
     	'>' : begin 
     		if (RightStr(i, Length(i)-1) <> '') then begin
        		StrEax := RightStr(i, Length(i)-1);
        		EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                if isValidForVariables(StrEax) then
                begin
                    if LeftStr(StrEax, 7) = 'global.' 
                        then env.Variables.setGlobalVariable(StrEax, EntEax)
                        else
    			            //env.Variables.setVariable(StrEax, EntEax);
                            env.Variables.setLocalVariable(StrEax, EntEax);
                        
                end else begin
                    stack_push(env.Stack[env.Settings.StackPointer], raiseSetInvalidVariable(i, StrEax));
                end;
      		end else begin
        		stack_push(env.Stack[env.Settings.StackPointer], raiseSetUnnamedVariable());
      		end;
     	end;
     	'?' : begin 
     		if (RightStr(i, Length(i)-1) <> '') then begin
        		StrEax := RightStr(i, Length(i)-1);
    			LogEax := env.Variables.isVarAssigned(StrEax);
    			stack_push(env.Stack[env.Settings.StackPointer], buildBoolean(LogEax));
      		end else begin
        		stack_push(env.Stack[env.Settings.StackPointer], raiseGetUnnamedVariable());
      		end;
     	end;
     	'~' : begin 
     		if (RightStr(i, Length(i)-1) <> '') then begin
        		StrEax := RightStr(i, Length(i)-1);
    			env.Variables.removeVariable(StrEax);
      		end else begin
        		stack_push(env.Stack[env.Settings.StackPointer], raiseGetUnnamedVariable());
      		end;
     	end;
     	else begin
            case LeftStr(i, 2) of
                '->' : begin 
     		        if (RightStr(i, Length(i)-2) <> '') then begin
                		StrEax := RightStr(i, Length(i)-2);
                		EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
    	        		if isValidForVariables(StrEax) then
                        begin
                            if LeftStr(StrEax, 7) = 'global.' 
                                then env.Variables.setGlobalVariable(StrEax, EntEax) 
                                else
    			                    //env.Variables.setVariable(StrEax, EntEax);
                                    env.Variables.setLocalVariable(StrEax, EntEax);
                        end else begin
                            stack_push(env.Stack[env.Settings.StackPointer], raiseSetInvalidVariable(i, StrEax));
                        end;
      	        	end else begin
                		stack_push(env.Stack[env.Settings.StackPointer], raiseSetUnnamedVariable());
      	        	end;
     	        end;
                else begin
                    Found := false;
                end;
            end;
     	end;
    end;
    Result := Found;
end;

function lib_consolemanipulators(i : String; var env : PSEnvironment; var db : PSCommandDB) : Boolean;
var
    Found   : Boolean;
    x, y, z : ShortInt;
    StrEax  : String; 
    StrEbx  : String;
    StrEcx  : String;
    a       : Integer;
    index   : LongInt;
begin
    Found := true;
    case i of
        'Console.textColor',
        'Console.textColour' : begin
            if (env.Settings.StrictType) and (assertIntegerLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            y := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            TextColor(y);
        end;
        'Console.textBackground' : begin
            if (env.Settings.StrictType) and (assertIntegerLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            y := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            TextBackground(y);
        end;
        {$IfNDef MSWINDOWS}
        'Console.textColorANSI',
        'Console.textColourANSI' : begin
            if (env.Settings.StrictType) and (assertIntegerLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            y := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            TextColorANSI(y);
        end;
        'Console.textBackgroundANSI' : begin
            if (env.Settings.StrictType) and (assertIntegerLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            y := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            TextBackgroundANSI(y); 
        end;
        'Console.textColorRGB',
        'Console.textColourRGB' : begin
            if (env.Settings.StrictType) and (assertIntegerLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            z := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            if (env.Settings.StrictType) and (assertIntegerLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            y := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            if (env.Settings.StrictType) and (assertIntegerLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            x := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            TextColorRGB(x, y, z);
        end;
        'Console.textBackgroundRGB' : begin
            if (env.Settings.StrictType) and (assertIntegerLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            z := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            if (env.Settings.StrictType) and (assertIntegerLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            y := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            if (env.Settings.StrictType) and (assertIntegerLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            x := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            TextBackgroundRGB(x, y, z);
        end;
        'Console.textReset' : begin
            TextReset();
        end;
        'Console.textBold' : begin
            TextBold();
        end;
        'Console.textItalic' : begin
            TextItalic();
        end;
        'Console.textUnderline' : begin
            TextUnderline();
        end;
        'Console.textBlink' : begin
            TextBlink();
        end;
        'Console.textFastBlink' : begin
            TextFastBlink();
        end;
        'Console.textInverse' : begin
            TextInverse();
        end;
        'Console.textBoldOff' : begin
            TextBoldOff();
        end;
        'Console.textItalicOff' : begin
            TextItalicOff();
        end;
        'Console.textUnderlineOff' : begin
            TextUnderlineOff();
        end;
        'Console.textBlinkOff' : begin
            TextBlinkOff();
        end;
        'Console.textFastBlinkOff' : begin
            TextFastBlinkOff();
        end;
        'Console.textInverseOff' : begin
            TextInverseOff();
        end;
        {$ENDIF}
        'Console.delay' : begin
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            a := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            Delay(a);
        end;
        'Console.gotoXY' : begin
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            y := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            x := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            GotoXY(x,y);
        end;
        'Console.clrscr',
        'Console.clearScreen' : begin
            clrscr();
        end;
        'Console.runCommand' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit; 
            StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            StrEcx := executeCommand(StrEbx, env.Settings.Shell);
            stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEcx));
        end;
        'Console.UserName' : begin
            stack_push(env.Stack[env.Settings.StackPointer], buildString(getUser()));
        end;
        'Console.UserHome' : begin
            stack_push(env.Stack[env.Settings.StackPointer], buildString(GetUserDir()));
        end;
        'Console.HostName' : begin
            stack_push(env.Stack[env.Settings.StackPointer], buildString(getHost()));
        end;
        'Console.KernelName' : begin
            stack_push(env.Stack[env.Settings.StackPointer], buildString(getKernelName()));
        end;
        'Console.KernelVersion' : begin
            stack_push(env.Stack[env.Settings.StackPointer], buildString(getKernelVersion()));
        end;
        'Console.OSName' : begin
            stack_push(env.Stack[env.Settings.StackPointer], buildString(getOS()));
        end;
        'Console.OSVersion' : begin
            stack_push(env.Stack[env.Settings.StackPointer], buildString(getOSVersion()));
        end;
        'Console.OSDistribution',
        'Console.OSDist' : begin
            stack_push(env.Stack[env.Settings.StackPointer], buildString(getOSDistribution()));
        end;
         'Console.OSDistributionFull',
         'Console.OSDistFull' : begin
            stack_push(env.Stack[env.Settings.StackPointer], buildString(getOSDistributionFull()));
        end;
        'Console.CPUArchitecture',
        'Console.CPUArch' : begin
            stack_push(env.Stack[env.Settings.StackPointer], buildString(getCPUArch()));
        end;
        'Console.CPUBits' : begin
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(getCPUBits()));
        end;
        'Console.system' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit; 
            StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            StrEcx := executeCommand(StrEbx, env.Settings.Shell);
            stack_push(env.Stack[env.Settings.StackPointer], buildString(StrEcx));
        end;
        'Console.getShell' : begin
           stack_push(env.Stack[env.Settings.StackPointer], buildString(env.Settings.Shell));
        end;
        'Console.setShell' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit; 
            StrEbx := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            env.Settings.Shell := StrEbx;
        end;
        'Console.isUnix' : begin
            stack_push(env.Stack[env.Settings.StackPointer], buildBoolean(isUnix()));
        end;
        'Console.isFreeBSD' : begin
            stack_push(env.Stack[env.Settings.StackPointer], buildBoolean(isFreeBSD()));
        end;
        'Console.isMacOS' : begin
            stack_push(env.Stack[env.Settings.StackPointer], buildBoolean(isMacOS()));
        end;
        'Console.isLinux' : begin
            stack_push(env.Stack[env.Settings.StackPointer], buildBoolean(isLinux()));
        end;
        'Console.isWindows' : begin
            stack_push(env.Stack[env.Settings.StackPointer], buildBoolean(isWindows()));
        end;
        {$IFDEF LINUX}
        {$I ConsoleLinuxFunc.fph}
        {$ENDIF}
        {$IFDEF MSWINDOWS}
        {$I ConsoleWindowsFunc.fph}
        {$ENDIF}
        {$IFDEF DARWIN}
        {$I ConsoleMacFunc.fph}
        {$ENDIF}
        else begin
            Found := false;
        end;
    end;
    Result := Found;
end;

function lib_exceptions(i : String; var env : PSEnvironment; var db : PSCommandDB) : Boolean;
var
    Found  : Boolean;
    ExcEax : Entity;
begin
    Found := true;
    case i of
        'EXC' : begin
            stack_push(env.Stack[env.Settings.StackPointer], buildException(''));
        end;
        'toException' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit; 
            stack_push(env.Stack[env.Settings.StackPointer], buildException(stack_pop(env.Stack[env.Settings.StackPointer]).Str));
        end;
        'raiseException' : begin
            if (stack_get(env.Stack[env.Settings.StackPointer]).EntityType = TEXC) then
            begin
                ExcEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                ExcEax.Num := 1;
                stack_push(env.Stack[env.Settings.StackPointer], ExcEax);
            end else //if (stack_get(env.Stack[env.Settings.StackPointer]).EntityType = TSTR) then
            begin
                stack_push(env.Stack[env.Settings.StackPointer], raiseException(stack_pop(env.Stack[env.Settings.StackPointer]).Str));    
            end;
        end;
        else begin
            Found := false;
        end;
    end;
    lib_exceptions := Found;
end;

// todo: check access violation
// tested on mac
// % ./papaj do '[ -176.77669529663689 -18.933982822017867 53.786796564403573 -13.585786437626904 1] polyroots println' -L
// [ 4.9999731813895716 -1.4142135623730967 5.0000134093052147+0.0000232259347495i 5.0000134093052147-0.0000232259347495i ]
// % ./papaj do '[-5 1] [-5 1] [-5 1] [2 sqrt 1] 3 times polymul println' -L                                              
// [ -176.77669529663689 -18.933982822017867 53.786796564403573 -13.585786437626904 1 ]
// % ./papaj do '[-5 1] [-5 1] [-5 1] [2 sqrt 1] 3 times polymul polyroots println' -L                                    
// EAccessViolation: Access violation
// so far works, monitor the bug
// especially in places where empty arrays are declared

function lib_arrays(i : String; var env : PSEnvironment; var db : PSCommandDB) : Boolean;
var
	Found                  : Boolean;
    IntEax, IntEbx, IntEcx : LongInt;
    ArrEax, ArrEbx, ArrEcx : Entity;
    EntEax, EntEbx         : Entity;
    LogEax                 : Boolean;
    StrEax                 : String;
    ExtEax                 : Extended;
    index                  : Integer;
begin
	Found := true;
	case i of
        'Array.crush' : begin
            if (stack_get(env.Stack[env.Settings.StackPointer]).EntityType = TVEC) then
            begin
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                stack_reverse(env.Stack[ArrEax.Num2]);
                for index := 0 to stack_size(env.Stack[ArrEax.Num2])-1 do
                begin
                    EntEax := stack_getFront(env.Stack[ArrEax.Num2], index);
                    stack_push(env.Stack[env.Settings.StackPointer], EntEax);
                end;
                //stack_reverse(env.Stack[ArrEax.Num2]);
            end else Found := False;
        end;
        'Array.destroy' : begin
            //if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            stack_reverse(env.Stack[ArrEax.Num2]);
            for index := 0 to stack_size(env.Stack[ArrEax.Num2])-1 do
            begin
                EntEax := stack_pop(env.Stack[ArrEax.Num2]);
                stack_push(env.Stack[env.Settings.StackPointer], EntEax);
            end;
        end;
        'Array.getAt' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TVEC) then
            begin
                if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
                IntEax := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
                //if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                stack_push(env.Stack[env.Settings.StackPointer], env.Stack[ArrEax.Num2].Values[IntEax]);
            end else Found := False;
        end;
        'Array.getAt!' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TVEC) then
            begin
                if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
                IntEax := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
                //if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                EntEax := stack_popFront(env.Stack[ArrEax.Num2], IntEax);
                stack_push(env.Stack[env.Settings.StackPointer], EntEax);
            end else Found := False;
        end;
        'Array.setAt' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 3).EntityType = TVEC) then
            begin
                EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
                IntEax := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
                if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                //
                stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, stack_size(env.Stack[ArrEax.Num2])));
                ArrEcx := stack_pop(env.Stack[env.Settings.StackPointer]);
                IntEbx := 0;
                while (IntEbx <= stack_size(env.Stack[ArrEax.Num2])-1) do
                begin
                    if (IntEax = IntEbx)
                        then env.Stack[ArrEcx.Num2].Values[IntEbx] := EntEax
                        else env.Stack[ArrEcx.Num2].Values[IntEbx] := env.Stack[ArrEax.Num2].Values[IntEbx];
                    IntEbx := IntEbx + 1;
                end;
                stack_push(env.Stack[env.Settings.StackPointer], ArrEcx);
            end else Found := False;
        end;
        'Array.setAt!' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 3).EntityType = TVEC) then
            begin
                EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
                IntEax := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
                if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                env.Stack[ArrEax.Num2].Values[IntEax] := EntEax;
                stack_push(env.Stack[env.Settings.StackPointer], ArrEax);
            end else Found := False;
        end;
        'Array.setAt!!' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 3).EntityType = TVEC) then
            begin
                EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
                IntEax := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
                if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                env.Stack[ArrEax.Num2].Values[IntEax] := EntEax;
                //stack_push(env.Stack[env.Settings.StackPointer], ArrEax);
            end else Found := False;
        end;
        'Array.push' : begin
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, stack_size(env.Stack[ArrEax.Num2])));
            ArrEcx := stack_pop(env.Stack[env.Settings.StackPointer]);
            IntEbx := 0;
            while (IntEbx <= stack_size(env.Stack[ArrEax.Num2])-1) do
            begin
                env.Stack[ArrEcx.Num2].Values[IntEbx] := env.Stack[ArrEax.Num2].Values[IntEbx];
                IntEbx := IntEbx + 1;
            end;
            stack_push(env.Stack[ArrEcx.Num2], EntEax);
            stack_push(env.Stack[env.Settings.StackPointer], ArrEcx);
        end;
        'Array.push!' : begin
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            stack_push(env.Stack[ArrEax.Num2], EntEax);
            stack_push(env.Stack[env.Settings.StackPointer], ArrEax);
        end;
        'Array.push!!' : begin
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            stack_push(env.Stack[ArrEax.Num2], EntEax);
            //stack_push(env.Stack[env.Settings.StackPointer], ArrEax);
        end;
        'Array.getTail' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            EntEax := stack_get(env.Stack[ArrEax.Num2]);
            stack_push(env.Stack[env.Settings.StackPointer], EntEax);
        end;
        'Array.getTail!' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            EntEax := stack_pop(env.Stack[ArrEax.Num2]);
            stack_push(env.Stack[env.Settings.StackPointer], EntEax);
        end;
        'Array.pop' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, stack_size(env.Stack[ArrEax.Num2])-1));
            ArrEcx := stack_pop(env.Stack[env.Settings.StackPointer]);
            IntEbx := 0;
            while (IntEbx <= stack_size(env.Stack[ArrEax.Num2])-2) do
            begin
                env.Stack[ArrEcx.Num2].Values[IntEbx] := env.Stack[ArrEax.Num2].Values[IntEbx];
                IntEbx := IntEbx + 1;
            end;
            //EntEax := stack_pop(env.Stack[ArrEcx.Num2]);
            stack_push(env.Stack[env.Settings.StackPointer], ArrEcx);
        end;
        'Array.pop!' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            EntEax := stack_pop(env.Stack[ArrEax.Num2]);
            stack_push(env.Stack[env.Settings.StackPointer], ArrEax);
        end;
        'Array.pop!!' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            EntEax := stack_pop(env.Stack[ArrEax.Num2]);
            //stack_push(env.Stack[env.Settings.StackPointer], ArrEax);
        end;
        'Array.getHead' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            stack_push(env.Stack[env.Settings.StackPointer], env.Stack[ArrEax.Num2].Values[0]);
        end;
        'Array.getHead!' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            EntEax := stack_firstpop(env.Stack[ArrEax.Num2]);
            stack_push(env.Stack[env.Settings.StackPointer], EntEax);
        end;

        'Array.shift' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, stack_size(env.Stack[ArrEax.Num2])-1));
            ArrEcx := stack_pop(env.Stack[env.Settings.StackPointer]);
            IntEbx := 0;
            while (IntEbx <= stack_size(env.Stack[ArrEax.Num2])-2) do
            begin
                env.Stack[ArrEcx.Num2].Values[IntEbx] := env.Stack[ArrEax.Num2].Values[IntEbx+1];
                IntEbx := IntEbx + 1;
            end;
            //EntEax := stack_pop(env.Stack[ArrEcx.Num2]);
            stack_push(env.Stack[env.Settings.StackPointer], ArrEcx);
        end;
        'Array.shift!' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            EntEax := stack_firstpop(env.Stack[ArrEax.Num2]);
            stack_push(env.Stack[env.Settings.StackPointer], ArrEax);
        end;
        'Array.shift!!' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            EntEax := stack_firstpop(env.Stack[ArrEax.Num2]);
            //stack_push(env.Stack[env.Settings.StackPointer], EntEax);
        end;
        'Array.pushAt' : begin
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            IntEax := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, stack_size(env.Stack[ArrEax.Num2])+1));
            ArrEcx := stack_pop(env.Stack[env.Settings.StackPointer]);
            IntEbx := 0;
            while (IntEbx < IntEax) do
            begin
                env.Stack[ArrEcx.Num2].Values[IntEbx] := env.Stack[ArrEax.Num2].Values[IntEbx];
                IntEbx := IntEbx + 1;
            end;
            env.Stack[ArrEcx.Num2].Values[IntEax] := EntEax;
            IntEbx := IntEbx + 1;
            while (IntEbx <= stack_size(env.Stack[ArrEax.Num2])) do
            begin
                env.Stack[ArrEcx.Num2].Values[IntEbx] := env.Stack[ArrEax.Num2].Values[IntEbx-1];
                IntEbx := IntEbx + 1;
            end;
            //stack_push(env.Stack[ArrEcx.Num2], EntEax);
            stack_push(env.Stack[env.Settings.StackPointer], ArrEcx);
        end;
        'Array.pushAt!' : begin
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            IntEax := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            stack_pushFront(env.Stack[ArrEax.Num2], EntEax, IntEax);
            stack_push(env.Stack[env.Settings.StackPointer], ArrEax);
        end;
        'Array.pushAt!!' : begin
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            IntEax := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            stack_pushFront(env.Stack[ArrEax.Num2], EntEax, IntEax);
        end;
        'Array.popAt' : begin
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            IntEax := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, stack_size(env.Stack[ArrEax.Num2])-1));
            ArrEcx := stack_pop(env.Stack[env.Settings.StackPointer]);
            IntEbx := 0;
            while (IntEbx < IntEax) do
            begin
                env.Stack[ArrEcx.Num2].Values[IntEbx] := env.Stack[ArrEax.Num2].Values[IntEbx];
                IntEbx := IntEbx + 1;
            end;
            //env.Stack[ArrEcx.Num2].Values[IntEax] := EntEax;
            IntEbx := IntEbx + 1;
            while (IntEbx <= stack_size(env.Stack[ArrEax.Num2])-1) do
            begin
                env.Stack[ArrEcx.Num2].Values[IntEbx-1] := env.Stack[ArrEax.Num2].Values[IntEbx];
                IntEbx := IntEbx + 1;
            end;
            //EntEax := stack_pop(env.Stack[ArrEcx.Num2]);
            stack_push(env.Stack[env.Settings.StackPointer], ArrEcx);
        end;
        'Array.popAt!' : begin
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            IntEax := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            EntEax := stack_popFront(env.Stack[ArrEax.Num2], IntEax);
            stack_push(env.Stack[env.Settings.StackPointer], ArrEax);
        end;
        'Array.popAt!!' : begin
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            IntEax := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            EntEax := stack_popFront(env.Stack[ArrEax.Num2], IntEax);
            //stack_push(env.Stack[env.Settings.StackPointer], ArrEax);
        end;
        
        'Array.length' : begin
            //if (env.Settings.StrictType) and (assertEitherLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, TVEC, i)) then Exit; 
            if (stack_get(env.Stack[env.Settings.StackPointer]).EntityType = TVEC) then
            begin
                IntEax := stack_get(env.Stack[env.Settings.StackPointer]).Num2;
                if (env.Settings.Autoclear) then stack_pop(env.Stack[env.Settings.StackPointer]);
                stack_push(env.Stack[env.Settings.StackPointer], buildNumber(stack_size(env.Stack[IntEax])));
            end else Found := False;
        end;
        'Array.toJSString' : begin
          	EntEax := stack_get(env.Stack[env.Settings.StackPointer]);
            if (env.Settings.Autoclear) then stack_pop(env.Stack[env.Settings.StackPointer]);
            if (EntEax.EntityType = TVEC) then
            begin
                stack_push(env.Stack[env.Settings.StackPointer], buildString(stack_showArrayFull(env.Stack[EntEax.Num2], env.Stack, env.Settings.Mask))); 
            end else begin
                stack_push(env.Stack[env.Settings.StackPointer], buildString(EntEax.Str));
            end;
        end;
        'Array.reduceSum' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(table_sum(env.Stack[ArrEax.Num2].Values)));
        end;
        'Array.reduceProduct' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(table_product(env.Stack[ArrEax.Num2].Values)));
        end;
        'Array.reduceAvg' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(table_avg(env.Stack[ArrEax.Num2].Values)));
        end;
        'Array.reduceMean' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(table_avg(env.Stack[ArrEax.Num2].Values)));
        end;
        'Array.reduceMeanGeom' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(table_avg_geom(env.Stack[ArrEax.Num2].Values)));
        end;
        'Array.reduceMeanHarm' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(table_avg_power(env.Stack[ArrEax.Num2].Values, -1)));
        end;
        'Array.reduceMeanSq' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(table_avg2(env.Stack[ArrEax.Num2].Values)));
        end;
        'Array.reducePowerMean' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;  
            ExtEax := Real(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(table_avg_power(env.Stack[ArrEax.Num2].Values, ExtEax)));
        end;
        'Array.reduceVariance' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(table_variance(env.Stack[ArrEax.Num2].Values)));
        end;
        'Array.reduceStddev',
        'Array.reduceStdDev' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(table_stddev(env.Stack[ArrEax.Num2].Values)));
        end;
        'Array.reduceVariance2' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(table_variance2(env.Stack[ArrEax.Num2].Values)));
        end;
        'Array.reduceStddev2',
        'Array.reduceStdDev2' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(table_stddev2(env.Stack[ArrEax.Num2].Values)));
        end;
        'Array.reduceMedian' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(table_median(env.Stack[ArrEax.Num2].Values)));
        end;
        'Array.reduceMode' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            stack_push(env.Stack[env.Settings.StackPointer], table_mode(env.Stack[ArrEax.Num2].Values));
        end;
        'Array.reduceModeStr' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            stack_push(env.Stack[env.Settings.StackPointer], table_modeStr(env.Stack[ArrEax.Num2].Values));
        end;
        'Array.reduceGCD' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(table_gcd(env.Stack[ArrEax.Num2].Values)));
        end;
        'Array.reduceLCM' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(table_lcm(env.Stack[ArrEax.Num2].Values)));
        end;
        'Array.reduceMin' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(table_min(env.Stack[ArrEax.Num2].Values)));
        end;
        'Array.reduceMax' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(table_max(env.Stack[ArrEax.Num2].Values)));
        end;
        'Array.findMin' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(table_min2(env.Stack[ArrEax.Num2].Values)));
        end;
        'Array.findMax' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(table_max2(env.Stack[ArrEax.Num2].Values)));
        end;
        'Array.sortNumbers' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            if (env.Settings.sorttype = 0) then bubblesort(env.Stack[ArrEax.Num2].Values);
            if (env.Settings.sorttype = 1) then quicksort(env.Stack[ArrEax.Num2].Values);
            if (env.Settings.sorttype = 2) then mergesort(env.Stack[ArrEax.Num2].Values);
            if (env.Settings.sorttype = 3) then bogosort(env.Stack[ArrEax.Num2].Values);
            stack_push(env.Stack[env.Settings.StackPointer], ArrEax);
        end;
        'Array.sortStrings' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            strings_sort(env.Stack[ArrEax.Num2].Values);
            stack_push(env.Stack[env.Settings.StackPointer], ArrEax);
        end;
        'Array.belongs' : begin
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            LogEax := False;
            for EntEbx in env.Stack[ArrEax.Num2].Values do
            begin
                //if (EntEax.Str = EntEbx.Str) and (EntEax.Num = EntEbx.Num) then 
                if EntEax = EntEbx then 
                begin 
                    LogEax := True;
                    break;
                end;
    		end;
            stack_push(env.Stack[env.Settings.StackPointer], buildBoolean(LogEax));
        end;
        'Array.map' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TVEC) then
            begin
                if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TFUN, i)) then Exit;
                EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                //if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, Length(env.Stack[ArrEax.Num2].Values)));
                ArrEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
                env.Variables.addLayer();
                for index := 0 to Length(env.Stack[ArrEax.Num2].Values)-1 do
                begin
                    stack_push(env.Stack[env.Settings.StackPointer], env.Stack[ArrEax.Num2].Values[index]);
                    //doFunctionOld(EntEax, env.Stack, env.Settings, env.Variables);
                    env.doFunction(EntEax.Num2);
                    env.Stack[ArrEbx.Num2].Values[index] := stack_pop(env.Stack[env.Settings.StackPointer]);
    		    end;
                env.Variables.removeLayer();
                stack_push(env.Stack[env.Settings.StackPointer], ArrEbx);
            end else Found := False;
        end;
        'Array.reduce',
        'Array.reduceLeft' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 3).EntityType = TVEC) then
            begin
                EntEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
                if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TFUN, i)) then Exit;
                EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                //if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                env.Variables.addLayer();
                for index := 0 to Length(env.Stack[ArrEax.Num2].Values)-1 do
                begin
                    stack_push(env.Stack[env.Settings.StackPointer], EntEbx);
                    stack_push(env.Stack[env.Settings.StackPointer], env.Stack[ArrEax.Num2].Values[index]);
                    //doFunctionOld(EntEax, env.Stack, env.Settings, env.Variables);
                    env.doFunction(EntEax.Num2);
                    EntEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
    		    end;
                stack_push(env.Stack[env.Settings.StackPointer], EntEbx);
                env.Variables.removeLayer();
            end else Found := False;
        end;
        'Array.reduceFromFirst',
        'Array.reduceLeftFromFirst' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TVEC) then
            begin
                if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TFUN, i)) then Exit;
                EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                //if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                env.Variables.addLayer();
                EntEbx := env.Stack[ArrEax.Num2].Values[0];
                for index := 1 to Length(env.Stack[ArrEax.Num2].Values)-1 do
                begin
                    stack_push(env.Stack[env.Settings.StackPointer], EntEbx);
                    stack_push(env.Stack[env.Settings.StackPointer], env.Stack[ArrEax.Num2].Values[index]);
                    //doFunctionOld(EntEax, env.Stack, env.Settings, env.Variables);
                    env.doFunction(EntEax.Num2);
                    EntEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
    		    end;
                stack_push(env.Stack[env.Settings.StackPointer], EntEbx);
                env.Variables.removeLayer();
            end else Found := False;
        end;
        'Array.reduceRight' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 3).EntityType = TVEC) then
            begin
                EntEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
                if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TFUN, i)) then Exit;
                EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                //if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                env.Variables.addLayer();
                for index := Length(env.Stack[ArrEax.Num2].Values)-1 downto 0 do
                begin
                    stack_push(env.Stack[env.Settings.StackPointer], EntEbx);
                    stack_push(env.Stack[env.Settings.StackPointer], env.Stack[ArrEax.Num2].Values[index]);
                    //doFunctionOld(EntEax, env.Stack, env.Settings, env.Variables);
                    env.doFunction(EntEax.Num2);
                    EntEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
    		    end;
                stack_push(env.Stack[env.Settings.StackPointer], EntEbx);
                env.Variables.removeLayer();
            end else Found := False;
        end;
        'Array.reduceRightFromLast' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TVEC) then
            begin
                if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TFUN, i)) then Exit;
                EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                //if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                env.Variables.addLayer();
                EntEbx := env.Stack[ArrEax.Num2].Values[Length(env.Stack[ArrEax.Num2].Values)-1];
                for index := Length(env.Stack[ArrEax.Num2].Values)-2 downto 0 do
                begin
                    stack_push(env.Stack[env.Settings.StackPointer], EntEbx);
                    stack_push(env.Stack[env.Settings.StackPointer], env.Stack[ArrEax.Num2].Values[index]);
                    //doFunctionOld(EntEax, env.Stack, env.Settings, env.Variables);
                    env.doFunction(EntEax.Num2);
                    EntEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
    		    end;
                stack_push(env.Stack[env.Settings.StackPointer], EntEbx);
                env.Variables.removeLayer();
            end else Found := False;
        end;
        'Array.join' : begin
            if  (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TVEC) 
            and (stack_getback(env.Stack[env.Settings.StackPointer], 1).EntityType = TVEC) then
            begin
                //if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
                ArrEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
                //if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                IntEax := Length(env.Stack[ArrEax.Num2].Values);
                IntEbx := Length(env.Stack[ArrEbx.Num2].Values);
                stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, IntEax + IntEbx));
                ArrEcx := stack_pop(env.Stack[env.Settings.StackPointer]);
                for index := 0 to IntEax-1 do
                begin
                    env.Stack[ArrEcx.Num2].Values[index] := env.Stack[ArrEax.Num2].Values[index];
                end; 
                for index := 0 to IntEbx-1 do
                begin
                    env.Stack[ArrEcx.Num2].Values[IntEax+index] := env.Stack[ArrEbx.Num2].Values[index];
                end;
                stack_push(env.Stack[env.Settings.StackPointer], ArrEcx);
            end else Found := False;
        end;
        'Array.split' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TVEC) then
            begin
                if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
                IntEax := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
                if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
                ArrEcx := stack_pop(env.Stack[env.Settings.StackPointer]);
                IntEbx := Length(env.Stack[ArrEcx.Num2].Values) - IntEax;
                stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, IntEax));
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, IntEbx));
                ArrEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
                for index := 0 to IntEax-1 do
                begin
                    env.Stack[ArrEax.Num2].Values[index] := env.Stack[ArrEcx.Num2].Values[index];
                end; 
                for index := 0 to IntEbx-1 do
                begin
                    env.Stack[ArrEbx.Num2].Values[index] := env.Stack[ArrEcx.Num2].Values[IntEax+index];
                end;
                stack_push(env.Stack[env.Settings.StackPointer], ArrEax);
                stack_push(env.Stack[env.Settings.StackPointer], ArrEbx);
            end else Found := False;
        end;
        'Array.filter' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TVEC) then
            begin
                //if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TEXP, i)) then Exit;
                if (env.Settings.StrictType) and (assertEitherLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TEXP, TFUN, i)) then Exit;
                EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                //if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, 0));
                ArrEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
                env.Variables.addLayer();
                if (EntEax.EntityType = TFUN) then
                begin
                    for index := 0 to Length(env.Stack[ArrEax.Num2].Values)-1 do
                    begin
                        stack_push(env.Stack[env.Settings.StackPointer], env.Stack[ArrEax.Num2].Values[index]);
                        //doFunctionOld(EntEax, env.Stack, env.Settings, env.Variables);
                        env.doFunction(EntEax.Num2);
                        if (stack_pop(env.Stack[env.Settings.StackPointer]).Num = 0) then
                            stack_push(env.Stack[ArrEbx.Num2], env.Stack[ArrEax.Num2].Values[index]);
    		        end;
                end else begin
                    for index := 0 to Length(env.Stack[ArrEax.Num2].Values)-1 do
                    begin
                        stack_push(env.Stack[env.Settings.StackPointer], env.Stack[ArrEax.Num2].Values[index]);
                        //doFunctionOld(EntEax, env.Stack, env.Settings, env.Variables);
                        env.doFunction(EntEax.Num2);
                        if (stack_pop(env.Stack[env.Settings.StackPointer]).Num <> 0) then
                            stack_push(env.Stack[ArrEbx.Num2], env.Stack[ArrEax.Num2].Values[index]);
    		        end;
                end;
                env.Variables.removeLayer();
                stack_push(env.Stack[env.Settings.StackPointer], ArrEbx);
            end else Found := False;
        end;
        'Array.cut' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TVEC) then
            begin
                //if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TEXP, i)) then Exit;
                if (env.Settings.StrictType) and (assertEitherLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TEXP, TFUN, i)) then Exit;
                EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                //if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, 0));
                ArrEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
                env.Variables.addLayer();
                if (EntEax.EntityType = TFUN) then
                begin
                    for index := 0 to Length(env.Stack[ArrEax.Num2].Values)-1 do
                    begin
                        stack_push(env.Stack[env.Settings.StackPointer], env.Stack[ArrEax.Num2].Values[index]);
                        //doFunctionOld(EntEax, env.Stack, env.Settings, env.Variables);
                        env.doFunction(EntEax.Num2);
                        if (stack_pop(env.Stack[env.Settings.StackPointer]).Num <> 0) then
                            stack_push(env.Stack[ArrEbx.Num2], env.Stack[ArrEax.Num2].Values[index]);
    		        end;
                end else begin
                    for index := 0 to Length(env.Stack[ArrEax.Num2].Values)-1 do
                    begin
                        stack_push(env.Stack[env.Settings.StackPointer], env.Stack[ArrEax.Num2].Values[index]);
                        //doFunctionOld(EntEax, env.Stack, env.Settings, env.Variables);
                        env.doFunction(EntEax.Num2);
                        if (stack_pop(env.Stack[env.Settings.StackPointer]).Num <> 0) then
                            stack_push(env.Stack[ArrEbx.Num2], env.Stack[ArrEax.Num2].Values[index]);
    		        end;
                end;
                env.Variables.removeLayer();
                stack_push(env.Stack[env.Settings.StackPointer], ArrEbx);
            end else Found := False;
        end;
        'Array.splitByExpression' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TVEC) then
            begin
                if (env.Settings.StrictType) and (assertEitherLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TEXP, TFUN, i)) then Exit;
                EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, 0));
                ArrEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
                stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, 0));
                ArrEcx := stack_pop(env.Stack[env.Settings.StackPointer]);
                env.Variables.addLayer();
                if (EntEax.EntityType = TFUN) then
                begin
                    for index := 0 to Length(env.Stack[ArrEax.Num2].Values)-1 do
                    begin
                        stack_push(env.Stack[env.Settings.StackPointer], env.Stack[ArrEax.Num2].Values[index]);
                        env.doFunction(EntEax.Num2);
                        if (stack_pop(env.Stack[env.Settings.StackPointer]).Num = 0) 
                            then stack_push(env.Stack[ArrEbx.Num2], env.Stack[ArrEax.Num2].Values[index])
                            else stack_push(env.Stack[ArrEcx.Num2], env.Stack[ArrEax.Num2].Values[index]);
    		        end;
                end else begin
                    for index := 0 to Length(env.Stack[ArrEax.Num2].Values)-1 do
                    begin
                        stack_push(env.Stack[env.Settings.StackPointer], env.Stack[ArrEax.Num2].Values[index]);
                        env.doFunction(EntEax.Num2);
                        if (stack_pop(env.Stack[env.Settings.StackPointer]).Num = 0) 
                            then stack_push(env.Stack[ArrEbx.Num2], env.Stack[ArrEax.Num2].Values[index])
                            else stack_push(env.Stack[ArrEcx.Num2], env.Stack[ArrEax.Num2].Values[index]);
    		        end;
                end;
                env.Variables.removeLayer();
                stack_push(env.Stack[env.Settings.StackPointer], ArrEbx);
                stack_push(env.Stack[env.Settings.StackPointer], ArrEcx);
            end else Found := False;
        end;
        'Array.unweave' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, 0));
            ArrEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
            stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, 0));
            ArrEcx := stack_pop(env.Stack[env.Settings.StackPointer]);
            env.Variables.addLayer();
            for index := 0 to Length(env.Stack[ArrEax.Num2].Values)-1 do
            begin
                if (index mod 2 = 0) 
                    then stack_push(env.Stack[ArrEbx.Num2], env.Stack[ArrEax.Num2].Values[index])
                    else stack_push(env.Stack[ArrEcx.Num2], env.Stack[ArrEax.Num2].Values[index]);
    		end;
            env.Variables.removeLayer();
            stack_push(env.Stack[env.Settings.StackPointer], ArrEbx);
            stack_push(env.Stack[env.Settings.StackPointer], ArrEcx);
        end;
        'Array.weave' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            IntEax := Length(env.Stack[ArrEax.Num2].Values);
            IntEbx := Length(env.Stack[ArrEbx.Num2].Values);
            stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, IntEax + IntEbx));
            ArrEcx := stack_pop(env.Stack[env.Settings.StackPointer]);
            IntEcx := 0;
            if (IntEax <= IntEbx) then
            begin
                for index := 0 to IntEax-1 do
                begin
                    env.Stack[ArrEcx.Num2].Values[IntEcx] := env.Stack[ArrEax.Num2].Values[index];
                    env.Stack[ArrEcx.Num2].Values[IntEcx+1] := env.Stack[ArrEbx.Num2].Values[index];
                    Inc(IntEcx, 2);
                end;
                for index := IntEax to IntEbx-1 do
                begin
                    env.Stack[ArrEcx.Num2].Values[IntEcx] := env.Stack[ArrEbx.Num2].Values[index];
                    Inc(IntEcx, 1);
                end;
            end else begin
                for index := 0 to IntEbx-1 do
                begin
                    env.Stack[ArrEcx.Num2].Values[IntEcx] := env.Stack[ArrEax.Num2].Values[index];
                    env.Stack[ArrEcx.Num2].Values[IntEcx+1] := env.Stack[ArrEbx.Num2].Values[index];
                    Inc(IntEcx, 2);
                end;
                for index := IntEbx to IntEax-1 do
                begin
                    env.Stack[ArrEcx.Num2].Values[IntEcx] := env.Stack[ArrEax.Num2].Values[index];
                    Inc(IntEcx, 1);
                end;
            end; 
            stack_push(env.Stack[env.Settings.StackPointer], ArrEcx);
        end;
        'Array.left' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TVEC) then
            begin
                if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
                IntEax := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
                //if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
                ArrEcx := stack_pop(env.Stack[env.Settings.StackPointer]);
                stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, IntEax));
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                for index := 0 to IntEax-1 do
                begin
                    env.Stack[ArrEax.Num2].Values[index] := env.Stack[ArrEcx.Num2].Values[index];
                end; 
                stack_push(env.Stack[env.Settings.StackPointer], ArrEax);
            end else Found := False;
        end;
        'Array.right' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TVEC) then
            begin
                if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
                IntEax := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
                //if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
                ArrEcx := stack_pop(env.Stack[env.Settings.StackPointer]);
                stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, IntEax));
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                for index := 0 to IntEax-1 do
                begin
                    env.Stack[ArrEax.Num2].Values[index] := env.Stack[ArrEcx.Num2].Values[Length(env.Stack[ArrEcx.Num2].Values)-IntEax+index];
                end; 
                stack_push(env.Stack[env.Settings.StackPointer], ArrEax);
            end else Found := False;
        end;
        'Array.cutLeft' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TVEC) then
            begin
                if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
                IntEax := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
                //if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
                ArrEcx := stack_pop(env.Stack[env.Settings.StackPointer]);
                stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, Length(env.Stack[ArrEcx.Num2].Values)-IntEax));
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                for index := 0 to Length(env.Stack[ArrEcx.Num2].Values)-IntEax-1 do
                begin
                    env.Stack[ArrEax.Num2].Values[index] := env.Stack[ArrEcx.Num2].Values[index+IntEax];
                end; 
                stack_push(env.Stack[env.Settings.StackPointer], ArrEax);
            end else Found := False;
        end;
        'Array.cutRight' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TVEC) then
            begin
                if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
                IntEax := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
                //if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
                ArrEcx := stack_pop(env.Stack[env.Settings.StackPointer]);
                stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, Length(env.Stack[ArrEcx.Num2].Values)-IntEax));
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                for index := 0 to Length(env.Stack[ArrEcx.Num2].Values)-IntEax-1 do
                begin
                    env.Stack[ArrEax.Num2].Values[index] := env.Stack[ArrEcx.Num2].Values[index];
                end; 
                stack_push(env.Stack[env.Settings.StackPointer], ArrEax);
            end else Found := False;
        end;
        'Array.between' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 3).EntityType = TVEC) then
            begin
                if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
                IntEbx := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
                if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
                IntEax := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
                //if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
                ArrEcx := stack_pop(env.Stack[env.Settings.StackPointer]);
                stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, IntEbx-IntEax+1));
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                for index := 0 to IntEbx-IntEax do
                begin
                    env.Stack[ArrEax.Num2].Values[index] := env.Stack[ArrEcx.Num2].Values[IntEax+index];
                end; 
                stack_push(env.Stack[env.Settings.StackPointer], ArrEax);
            end else Found := False;
        end;
        'Array.subarray' : begin
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            IntEbx := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            IntEax := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEcx := stack_pop(env.Stack[env.Settings.StackPointer]);
            stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, IntEbx));
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            for index := 0 to IntEbx-1 do
            begin
                env.Stack[ArrEax.Num2].Values[index] := env.Stack[ArrEcx.Num2].Values[IntEax+index];
            end; 
            stack_push(env.Stack[env.Settings.StackPointer], ArrEax);
        end;
        'Array.cutBothSides' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 3).EntityType = TVEC) then
            begin
                if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
                IntEbx := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
                if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
                IntEax := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
                if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
                ArrEcx := stack_pop(env.Stack[env.Settings.StackPointer]);
                stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, Length(env.Stack[ArrEcx.Num2].Values)-IntEax-IntEbx));
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                for index := 0 to Length(env.Stack[ArrEcx.Num2].Values)-IntEax-IntEbx-1 do
                begin
                    env.Stack[ArrEax.Num2].Values[index] := env.Stack[ArrEcx.Num2].Values[IntEax+index];
                end; 
                stack_push(env.Stack[env.Settings.StackPointer], ArrEax);
            end else Found := False;
        end;
        'Array.crushBy' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TVEC) then
            begin
          	    if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;  
                IntEcx := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
                if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                stack_reverse(env.Stack[ArrEax.Num2]);
                IntEax := 0;
                while (IntEax <= stack_size(env.Stack[ArrEax.Num2])-1) do
                begin
                    stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, 0));
                    ArrEcx := stack_pop(env.Stack[env.Settings.StackPointer]);
                    IntEbx := 0;
                    while (IntEbx < trunc(IntEcx)) and (IntEax <= stack_size(env.Stack[ArrEax.Num2])-1) do
                    begin
                        stack_push(env.Stack[ArrEcx.Num2], stack_getFront(env.Stack[ArrEax.Num2], IntEax));
                        IntEbx := IntEbx + 1;
                        IntEax := IntEax + 1;  
                    end;
                    stack_push(env.Stack[env.Settings.StackPointer], ArrEcx);
                end;
                stack_reverse(env.Stack[ArrEax.Num2]);

            end else Found := false;
        end;
        'Array.first' : begin
            if (stack_get(env.Stack[env.Settings.StackPointer]).EntityType = TVEC) then
            begin
                //if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                stack_push(env.Stack[env.Settings.StackPointer], env.Stack[ArrEax.Num2].Values[0]);
            end else Found := false;
        end;
        'Array.last' : begin
            if (stack_get(env.Stack[env.Settings.StackPointer]).EntityType = TVEC) then
            begin
                //if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                stack_push(env.Stack[env.Settings.StackPointer], env.Stack[ArrEax.Num2].Values[Length(env.Stack[ArrEax.Num2].Values)-1]);
            end else Found := false;
        end;
        // crush, pushAt, popAt, swapAt, toString, size

         // logics
        'Array.isEmpty' : begin
            if (stack_get(env.Stack[env.Settings.StackPointer]).EntityType = TVEC) then
            begin
                //if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                stack_push(env.Stack[env.Settings.StackPointer], buildBoolean(stack_size(env.Stack[ArrEax.Num2]) = 0));
            end else Found := False;
        end;

        // 052 functions
        'Array.cutNulls' : begin
            if (stack_get(env.Stack[env.Settings.StackPointer]).EntityType = TVEC) then
            begin
                //if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, 0));
                ArrEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
                for index := 0 to Length(env.Stack[ArrEax.Num2].Values)-1 do
                begin
                    if not (isNull(env.Stack[ArrEax.Num2].Values[index])) then
                        stack_push(env.Stack[ArrEbx.Num2], env.Stack[ArrEax.Num2].Values[index]);
    		    end;
                stack_push(env.Stack[env.Settings.StackPointer], ArrEbx);
            end else Found := False;
        end;
         'Array.cutZeros' : begin
            if (stack_get(env.Stack[env.Settings.StackPointer]).EntityType = TVEC) then
            begin
                //if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, 0));
                ArrEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
                for index := 0 to Length(env.Stack[ArrEax.Num2].Values)-1 do
                begin
                    if not (isZero(env.Stack[ArrEax.Num2].Values[index])) then
                        stack_push(env.Stack[ArrEbx.Num2], env.Stack[ArrEax.Num2].Values[index]);
    		    end;
                stack_push(env.Stack[env.Settings.StackPointer], ArrEbx);
            end else Found := False;
        end;
        'Array.cutEmptyStrings' : begin
            if (stack_get(env.Stack[env.Settings.StackPointer]).EntityType = TVEC) then
            begin
                //if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, 0));
                ArrEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
                for index := 0 to Length(env.Stack[ArrEax.Num2].Values)-1 do
                begin
                    if not (isEmptyString(env.Stack[ArrEax.Num2].Values[index])) then
                        stack_push(env.Stack[ArrEbx.Num2], env.Stack[ArrEax.Num2].Values[index]);
    		    end;
                stack_push(env.Stack[env.Settings.StackPointer], ArrEbx);
            end else Found := False;
        end;
        'Array.randomFrom' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            stack_push(env.Stack[env.Settings.StackPointer], array_randomFrom(env.Stack[ArrEax.Num2].Values));
        end;
        'Array.distinct' : begin
            if (stack_get(env.Stack[env.Settings.StackPointer]).EntityType = TVEC) then
            begin
                //if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, 0));
                ArrEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
                env.Stack[ArrEbx.Num2].Values := table_distinct(env.Stack[ArrEax.Num2].Values);
                stack_push(env.Stack[env.Settings.StackPointer], ArrEbx);
            end else Found := False;
        end;
        'Array.distinctNumbers' : begin
            if (stack_get(env.Stack[env.Settings.StackPointer]).EntityType = TVEC) then
            begin
                //if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, 0));
                ArrEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
                env.Stack[ArrEbx.Num2].Values := table_distinctNumbers(env.Stack[ArrEax.Num2].Values);
                stack_push(env.Stack[env.Settings.StackPointer], ArrEbx);
            end else Found := False;
        end;
        'Array.distinctStrings' : begin
            if (stack_get(env.Stack[env.Settings.StackPointer]).EntityType = TVEC) then
            begin
                //if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, 0));
                ArrEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
                env.Stack[ArrEbx.Num2].Values := table_distinctStrings(env.Stack[ArrEax.Num2].Values);
                stack_push(env.Stack[env.Settings.StackPointer], ArrEbx);
            end else Found := False;
        end;
        'Array.sort' : begin
            if (stack_get(env.Stack[env.Settings.StackPointer]).EntityType = TVEC) then
            begin
                if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                if (env.Stack[ArrEax.Num2].Values[index].EntityType = TSTR) then
                begin
                    strings_sort(env.Stack[ArrEax.Num2].Values);
                end else begin
                    case env.Settings.sorttype of
                        0 : bubblesort(env.Stack[ArrEax.Num2].Values);
                        1 : quicksort(env.Stack[ArrEax.Num2].Values);
                        2 : mergesort(env.Stack[ArrEax.Num2].Values);
                        3 : bogosort(env.Stack[ArrEax.Num2].Values);
                    end; 
                end;
                stack_push(env.Stack[env.Settings.StackPointer], ArrEax);
            end else Found := False;
        end;
        'Array.pad' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TVEC) then
            begin
                if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
                IntEax := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, 0));
                ArrEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
                for index := 0 to Length(env.Stack[ArrEax.Num2].Values)-1 do
                begin
                    stack_push(env.Stack[ArrEbx.Num2], env.Stack[ArrEax.Num2].Values[index]);
    		    end;
                if IntEax < Length(env.Stack[ArrEax.Num2].Values) then begin
                    stack_push(env.Stack[env.Settings.StackPointer], ArrEbx);
                end else begin
                    IntEbx := 0;
                    while IntEbx < (IntEax - Length(env.Stack[ArrEax.Num2].Values)) do
                    begin
                        if (IntEbx mod 2 = 0) 
                            then stack_pushFront(env.Stack[ArrEbx.Num2], buildNull())
                            else stack_push(env.Stack[ArrEbx.Num2], buildNull());
                        IntEbx := IntEbx + 1;
                    end;
                    stack_push(env.Stack[env.Settings.StackPointer], ArrEbx);
                end;
            end else Found := False;
        end;
        'Array.padLeft' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TVEC) then
            begin
                if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
                IntEax := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, 0));
                ArrEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
                for index := 0 to Length(env.Stack[ArrEax.Num2].Values)-1 do
                begin
                    stack_push(env.Stack[ArrEbx.Num2], env.Stack[ArrEax.Num2].Values[index]);
    		    end;
                if IntEax < Length(env.Stack[ArrEax.Num2].Values) then begin
                    stack_push(env.Stack[env.Settings.StackPointer], ArrEbx);
                end else begin
                    IntEbx := 0;
                    while IntEbx < (IntEax - Length(env.Stack[ArrEax.Num2].Values)) do
                    begin
                        stack_pushFront(env.Stack[ArrEbx.Num2], buildNull());
                        IntEbx := IntEbx + 1;
                    end;
                    stack_push(env.Stack[env.Settings.StackPointer], ArrEbx);
                end;
            end else Found := False;
        end;
        'Array.padRight' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TVEC) then
            begin
                if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
                IntEax := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, 0));
                ArrEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
                for index := 0 to Length(env.Stack[ArrEax.Num2].Values)-1 do
                begin
                    stack_push(env.Stack[ArrEbx.Num2], env.Stack[ArrEax.Num2].Values[index]);
    		    end;
                if IntEax < Length(env.Stack[ArrEax.Num2].Values) then begin
                    stack_push(env.Stack[env.Settings.StackPointer], ArrEbx);
                end else begin
                    IntEbx := 0;
                    while IntEbx < (IntEax - Length(env.Stack[ArrEax.Num2].Values)) do
                    begin
                        stack_push(env.Stack[ArrEbx.Num2], buildNull());
                        IntEbx := IntEbx + 1;
                    end;
                    stack_push(env.Stack[env.Settings.StackPointer], ArrEbx);
                end;
            end else Found := False;
        end;
        'Array.padSpaces' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TVEC) then
            begin
                if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
                IntEax := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, 0));
                ArrEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
                for index := 0 to Length(env.Stack[ArrEax.Num2].Values)-1 do
                begin
                    stack_push(env.Stack[ArrEbx.Num2], env.Stack[ArrEax.Num2].Values[index]);
    		    end;
                if IntEax < Length(env.Stack[ArrEax.Num2].Values) then begin
                    stack_push(env.Stack[env.Settings.StackPointer], ArrEbx);
                end else begin
                    IntEbx := 0;
                    while IntEbx < (IntEax - Length(env.Stack[ArrEax.Num2].Values)) do
                    begin
                        if (IntEbx mod 2 = 0) 
                            then stack_pushFront(env.Stack[ArrEbx.Num2], buildString(' '))
                            else stack_push(env.Stack[ArrEbx.Num2], buildString(' '));
                        IntEbx := IntEbx + 1;
                    end;
                    stack_push(env.Stack[env.Settings.StackPointer], ArrEbx);
                end;
            end else Found := False;
        end;
        'Array.padSpacesLeft' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TVEC) then
            begin
                if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
                IntEax := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, 0));
                ArrEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
                for index := 0 to Length(env.Stack[ArrEax.Num2].Values)-1 do
                begin
                    stack_push(env.Stack[ArrEbx.Num2], env.Stack[ArrEax.Num2].Values[index]);
    		    end;
                if IntEax < Length(env.Stack[ArrEax.Num2].Values) then begin
                    stack_push(env.Stack[env.Settings.StackPointer], ArrEbx);
                end else begin
                    IntEbx := 0;
                    while IntEbx < (IntEax - Length(env.Stack[ArrEax.Num2].Values)) do
                    begin
                        stack_pushFront(env.Stack[ArrEbx.Num2], buildString(' '));
                        IntEbx := IntEbx + 1;
                    end;
                    stack_push(env.Stack[env.Settings.StackPointer], ArrEbx);
                end;
            end else Found := False;
        end;
        'Array.padSpacesRight' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TVEC) then
            begin
                if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
                IntEax := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, 0));
                ArrEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
                for index := 0 to Length(env.Stack[ArrEax.Num2].Values)-1 do
                begin
                    stack_push(env.Stack[ArrEbx.Num2], env.Stack[ArrEax.Num2].Values[index]);
    		    end;
                if IntEax < Length(env.Stack[ArrEax.Num2].Values) then begin
                    stack_push(env.Stack[env.Settings.StackPointer], ArrEbx);
                end else begin
                    IntEbx := 0;
                    while IntEbx < (IntEax - Length(env.Stack[ArrEax.Num2].Values)) do
                    begin
                        stack_push(env.Stack[ArrEbx.Num2], buildString(' '));
                        IntEbx := IntEbx + 1;
                    end;
                    stack_push(env.Stack[env.Settings.StackPointer], ArrEbx);
                end;
            end else Found := False;
        end;
        'Array.padZeros' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TVEC) then
            begin
                if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
                IntEax := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, 0));
                ArrEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
                for index := 0 to Length(env.Stack[ArrEax.Num2].Values)-1 do
                begin
                    stack_push(env.Stack[ArrEbx.Num2], env.Stack[ArrEax.Num2].Values[index]);
    		    end;
                if IntEax < Length(env.Stack[ArrEax.Num2].Values) then begin
                    stack_push(env.Stack[env.Settings.StackPointer], ArrEbx);
                end else begin
                    IntEbx := 0;
                    while IntEbx < (IntEax - Length(env.Stack[ArrEax.Num2].Values)) do
                    begin
                        if (IntEbx mod 2 = 0) 
                            then stack_pushFront(env.Stack[ArrEbx.Num2], buildNumber(0.0))
                            else stack_push(env.Stack[ArrEbx.Num2], buildNumber(0.0));
                        IntEbx := IntEbx + 1;
                    end;
                    stack_push(env.Stack[env.Settings.StackPointer], ArrEbx);
                end;
            end else Found := False;
        end;
        'Array.padZerosLeft' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TVEC) then
            begin
                if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
                IntEax := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, 0));
                ArrEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
                for index := 0 to Length(env.Stack[ArrEax.Num2].Values)-1 do
                begin
                    stack_push(env.Stack[ArrEbx.Num2], env.Stack[ArrEax.Num2].Values[index]);
    		    end;
                if IntEax < Length(env.Stack[ArrEax.Num2].Values) then begin
                    stack_push(env.Stack[env.Settings.StackPointer], ArrEbx);
                end else begin
                    IntEbx := 0;
                    while IntEbx < (IntEax - Length(env.Stack[ArrEax.Num2].Values)) do
                    begin
                        stack_pushFront(env.Stack[ArrEbx.Num2], buildNumber(0.0));
                        IntEbx := IntEbx + 1;
                    end;
                    stack_push(env.Stack[env.Settings.StackPointer], ArrEbx);
                end;
            end else Found := False;
        end;
        'Array.padZerosRight' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TVEC) then
            begin
                if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
                IntEax := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, 0));
                ArrEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
                for index := 0 to Length(env.Stack[ArrEax.Num2].Values)-1 do
                begin
                    stack_push(env.Stack[ArrEbx.Num2], env.Stack[ArrEax.Num2].Values[index]);
    		    end;
                if IntEax < Length(env.Stack[ArrEax.Num2].Values) then begin
                    stack_push(env.Stack[env.Settings.StackPointer], ArrEbx);
                end else begin
                    IntEbx := 0;
                    while IntEbx < (IntEax - Length(env.Stack[ArrEax.Num2].Values)) do
                    begin
                        stack_push(env.Stack[ArrEbx.Num2], buildNumber(0.0));
                        IntEbx := IntEbx + 1;
                    end;
                    stack_push(env.Stack[env.Settings.StackPointer], ArrEbx);
                end;
            end else Found := False;
        end;
        'Array.padNulls' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TVEC) then
            begin
                if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
                IntEax := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, 0));
                ArrEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
                for index := 0 to Length(env.Stack[ArrEax.Num2].Values)-1 do
                begin
                    stack_push(env.Stack[ArrEbx.Num2], env.Stack[ArrEax.Num2].Values[index]);
    		    end;
                if IntEax < Length(env.Stack[ArrEax.Num2].Values) then begin
                    stack_push(env.Stack[env.Settings.StackPointer], ArrEbx);
                end else begin
                    IntEbx := 0;
                    while IntEbx < (IntEax - Length(env.Stack[ArrEax.Num2].Values)) do
                    begin
                        if (IntEbx mod 2 = 0) 
                            then stack_pushFront(env.Stack[ArrEbx.Num2], buildNull())
                            else stack_push(env.Stack[ArrEbx.Num2], buildNull());
                        IntEbx := IntEbx + 1;
                    end;
                    stack_push(env.Stack[env.Settings.StackPointer], ArrEbx);
                end;
            end else Found := False;
        end;
        'Array.padNullsLeft' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TVEC) then
            begin
                if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
                IntEax := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, 0));
                ArrEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
                for index := 0 to Length(env.Stack[ArrEax.Num2].Values)-1 do
                begin
                    stack_push(env.Stack[ArrEbx.Num2], env.Stack[ArrEax.Num2].Values[index]);
    		    end;
                if IntEax < Length(env.Stack[ArrEax.Num2].Values) then begin
                    stack_push(env.Stack[env.Settings.StackPointer], ArrEbx);
                end else begin
                    IntEbx := 0;
                    while IntEbx < (IntEax - Length(env.Stack[ArrEax.Num2].Values)) do
                    begin
                        stack_pushFront(env.Stack[ArrEbx.Num2], buildNull());
                        IntEbx := IntEbx + 1;
                    end;
                    stack_push(env.Stack[env.Settings.StackPointer], ArrEbx);
                end;
            end else Found := False;
        end;
        'Array.padNullsRight' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TVEC) then
            begin
                if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
                IntEax := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, 0));
                ArrEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
                for index := 0 to Length(env.Stack[ArrEax.Num2].Values)-1 do
                begin
                    stack_push(env.Stack[ArrEbx.Num2], env.Stack[ArrEax.Num2].Values[index]);
    		    end;
                if IntEax < Length(env.Stack[ArrEax.Num2].Values) then begin
                    stack_push(env.Stack[env.Settings.StackPointer], ArrEbx);
                end else begin
                    IntEbx := 0;
                    while IntEbx < (IntEax - Length(env.Stack[ArrEax.Num2].Values)) do
                    begin
                        stack_push(env.Stack[ArrEbx.Num2], buildNull());
                        IntEbx := IntEbx + 1;
                    end;
                    stack_push(env.Stack[env.Settings.StackPointer], ArrEbx);
                end;
            end else Found := False;
        end;
        'Array.padEmptyStrings' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TVEC) then
            begin
                if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
                IntEax := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, 0));
                ArrEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
                for index := 0 to Length(env.Stack[ArrEax.Num2].Values)-1 do
                begin
                    stack_push(env.Stack[ArrEbx.Num2], env.Stack[ArrEax.Num2].Values[index]);
    		    end;
                if IntEax < Length(env.Stack[ArrEax.Num2].Values) then begin
                    stack_push(env.Stack[env.Settings.StackPointer], ArrEbx);
                end else begin
                    IntEbx := 0;
                    while IntEbx < (IntEax - Length(env.Stack[ArrEax.Num2].Values)) do
                    begin
                        if (IntEbx mod 2 = 0) 
                            then stack_pushFront(env.Stack[ArrEbx.Num2], buildString(''))
                            else stack_push(env.Stack[ArrEbx.Num2], buildString(''));
                        IntEbx := IntEbx + 1;
                    end;
                    stack_push(env.Stack[env.Settings.StackPointer], ArrEbx);
                end;
            end else Found := False;
        end;
        'Array.padEmptyStringsLeft' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TVEC) then
            begin
                if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
                IntEax := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, 0));
                ArrEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
                for index := 0 to Length(env.Stack[ArrEax.Num2].Values)-1 do
                begin
                    stack_push(env.Stack[ArrEbx.Num2], env.Stack[ArrEax.Num2].Values[index]);
    		    end;
                if IntEax < Length(env.Stack[ArrEax.Num2].Values) then begin
                    stack_push(env.Stack[env.Settings.StackPointer], ArrEbx);
                end else begin
                    IntEbx := 0;
                    while IntEbx < (IntEax - Length(env.Stack[ArrEax.Num2].Values)) do
                    begin
                        stack_pushFront(env.Stack[ArrEbx.Num2], buildString(''));
                        IntEbx := IntEbx + 1;
                    end;
                    stack_push(env.Stack[env.Settings.StackPointer], ArrEbx);
                end;
            end else Found := False;
        end;
        'Array.padEmptyStringsRight' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TVEC) then
            begin
                if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
                IntEax := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, 0));
                ArrEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
                for index := 0 to Length(env.Stack[ArrEax.Num2].Values)-1 do
                begin
                    stack_push(env.Stack[ArrEbx.Num2], env.Stack[ArrEax.Num2].Values[index]);
    		    end;
                if IntEax < Length(env.Stack[ArrEax.Num2].Values) then begin
                    stack_push(env.Stack[env.Settings.StackPointer], ArrEbx);
                end else begin
                    IntEbx := 0;
                    while IntEbx < (IntEax - Length(env.Stack[ArrEax.Num2].Values)) do
                    begin
                        stack_push(env.Stack[ArrEbx.Num2], buildString(''));
                        IntEbx := IntEbx + 1;
                    end;
                    stack_push(env.Stack[env.Settings.StackPointer], ArrEbx);
                end;
            end else Found := False;
        end;
        'Array.padEntities' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 3).EntityType = TVEC) then
            begin
                EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
                IntEax := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, 0));
                ArrEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
                for index := 0 to Length(env.Stack[ArrEax.Num2].Values)-1 do
                begin
                    stack_push(env.Stack[ArrEbx.Num2], env.Stack[ArrEax.Num2].Values[index]);
    		    end;
                if IntEax < Length(env.Stack[ArrEax.Num2].Values) then begin
                    stack_push(env.Stack[env.Settings.StackPointer], ArrEbx);
                end else begin
                    IntEbx := 0;
                    while IntEbx < (IntEax - Length(env.Stack[ArrEax.Num2].Values)) do
                    begin
                        if (IntEbx mod 2 = 0) 
                            then stack_pushFront(env.Stack[ArrEbx.Num2], EntEax)
                            else stack_push(env.Stack[ArrEbx.Num2], EntEax);
                        IntEbx := IntEbx + 1;
                    end;
                    stack_push(env.Stack[env.Settings.StackPointer], ArrEbx);
                end;
            end else Found := False;
        end;
        'Array.padEntitiesLeft' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 3).EntityType = TVEC) then
            begin
                EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
                IntEax := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, 0));
                ArrEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
                for index := 0 to Length(env.Stack[ArrEax.Num2].Values)-1 do
                begin
                    stack_push(env.Stack[ArrEbx.Num2], env.Stack[ArrEax.Num2].Values[index]);
    		    end;
                if IntEax < Length(env.Stack[ArrEax.Num2].Values) then begin
                    stack_push(env.Stack[env.Settings.StackPointer], ArrEbx);
                end else begin
                    IntEbx := 0;
                    while IntEbx < (IntEax - Length(env.Stack[ArrEax.Num2].Values)) do
                    begin
                        stack_pushFront(env.Stack[ArrEbx.Num2], EntEax);
                        IntEbx := IntEbx + 1;
                    end;
                    stack_push(env.Stack[env.Settings.StackPointer], ArrEbx);
                end;
            end else Found := False;
        end;
        'Array.padEntitiesRight' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 3).EntityType = TVEC) then
            begin
                EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
                IntEax := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, 0));
                ArrEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
                for index := 0 to Length(env.Stack[ArrEax.Num2].Values)-1 do
                begin
                    stack_push(env.Stack[ArrEbx.Num2], env.Stack[ArrEax.Num2].Values[index]);
    		    end;
                if IntEax < Length(env.Stack[ArrEax.Num2].Values) then begin
                    stack_push(env.Stack[env.Settings.StackPointer], ArrEbx);
                end else begin
                    IntEbx := 0;
                    while IntEbx < (IntEax - Length(env.Stack[ArrEax.Num2].Values)) do
                    begin
                        stack_push(env.Stack[ArrEbx.Num2], EntEax);
                        IntEbx := IntEbx + 1;
                    end;
                    stack_push(env.Stack[env.Settings.StackPointer], ArrEbx);
                end;
            end else Found := False;
        end;
        'Array.trim' : begin
            if (stack_get(env.Stack[env.Settings.StackPointer]).EntityType = TVEC) then
            begin
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, 0));
                ArrEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
                for index := 0 to Length(env.Stack[ArrEax.Num2].Values)-1 do
                begin
                    stack_push(env.Stack[ArrEbx.Num2], env.Stack[ArrEax.Num2].Values[index]);
    		    end;
                index := 0;
                while isNull(stack_get(env.Stack[ArrEbx.Num2])) do stack_pop(env.Stack[ArrEbx.Num2]);
                while isNull(stack_getFront(env.Stack[ArrEbx.Num2])) do stack_popFront(env.Stack[ArrEbx.Num2]);
                stack_push(env.Stack[env.Settings.StackPointer], ArrEbx);
            end else Found := False;
        end;
        'Array.trimLeft' : begin
            if (stack_get(env.Stack[env.Settings.StackPointer]).EntityType = TVEC) then
            begin
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, 0));
                ArrEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
                for index := 0 to Length(env.Stack[ArrEax.Num2].Values)-1 do
                begin
                    stack_push(env.Stack[ArrEbx.Num2], env.Stack[ArrEax.Num2].Values[index]);
    		    end;
                index := 0;
                //while isNull(stack_get(env.Stack[ArrEbx.Num2])) do stack_pop(env.Stack[ArrEbx.Num2]);
                while isNull(stack_getFront(env.Stack[ArrEbx.Num2])) do stack_popFront(env.Stack[ArrEbx.Num2]);
                stack_push(env.Stack[env.Settings.StackPointer], ArrEbx);
            end else Found := False;
        end;
        'Array.trimRight' : begin
            if (stack_get(env.Stack[env.Settings.StackPointer]).EntityType = TVEC) then
            begin
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, 0));
                ArrEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
                for index := 0 to Length(env.Stack[ArrEax.Num2].Values)-1 do
                begin
                    stack_push(env.Stack[ArrEbx.Num2], env.Stack[ArrEax.Num2].Values[index]);
    		    end;
                index := 0;
                while isNull(stack_get(env.Stack[ArrEbx.Num2])) do stack_pop(env.Stack[ArrEbx.Num2]);
                //while isNull(stack_getFront(env.Stack[ArrEbx.Num2])) do stack_popFront(env.Stack[ArrEbx.Num2]);
                stack_push(env.Stack[env.Settings.StackPointer], ArrEbx);
            end else Found := False;
        end;
        'Array.trimNulls' : begin
            if (stack_get(env.Stack[env.Settings.StackPointer]).EntityType = TVEC) then
            begin
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, 0));
                ArrEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
                for index := 0 to Length(env.Stack[ArrEax.Num2].Values)-1 do
                begin
                    stack_push(env.Stack[ArrEbx.Num2], env.Stack[ArrEax.Num2].Values[index]);
    		    end;
                index := 0;
                while isNull(stack_get(env.Stack[ArrEbx.Num2])) do stack_pop(env.Stack[ArrEbx.Num2]);
                while isNull(stack_getFront(env.Stack[ArrEbx.Num2])) do stack_popFront(env.Stack[ArrEbx.Num2]);
                stack_push(env.Stack[env.Settings.StackPointer], ArrEbx);
            end else Found := False;
        end;
        'Array.trimNullsLeft' : begin
            if (stack_get(env.Stack[env.Settings.StackPointer]).EntityType = TVEC) then
            begin
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, 0));
                ArrEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
                for index := 0 to Length(env.Stack[ArrEax.Num2].Values)-1 do
                begin
                    stack_push(env.Stack[ArrEbx.Num2], env.Stack[ArrEax.Num2].Values[index]);
    		    end;
                index := 0;
                //while isNull(stack_get(env.Stack[ArrEbx.Num2])) do stack_pop(env.Stack[ArrEbx.Num2]);
                while isNull(stack_getFront(env.Stack[ArrEbx.Num2])) do stack_popFront(env.Stack[ArrEbx.Num2]);
                stack_push(env.Stack[env.Settings.StackPointer], ArrEbx);
            end else Found := False;
        end;
        'Array.trimNullsRight' : begin
            if (stack_get(env.Stack[env.Settings.StackPointer]).EntityType = TVEC) then
            begin
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, 0));
                ArrEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
                for index := 0 to Length(env.Stack[ArrEax.Num2].Values)-1 do
                begin
                    stack_push(env.Stack[ArrEbx.Num2], env.Stack[ArrEax.Num2].Values[index]);
    		    end;
                index := 0;
                while isNull(stack_get(env.Stack[ArrEbx.Num2])) do stack_pop(env.Stack[ArrEbx.Num2]);
                //while isNull(stack_getFront(env.Stack[ArrEbx.Num2])) do stack_popFront(env.Stack[ArrEbx.Num2]);
                stack_push(env.Stack[env.Settings.StackPointer], ArrEbx);
            end else Found := False;
        end;
        'Array.trimEntities' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TVEC) then
            begin
                EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, 0));
                ArrEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
                for index := 0 to Length(env.Stack[ArrEax.Num2].Values)-1 do
                begin
                    stack_push(env.Stack[ArrEbx.Num2], env.Stack[ArrEax.Num2].Values[index]);
    		    end;
                index := 0;
                while EntEax = stack_get(env.Stack[ArrEbx.Num2]) do stack_pop(env.Stack[ArrEbx.Num2]);
                while EntEax = stack_getFront(env.Stack[ArrEbx.Num2]) do stack_popFront(env.Stack[ArrEbx.Num2]);
                stack_push(env.Stack[env.Settings.StackPointer], ArrEbx);
            end else Found := False;
        end;
        'Array.trimEntitiesLeft' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TVEC) then
            begin
                EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, 0));
                ArrEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
                for index := 0 to Length(env.Stack[ArrEax.Num2].Values)-1 do
                begin
                    stack_push(env.Stack[ArrEbx.Num2], env.Stack[ArrEax.Num2].Values[index]);
    		    end;
                index := 0;
                //while EntEax = stack_get(env.Stack[ArrEbx.Num2])) do stack_pop(env.Stack[ArrEbx.Num2]);
                while EntEax = stack_getFront(env.Stack[ArrEbx.Num2]) do stack_popFront(env.Stack[ArrEbx.Num2]);
                stack_push(env.Stack[env.Settings.StackPointer], ArrEbx);
            end else Found := False;
        end;
        'Array.trimEntitiesRight' : begin
            if (stack_getback(env.Stack[env.Settings.StackPointer], 2).EntityType = TVEC) then
            begin
                EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
                stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, 0));
                ArrEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
                for index := 0 to Length(env.Stack[ArrEax.Num2].Values)-1 do
                begin
                    stack_push(env.Stack[ArrEbx.Num2], env.Stack[ArrEax.Num2].Values[index]);
    		    end;
                index := 0;
                while EntEax = stack_get(env.Stack[ArrEbx.Num2]) do stack_pop(env.Stack[ArrEbx.Num2]);
                //while EntEax = stack_getFront(env.Stack[ArrEbx.Num2])) do stack_popFront(env.Stack[ArrEbx.Num2]);
                stack_push(env.Stack[env.Settings.StackPointer], ArrEbx);
            end else Found := False;
        end;
        // polynomials
        // todo: move it to separate unit
        // poly val, degree, add, subtract, times, divide, mod, roots, realroots, power, factor
        'Array.polyval' : begin
            if (env.Settings.StrictType) and (assertComplexLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            // make assert for array of numbers
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEcx := stack_pop(env.Stack[env.Settings.StackPointer]);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(polynomial_value(env.Stack[ArrEcx.Num2].Values, EntEax.Num)));
        end;
        'Array.polydeg' : begin
            // make assert for array of numbers
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEcx := stack_pop(env.Stack[env.Settings.StackPointer]);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(polynomial_degree(env.Stack[ArrEcx.Num2].Values)));
        end;
        'Array.polysum' : begin
            // make assert for array of numbers
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEcx := stack_pop(env.Stack[env.Settings.StackPointer]);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
            stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, 0));
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            env.Stack[ArrEax.Num2].Values := polynomial_sum(env.Stack[ArrEbx.Num2].Values, env.Stack[ArrEcx.Num2].Values);
            stack_push(env.Stack[env.Settings.StackPointer], ArrEax);
        end;
        'Array.polydiff' : begin
            // make assert for array of numbers
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEcx := stack_pop(env.Stack[env.Settings.StackPointer]);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
            stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, 0));
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            env.Stack[ArrEax.Num2].Values := polynomial_diff(env.Stack[ArrEbx.Num2].Values, env.Stack[ArrEcx.Num2].Values);
            stack_push(env.Stack[env.Settings.StackPointer], ArrEax);
        end;
        'Array.polymul' : begin
            // make assert for array of numbers
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEcx := stack_pop(env.Stack[env.Settings.StackPointer]);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
            stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, 0));
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            env.Stack[ArrEax.Num2].Values := polynomial_mul(env.Stack[ArrEbx.Num2].Values, env.Stack[ArrEcx.Num2].Values);
            stack_push(env.Stack[env.Settings.StackPointer], ArrEax);
        end;
        'Array.polydiv' : begin
            // make assert for array of numbers
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEcx := stack_pop(env.Stack[env.Settings.StackPointer]);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
            stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, 0));
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            env.Stack[ArrEax.Num2].Values := polynomial_div(env.Stack[ArrEbx.Num2].Values, env.Stack[ArrEcx.Num2].Values);
            stack_push(env.Stack[env.Settings.StackPointer], ArrEax);
        end;
        'Array.polymod' : begin
            // make assert for array of numbers
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEcx := stack_pop(env.Stack[env.Settings.StackPointer]);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
            stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, 0));
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            env.Stack[ArrEax.Num2].Values := polynomial_mod(env.Stack[ArrEbx.Num2].Values, env.Stack[ArrEcx.Num2].Values);
            stack_push(env.Stack[env.Settings.StackPointer], ArrEax);
        end;
        'Array.polyroots' : begin
            // make assert for array of numbers
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEcx := stack_pop(env.Stack[env.Settings.StackPointer]);
            //stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, 0));
            EntEax := buildNewEmptyArray(env.Stack, env.Settings, 0);
            stack_push(env.Stack[env.Settings.StackPointer], EntEax);
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            //env.Stack[ArrEax.Num2].Values := polynomial_roots(env.Stack[ArrEcx.Num2].Values);
            //env.Stack[ArrEax.Num2].Values := polynomial_roots(env.Stack[ArrEcx.Num2].Values, False, False);
            //stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, 0));
            EntEbx := buildNewEmptyArray(env.Stack, env.Settings, 0);
            stack_push(env.Stack[env.Settings.StackPointer], EntEbx);
            ArrEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
            for index := 0 to Length(env.Stack[ArrEcx.Num2].Values)-1 do
            begin
                stack_push(env.Stack[ArrEbx.Num2], env.Stack[ArrEcx.Num2].Values[index]);
    		end;
            polynomial_roots(env.Stack[ArrEbx.Num2].Values, env.Stack[ArrEax.Num2].Values, False, False);
            stack_clear(env.Stack[ArrEbx.Num2]);
            stack_push(env.Stack[env.Settings.StackPointer], ArrEax);
        end;
        'Array.polyrealroots' : begin
            // make assert for array of numbers
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEcx := stack_pop(env.Stack[env.Settings.StackPointer]);
            //stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, 0));
            EntEax := buildNewEmptyArray(env.Stack, env.Settings, 0);
            stack_push(env.Stack[env.Settings.StackPointer], EntEax);
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            //stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, 0));
            EntEbx := buildNewEmptyArray(env.Stack, env.Settings, 0);
            stack_push(env.Stack[env.Settings.StackPointer], EntEbx);
            ArrEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
            for index := 0 to Length(env.Stack[ArrEcx.Num2].Values)-1 do
            begin
                stack_push(env.Stack[ArrEbx.Num2], env.Stack[ArrEcx.Num2].Values[index]);
    		end;
            polynomial_roots(env.Stack[ArrEbx.Num2].Values, env.Stack[ArrEax.Num2].Values, False, True);
            stack_clear(env.Stack[ArrEbx.Num2]);
            stack_push(env.Stack[env.Settings.StackPointer], ArrEax);
        end;
        'Array.polyderivative' : begin
            // make assert for array of numbers
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TVEC, i)) then Exit; 
            ArrEcx := stack_pop(env.Stack[env.Settings.StackPointer]);
            stack_push(env.Stack[env.Settings.StackPointer], buildNewEmptyArray(env.Stack, env.Settings, 0));
            ArrEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            env.Stack[ArrEax.Num2].Values := polynomial_derivative(env.Stack[ArrEcx.Num2].Values);
            stack_push(env.Stack[env.Settings.StackPointer], ArrEax);
        end;
        else begin
            Found := false;
        end;
	end;
	Result := Found;
end;

function lib_files(i : String; var env : PSEnvironment; var db : PSCommandDB) : Boolean;
var
	Found  : Boolean;
    StrEax : String; 
begin
	Found := true;
	case i of
        'runFile' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit; 
            StrEax := stack_get(env.Stack[env.Settings.StackPointer]).Str;
            if (env.Settings.Autoclear) then stack_pop(env.Stack[env.Settings.StackPointer]);
        	read_sourcefile(StrEax, env, db);
        end;    
        else begin
            Found := false;
        end;
	end;
	lib_files := Found;
end;

function lib_datetime(i : String; var env : PSEnvironment; var db : PSCommandDB) : Boolean;
var
	Found                  : Boolean;
    StrEax                 : String; 
    IntEax                 : LongInt;
    ExtEax                 : Extended;
    EntEax, EntEbx, EntEcx : Entity;
    DatEax, DatEbx, DatEcx : TDateTime;
begin
	Found := true;
	case i of
        'Date.toDateTime' : begin
            if (stack_get(env.Stack[env.Settings.StackPointer]).EntityType = TNUM) then
            begin
                ExtEax := Real(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
                stack_push(env.Stack[env.Settings.StackPointer], buildDateTime(UnixTSToDateTime(ExtEax)));
            end else begin
                StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
                stack_push(env.Stack[env.Settings.StackPointer], buildDateTime(StringYMDToDateTime(StrEax)));
            end;
        end; 
        'Date.YMDtoDateTime' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;
            StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            stack_push(env.Stack[env.Settings.StackPointer], buildDateTime(StringYMDToDateTime(StrEax)));
        end; 
        'Date.MDYtoDateTime' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;
            StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            stack_push(env.Stack[env.Settings.StackPointer], buildDateTime(StringMDYToDateTime(StrEax)));
        end; 
        'Date.DMYtoDateTime' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;
            StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            stack_push(env.Stack[env.Settings.StackPointer], buildDateTime(StringDMYToDateTime(StrEax)));
        end; 
        'Date.toTimestamp' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit;
            //stack_push(env.Stack[env.Settings.StackPointer], buildNumber(DateTimeToUnix(stack_pop(env.Stack[env.Settings.StackPointer]).Num)));
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            DatEax := TSToDateTime(Int(EntEax.Num), EntEax.Num2);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(DateTimeToUnixTS(DatEax)));
        end; 
        'Date.now' : begin
            stack_push(env.Stack[env.Settings.StackPointer], buildDateTime(Now));
        end; 
        'Date.today' : begin
            stack_push(env.Stack[env.Settings.StackPointer], buildDateTime(Today));
        end; 
        'Date.yesterday' : begin
            stack_push(env.Stack[env.Settings.StackPointer], buildDateTime(Yesterday));
        end; 
        'Date.tomorrow' : begin
            stack_push(env.Stack[env.Settings.StackPointer], buildDateTime(Tomorrow));
        end; 
        'Date.unixEpoch' : begin
            stack_push(env.Stack[env.Settings.StackPointer], buildDateTime(UnixTSToDateTime(0)));
        end; 
        'Date.truncDate' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit;
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            DatEax := TSToDateTime(Int(EntEax.Num), EntEax.Num2);
            stack_push(env.Stack[env.Settings.StackPointer], buildDateTime(DateOf(DatEax)));
        end;
        'Date.truncTime' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit;
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            DatEax := TSToDateTime(Int(EntEax.Num), EntEax.Num2);
            stack_push(env.Stack[env.Settings.StackPointer], buildDateTime(TimeOf(DatEax)));
        end;
        'Date.getYear' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit; 
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            DatEax := TSToDateTime(Int(EntEax.Num), EntEax.Num2);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(YearOf(DatEax)));
        end;
        'Date.getMonth' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit;  
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            DatEax := TSToDateTime(Int(EntEax.Num), EntEax.Num2);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(MonthOf(DatEax)));
        end;
        'Date.getDay' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit; 
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            DatEax := TSToDateTime(Int(EntEax.Num), EntEax.Num2);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(DayOf(DatEax)));
        end;
        'Date.getHour' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit;
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            DatEax := TSToDateTime(Int(EntEax.Num), EntEax.Num2);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(HourOf(DatEax)));
        end;
        'Date.getHour24' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit;
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            DatEax := TSToDateTime(Int(EntEax.Num), EntEax.Num2);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(HourOf(DatEax)));
        end;
        'Date.getHour12' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit;
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            DatEax := TSToDateTime(Int(EntEax.Num), EntEax.Num2);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(((HourOf(DatEax))-1) mod 12 + 1));
        end;
        'Date.getMinute' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit;
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            DatEax := TSToDateTime(Int(EntEax.Num), EntEax.Num2);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(MinuteOf(DatEax)));
        end;
        'Date.getSecond' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit; 
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            DatEax := TSToDateTime(Int(EntEax.Num), EntEax.Num2);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(SecondOf(DatEax)));
        end;
        'Date.getMillisecond' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit; 
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            DatEax := TSToDateTime(Int(EntEax.Num), EntEax.Num2);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(MillisecondOf(DatEax)));
        end;
        'Date.getWeekDay' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit; 
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            DatEax := TSToDateTime(Int(EntEax.Num), EntEax.Num2);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(DayOfTheWeek(DatEax)));
        end;
        'Date.getYearDay' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit; 
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            DatEax := TSToDateTime(Int(EntEax.Num), EntEax.Num2);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(DayOfTheYear(DatEax)));
        end;
        'Date.isPM' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit; 
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            DatEax := TSToDateTime(Int(EntEax.Num), EntEax.Num2);
            stack_push(env.Stack[env.Settings.StackPointer], buildBoolean(IsPM(DatEax)));
        end;
        'Date.isLeapYear' : begin
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            IntEax := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            stack_push(env.Stack[env.Settings.StackPointer], buildBoolean(IsLeapYear(IntEax)));
        end;
        'Date.isInLeapYear' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit;
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            DatEax := TSToDateTime(Int(EntEax.Num), EntEax.Num2);
            stack_push(env.Stack[env.Settings.StackPointer], buildBoolean(IsInLeapYear(DatEax)));
        end;
        'Date.setYear' : begin
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;  
            IntEax := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit; 
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            DatEax := TSToDateTime(Int(EntEax.Num), EntEax.Num2);
            stack_push(env.Stack[env.Settings.StackPointer], buildDateTime(RecodeYear(DatEax, IntEax)));
        end;
        'Date.setMonth' : begin
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;  
            IntEax := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit;
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            DatEax := TSToDateTime(Int(EntEax.Num), EntEax.Num2);
            stack_push(env.Stack[env.Settings.StackPointer], buildDateTime(RecodeMonth(DatEax, IntEax)));
        end;
        'Date.setDay' : begin
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;  
            IntEax := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit;
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            DatEax := TSToDateTime(Int(EntEax.Num), EntEax.Num2);
            stack_push(env.Stack[env.Settings.StackPointer], buildDateTime(RecodeDay(DatEax, IntEax)));
        end;
        'Date.setHour' : begin
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;  
            IntEax := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit;
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            DatEax := TSToDateTime(Int(EntEax.Num), EntEax.Num2);
            stack_push(env.Stack[env.Settings.StackPointer], buildDateTime(RecodeHour(DatEax, IntEax)));
        end;
        'Date.setMinute' : begin
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;  
            IntEax := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit;
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            DatEax := TSToDateTime(Int(EntEax.Num), EntEax.Num2);
            stack_push(env.Stack[env.Settings.StackPointer], buildDateTime(RecodeMinute(DatEax, IntEax)));
        end;
        'Date.setSecond' : begin
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;  
            IntEax := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit;
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            DatEax := TSToDateTime(Int(EntEax.Num), EntEax.Num2);
            stack_push(env.Stack[env.Settings.StackPointer], buildDateTime(RecodeSecond(DatEax, IntEax)));
        end;
        'Date.setMillisecond' : begin
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;  
            IntEax := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit;
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            DatEax := TSToDateTime(Int(EntEax.Num), EntEax.Num2);
            stack_push(env.Stack[env.Settings.StackPointer], buildDateTime(RecodeMillisecond(DatEax, IntEax)));
        end;
        'Date.addYear' : begin
            if (env.Settings.StrictType) and (assertIntegerLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;  
            IntEax := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit; 
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            DatEax := TSToDateTime(Int(EntEax.Num), EntEax.Num2);
            stack_push(env.Stack[env.Settings.StackPointer], buildDateTime(IncYear(DatEax, IntEax)));
        end;
        'Date.addMonth' : begin
            if (env.Settings.StrictType) and (assertIntegerLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;  
            IntEax := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit;
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            DatEax := TSToDateTime(Int(EntEax.Num), EntEax.Num2);
            stack_push(env.Stack[env.Settings.StackPointer], buildDateTime(IncMonth(DatEax, IntEax)));
        end;
        'Date.addDay' : begin
            if (env.Settings.StrictType) and (assertIntegerLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;  
            IntEax := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit;
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            DatEax := TSToDateTime(Int(EntEax.Num), EntEax.Num2);
            stack_push(env.Stack[env.Settings.StackPointer], buildDateTime(IncDay(DatEax, IntEax)));
        end;
        'Date.addHour' : begin
            if (env.Settings.StrictType) and (assertIntegerLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;  
            IntEax := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit;
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            DatEax := TSToDateTime(Int(EntEax.Num), EntEax.Num2);
            stack_push(env.Stack[env.Settings.StackPointer], buildDateTime(IncHour(DatEax, IntEax)));
        end;
        'Date.addMinute' : begin
            if (env.Settings.StrictType) and (assertIntegerLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;  
            IntEax := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit;
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            DatEax := TSToDateTime(Int(EntEax.Num), EntEax.Num2);
            stack_push(env.Stack[env.Settings.StackPointer], buildDateTime(IncMinute(DatEax, IntEax)));
        end;
        'Date.addSecond' : begin
            if (env.Settings.StrictType) and (assertIntegerLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;  
            IntEax := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit;
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            DatEax := TSToDateTime(Int(EntEax.Num), EntEax.Num2);
            stack_push(env.Stack[env.Settings.StackPointer], buildDateTime(IncSecond(DatEax, IntEax)));
        end;
        'Date.addWeek' : begin
            if (env.Settings.StrictType) and (assertIntegerLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;  
            IntEax := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit;
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            DatEax := TSToDateTime(Int(EntEax.Num), EntEax.Num2);
            stack_push(env.Stack[env.Settings.StackPointer], buildDateTime(IncDay(DatEax, IntEax*7)));
        end;
        'Date.addMillisecond' : begin
            if (env.Settings.StrictType) and (assertIntegerLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;  
            IntEax := Int(stack_pop(env.Stack[env.Settings.StackPointer]).Num);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit;
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            DatEax := TSToDateTime(Int(EntEax.Num), EntEax.Num2);
            stack_push(env.Stack[env.Settings.StackPointer], buildDateTime(IncMillisecond(DatEax, IntEax)));
        end;
        'Date.diffYear' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit; 
            EntEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit; 
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            DatEax := TSToDateTime(Int(EntEax.Num), EntEax.Num2);
            DatEbx := TSToDateTime(Int(EntEbx.Num), EntEbx.Num2);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(YearsBetween(DatEax, DatEbx)));
        end;
        'Date.diffMonth' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit; 
            EntEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit; 
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            DatEax := TSToDateTime(Int(EntEax.Num), EntEax.Num2);
            DatEbx := TSToDateTime(Int(EntEbx.Num), EntEbx.Num2);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(MonthsBetween(DatEax, DatEbx)));
        end;
        'Date.diffDay' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit; 
            EntEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit; 
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            DatEax := TSToDateTime(Int(EntEax.Num), EntEax.Num2);
            DatEbx := TSToDateTime(Int(EntEbx.Num), EntEbx.Num2);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(DaysBetween(DatEax, DatEbx)));
        end;
        'Date.diffHour' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit; 
            EntEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit; 
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            DatEax := TSToDateTime(Int(EntEax.Num), EntEax.Num2);
            DatEbx := TSToDateTime(Int(EntEbx.Num), EntEbx.Num2);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(HoursBetween(DatEax, DatEbx)));
        end;
        'Date.diffMinute' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit; 
            EntEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit; 
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            DatEax := TSToDateTime(Int(EntEax.Num), EntEax.Num2);
            DatEbx := TSToDateTime(Int(EntEbx.Num), EntEbx.Num2);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(MinutesBetween(DatEax, DatEbx)));
        end;
        'Date.diffSecond' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit; 
            EntEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit; 
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            DatEax := TSToDateTime(Int(EntEax.Num), EntEax.Num2);
            DatEbx := TSToDateTime(Int(EntEbx.Num), EntEbx.Num2);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(SecondsBetween(DatEax, DatEbx)));
        end;
        'Date.diffMillisecond' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit; 
            EntEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit; 
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            DatEax := TSToDateTime(Int(EntEax.Num), EntEax.Num2);
            DatEbx := TSToDateTime(Int(EntEbx.Num), EntEbx.Num2);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(MillisecondsBetween(DatEax, DatEbx)));
        end;
        'Date.spanYear' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit; 
            EntEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit; 
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            DatEax := TSToDateTime(Int(EntEax.Num), EntEax.Num2);
            DatEbx := TSToDateTime(Int(EntEbx.Num), EntEbx.Num2);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(YearSpan(DatEax, DatEbx)));
        end;
        'Date.spanMonth' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit; 
            EntEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit; 
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            DatEax := TSToDateTime(Int(EntEax.Num), EntEax.Num2);
            DatEbx := TSToDateTime(Int(EntEbx.Num), EntEbx.Num2);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(MonthSpan(DatEax, DatEbx)));
        end;
        'Date.spanDay' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit; 
            EntEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit; 
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            DatEax := TSToDateTime(Int(EntEax.Num), EntEax.Num2);
            DatEbx := TSToDateTime(Int(EntEbx.Num), EntEbx.Num2);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(DaySpan(DatEax, DatEbx)));
        end;
        'Date.spanHour' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit; 
            EntEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit; 
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            DatEax := TSToDateTime(Int(EntEax.Num), EntEax.Num2);
            DatEbx := TSToDateTime(Int(EntEbx.Num), EntEbx.Num2);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(HourSpan(DatEax, DatEbx)));
        end;
        'Date.spanMinute' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit; 
            EntEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit; 
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            DatEax := TSToDateTime(Int(EntEax.Num), EntEax.Num2);
            DatEbx := TSToDateTime(Int(EntEbx.Num), EntEbx.Num2);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(MinuteSpan(DatEax, DatEbx)));
        end;
        'Date.spanSecond' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit; 
            EntEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit; 
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            DatEax := TSToDateTime(Int(EntEax.Num), EntEax.Num2);
            DatEbx := TSToDateTime(Int(EntEbx.Num), EntEbx.Num2);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(SecondSpan(DatEax, DatEbx)));
        end;
        'Date.spanMillisecond' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit; 
            EntEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit; 
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            DatEax := TSToDateTime(Int(EntEax.Num), EntEax.Num2);
            DatEbx := TSToDateTime(Int(EntEbx.Num), EntEbx.Num2);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(MillisecondSpan(DatEax, DatEbx)));
        end;
        'Date.diffWeek' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit; 
            EntEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit; 
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            DatEax := TSToDateTime(Int(EntEax.Num), EntEax.Num2);
            DatEbx := TSToDateTime(Int(EntEbx.Num), EntEbx.Num2);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(WeeksBetween(DatEax, DatEbx)));
        end;
        'Date.spanWeek' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit; 
            EntEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit; 
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            DatEax := TSToDateTime(Int(EntEax.Num), EntEax.Num2);
            DatEbx := TSToDateTime(Int(EntEbx.Num), EntEbx.Num2);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(WeekSpan(DatEax, DatEbx)));
        end;
        'Date.compare' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit; 
            EntEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit; 
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            DatEax := TSToDateTime(Int(EntEax.Num), EntEax.Num2);
            DatEbx := TSToDateTime(Int(EntEbx.Num), EntEbx.Num2);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(CompareDateTime(DatEbx, DatEax)));
        end;
        'Date.compareDate' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit; 
            EntEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit; 
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            DatEax := TSToDateTime(Int(EntEax.Num), EntEax.Num2);
            DatEbx := TSToDateTime(Int(EntEbx.Num), EntEbx.Num2);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(CompareDate(DatEbx, DatEax)));
        end;
        'Date.compareTime' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit; 
            EntEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit; 
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            DatEax := TSToDateTime(Int(EntEax.Num), EntEax.Num2);
            DatEbx := TSToDateTime(Int(EntEbx.Num), EntEbx.Num2);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(CompareTime(DatEbx, DatEax)));
        end;
        'Date.isInRange' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit; 
            EntEcx := stack_pop(env.Stack[env.Settings.StackPointer]);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit; 
            EntEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit; 
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            DatEax := TSToDateTime(Int(EntEax.Num), EntEax.Num2);
            DatEbx := TSToDateTime(Int(EntEbx.Num), EntEbx.Num2);
            DatEcx := TSToDateTime(Int(EntEcx.Num), EntEcx.Num2);
            stack_push(env.Stack[env.Settings.StackPointer], buildBoolean(DateTimeInRange(DatEax, DatEbx, DatEcx)));
        end;
        'Date.isDateInRange' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit; 
            EntEcx := stack_pop(env.Stack[env.Settings.StackPointer]);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit; 
            EntEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit; 
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            DatEax := TSToDateTime(Int(EntEax.Num), EntEax.Num2);
            DatEbx := TSToDateTime(Int(EntEbx.Num), EntEbx.Num2);
            DatEcx := TSToDateTime(Int(EntEcx.Num), EntEcx.Num2);
            stack_push(env.Stack[env.Settings.StackPointer], buildBoolean(DateInRange(DatEax, DatEbx, DatEcx)));
        end;
        'Date.isTimeInRange' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit; 
            EntEcx := stack_pop(env.Stack[env.Settings.StackPointer]);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit; 
            EntEbx := stack_pop(env.Stack[env.Settings.StackPointer]);
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit; 
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            DatEax := TSToDateTime(Int(EntEax.Num), EntEax.Num2);
            DatEbx := TSToDateTime(Int(EntEbx.Num), EntEbx.Num2);
            DatEcx := TSToDateTime(Int(EntEcx.Num), EntEcx.Num2);
            stack_push(env.Stack[env.Settings.StackPointer], buildBoolean(TimeInRange(DatEax, DatEbx, DatEcx)));
        end;
        'Date.getYearWeek' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit;
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            DatEax := TSToDateTime(Int(EntEax.Num), EntEax.Num2);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(WeekOfTheYear(DatEax)));
        end;
        'Date.getMonthWeek' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit;
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            DatEax := TSToDateTime(Int(EntEax.Num), EntEax.Num2);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(WeekOfTheMonth(DatEax)));
        end;
        'Date.format' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;
            StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TDAT, i)) then Exit;
            EntEax := stack_pop(env.Stack[env.Settings.StackPointer]);
            DatEax := TSToDateTime(Int(EntEax.Num), EntEax.Num2);
            stack_push(env.Stack[env.Settings.StackPointer], buildString(FormatDateTime(StrEax, DatEax)));
        end;
        else begin
            Found := false;
        end;
	end;
	Result := Found;
end;

function lib_numbers(i : String; var env : PSEnvironment; var db : PSCommandDB) : Boolean;
var
	Found    : Boolean;
    x, y, z  : ComplexType;
    StrEax   : String;
begin
	Found := true;
	case i of
        'Number.inv' : begin
          	if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := Inv(y);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'Number.abs' : begin
          	if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := Abs(y);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;

        // powers
        'Number.sqr' : begin
          	if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := y*y;
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'Number.cub' : begin
          	if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := y*y*y;
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;

        // roots and logarithms
        'Number.log' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            //z := ln(x)/ln(y);
            z := Log(x,y);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
		'Number.lbin',
        'Number.log2' : begin
            if (env.Settings.StrictType) and (assertComplexLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            //z := log2(x);
            z := Log(2,y);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'Number.ldec',
        'Number.log10' : begin
            if (env.Settings.StrictType) and (assertComplexLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            //z := log10(x);
            z := Log(10,y);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'Number.lhex',
        'Number.log16' : begin
            if (env.Settings.StrictType) and (assertComplexLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := Log(16,y);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'Number.cbrt' : begin
          	if (env.Settings.StrictType) and (assertComplexLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            if (isReal(y)) then z := RealRoot(Real(y),3) else z := Root(y,3);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'Number.sign' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            if (y = 0)
                then z := 0
                else z := y/abs(y);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'Number.sgn' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            if (y = 0)
                then z := 0
                else z := y/abs(y);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'Number.factorial' : begin
          	if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := fact(Int(y));
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'Number.minusOneTo' : begin
          	if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := ComplexNumbers.MinusOneTo(y);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'Number.minusImagTo' : begin
          	if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := MinusImagTo(y);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'Number.plusImagTo',
        'Number.imagTo',
        'Number.ImagTo' : begin
          	if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := ImagTo(y);
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;

        // approximations
        // todo: improve to complex nubers maybe
        'Number.floor' : begin
          	if (env.Settings.StrictType) and (assertRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := ffloor(Real(y));
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'Number.ceiling' : begin
          	if (env.Settings.StrictType) and (assertRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := fceiling(Real(y));
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'Number.round' : begin
          	if (env.Settings.StrictType) and (assertRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := fround(Real(y));
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'Number.truncTo' : begin
            if (env.Settings.StrictType) and (assertIntegerLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
          	if (env.Settings.StrictType) and (assertRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := ftruncTo(Real(y), Int(x));
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'Number.floorTo' : begin
            if (env.Settings.StrictType) and (assertIntegerLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
          	if (env.Settings.StrictType) and (assertRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := ffloorTo(Real(y), Int(x));
            
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'Number.ceilingTo' : begin
            if (env.Settings.StrictType) and (assertIntegerLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
          	if (env.Settings.StrictType) and (assertRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := fceilingTo(Real(y), Int(x));
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;
        'Number.roundTo' : begin
            if (env.Settings.StrictType) and (assertIntegerLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
          	if (env.Settings.StrictType) and (assertRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            z := froundTo(Real(y), Int(x));
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(z));
        end;

        // boolean functions for numbers
        'Number.isPrime' : begin
            if (env.Settings.StrictType) and (assertNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            stack_push(env.Stack[env.Settings.StackPointer], buildBoolean(isPrime(Int(y))));
        end;
		'Number.isEven' : begin
            if (env.Settings.StrictType) and (assertRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            //stack_push(env.Stack[env.Settings.StackPointer], buildBoolean(trunc(y) mod 2 = 0));
            stack_push(env.Stack[env.Settings.StackPointer], buildBoolean(fmod(Real(y), 2) = 0));
        end;
		'Number.isOdd' : begin
            if (env.Settings.StrictType) and (assertRealLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit; 
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            //stack_push(env.Stack[env.Settings.StackPointer], buildBoolean(trunc(y) mod 2 = 1));
            stack_push(env.Stack[env.Settings.StackPointer], buildBoolean(fmod(Real(y), 2) = 1));
        end;
		'Number.isComplex' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            stack_push(env.Stack[env.Settings.StackPointer], buildBoolean((isComplex(y))));
        end;
        'Number.isReal' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            stack_push(env.Stack[env.Settings.StackPointer], buildBoolean((isReal(y))));
        end;
        'Number.isInteger' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            stack_push(env.Stack[env.Settings.StackPointer], buildBoolean(isInteger(y)));
        end;
        'Number.isNatural' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            stack_push(env.Stack[env.Settings.StackPointer], buildBoolean((isNatural(y))));
        end;

        'Number.decToBase' : begin
            if (env.Settings.StrictType) and (assertPositiveNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            if (env.Settings.StrictType) and (assertIntegerLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            stack_push(env.Stack[env.Settings.StackPointer], buildString(convertDecToBase(Int(x), Int(y))));
        end;
        'Number.baseToDec' : begin
            if (env.Settings.StrictType) and (assertPositiveNaturalLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
            StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(convertBaseToDec(StrEax, Int(y))));
        end;
        'Number.decToBin' : begin
            if (env.Settings.StrictType) and (assertIntegerLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            stack_push(env.Stack[env.Settings.StackPointer], buildString(convertDecToBase(Int(x), 2)));
        end;
        'Number.binToDec' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
            StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(convertBaseToDec(StrEax, 2)));
        end;
        'Number.decToOct' : begin
            if (env.Settings.StrictType) and (assertIntegerLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            stack_push(env.Stack[env.Settings.StackPointer], buildString(convertDecToBase(Int(x), 8)));
        end;
        'Number.octToDec' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
            StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(convertBaseToDec(StrEax, 8)));
        end;
        'Number.decToHex' : begin
            if (env.Settings.StrictType) and (assertIntegerLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), i)) then Exit;
            x := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            stack_push(env.Stack[env.Settings.StackPointer], buildString(convertDecToBase(Int(x), 16)));
        end;
        'Number.hexToDec' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
            StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(convertBaseToDec(StrEax, 16)));
        end;
        // todo: improve to complex numbers
        'Number.toDotNumber' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            stack_push(env.Stack[env.Settings.StackPointer], buildString(toNumberString(Real(y), '.')));
        end;
        'Number.toUSNumber' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            stack_push(env.Stack[env.Settings.StackPointer], buildString(toNumberString(Real(y), '.')));
        end;
        'Number.toUSNumber2' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            stack_push(env.Stack[env.Settings.StackPointer], buildString(toNumberString(Real(y), '.', ' ')));
        end;
        'Number.toUSNumber3' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            stack_push(env.Stack[env.Settings.StackPointer], buildString(toNumberString(Real(y), '.', ',')));
        end;
        'Number.toCommaNumber' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            stack_push(env.Stack[env.Settings.StackPointer], buildString(toNumberString(Real(y), ',')));
        end;
        'Number.toEUNumber' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            stack_push(env.Stack[env.Settings.StackPointer], buildString(toNumberString(Real(y), ',')));
        end;
        'Number.toEUNumber2' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            stack_push(env.Stack[env.Settings.StackPointer], buildString(toNumberString(Real(y), ',', ' ')));
        end;
        'Number.toEUNumber3' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            stack_push(env.Stack[env.Settings.StackPointer], buildString(toNumberString(Real(y), ',', '.')));
        end;
        'Number.toEUNumber4' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TNUM, i)) then Exit;
            y := stack_pop(env.Stack[env.Settings.StackPointer]).Num;
            stack_push(env.Stack[env.Settings.StackPointer], buildString(toNumberString(Real(y), ',', '''')));
        end;
        'Number.valueCommaNumber' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
            StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(getNumberFromNumberString(StrEax, ',', '.')));
        end;
        'Number.valueDotNumber' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
            StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(getNumberFromNumberString(StrEax, '.', ',')));
        end;
        'Number.valueEUNumber' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
            StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(getNumberFromNumberString(StrEax, ',', '.')));
        end;
        'Number.valueUSNumber' : begin
            if (env.Settings.StrictType) and (assertEntityLocated(env.Stack[env.Settings.StackPointer], stack_get(env.Stack[env.Settings.StackPointer]), TSTR, i)) then Exit;  
            StrEax := stack_pop(env.Stack[env.Settings.StackPointer]).Str;
            stack_push(env.Stack[env.Settings.StackPointer], buildNumber(getNumberFromNumberString(StrEax, '.', ',')));
        end;
        else begin
            Found := false;
        end;
	end;
	Result := Found;
end;