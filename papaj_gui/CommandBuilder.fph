

// old 
function checkLevelChar(input : Char) : Integer;
begin
         if (input = '{') then Result := 1
    else if (input = '[') then Result := 1
    else if (input = '(') then Result := 1
	else if (input = '}') then Result := -1
    else if (input = ']') then Result := -1
    else if (input = ')') then Result := -1
    else Result := 0;
    //writeln(input, ': ', Result);
end;

// new
function checkLevelCharInc(input : Char) : Integer;
begin
         if (input = '{') then Result := 1
    else if (input = '[') then Result := 1
    else if (input = '(') then Result := 1
    else Result := 0;
    //writeln(input, ': ', Result);
end;

function checkLevelCharDec(input : Char) : Integer;
begin
	     if (input = '}') then Result := 1
    else if (input = ']') then Result := 1
    else if (input = ')') then Result := 1
    else Result := 0;
end;

function splitToWords(input : String) : TStringArray;
var
    L      : TStringArray;
    i      : LongInt = 0;
    j      : LongInt = 1;
    cursor : LongInt = 1;
    quoted : Boolean = False;
    level  : LongInt = 0;
    str    : String;
begin
    if (Length(input) = 0) then
    begin
        SetLength(L, 0);
        Result := L;
    end else begin
        SetLength(L, 1);
        SetLength(L[0], 0);
        // first ones
        if (input[cursor] = '"') then quoted := not quoted;
        if not quoted then 
        begin
            if checkLevelCharInc(input[cursor]) = 1 then
            begin
                level := level + 1;
            end;
            L[i] := '' + input[cursor];
            if checkLevelCharDec(input[cursor]) = 1 then
            begin
                level := level - 1;
            end;
        end else begin
            L[i] := '' + input[cursor];
        end;
        // next ones
        for cursor := 2 to Length(input) do
        begin
            if (level <= 0) then
            begin
                if (input[cursor] = '"') and (input[cursor-1] <> '\') then quoted := not quoted;
                if not quoted then 
                begin
                    if checkLevelCharInc(input[cursor]) = 1 then
                    begin
                        L[i] := trim(L[i]);
                        level := level + 1;
                        i := i + 1;
                        SetLength(L, i+1);
                        SetLength(L[i], 0);
                    end;
                    L[i] := L[i] + input[cursor];
                    if checkLevelCharDec(input[cursor]) = 1 then
                    begin
                        L[i] := trim(L[i]);
                        level := level - 1;
                        i := i + 1;
                        SetLength(L, i+1);
                        SetLength(L[i], 0);
                    end;
                end else begin
                    L[i] := L[i] + input[cursor];
                end;
            end else begin
                if (input[cursor] = '"') and (input[cursor-1] <> '\') then quoted := not quoted;
                if not quoted then 
                begin
                    if checkLevelCharInc(input[cursor]) = 1 then
                    begin
                        level := level + 1;
                        //i := i + 1;
                    end;
                    L[i] := L[i] + input[cursor];
                    if checkLevelCharDec(input[cursor]) = 1 then
                    begin
                        level := level - 1;
                        if (level = 0) then
                        begin
                            L[i] := trim(L[i]);
                            i := i+1;
                            SetLength(L, i+1);
                            SetLength(L[i], 0);
                        end;
                        //i := i + 1;
                    end;
                end else begin
                    L[i] := L[i] + input[cursor];
                end;
            end;
        end;
        L[i] := trim(L[i]);
    end;
    Result := L;
end;

// split string to words, treat "strings" as one word
function splitExtractStrings(input : String) : TStringArray;
var
    L      : TStringArray;
    cursor : LongInt = 1;
    i      : LongInt = 0;
    quoted : Boolean = False;
begin
    if (Length(input) = 0) then
    begin
        SetLength(L, 0);
        Result := L;
    end else begin
        SetLength(L, 1);
        SetLength(L[0], 0);
        if (input[cursor] = '"') then quoted := not quoted;
        if (quoted) or (not (input[cursor] in [' ', #9, #13, #10])) then
        begin
            L[i] := L[i] + input[cursor];
        end;
        for cursor := 2 to Length(input) do
        begin
            if (input[cursor] = '"') and (input[cursor-1] <> '\') then quoted := not quoted;
            if (not quoted) and (input[cursor] in [' ', #9, #13, #10]) then
            begin 
                if (input[cursor+1] in [' ', #9, #13, #10]) and (cursor <= Length(input)) then continue;
                L[i] := trim(L[i]);
                i := i+1;
                SetLength(L, i+1);
                SetLength(L[i], 0);
                //while (input[cursor+1] in [' ', #9, #13, #10]) and (cursor < Length(input)) do continue;
            end else begin
                L[i] := L[i] + input[cursor];
            end;
        end;
        L[i] := trim(L[i]);
    end;
    Result := L;
end;

// build the final list for PS Command Builder
function makeWords(L : TStringArray) : TStringArray;
var
    M, H : TStringArray;
    i, j : LongInt;
    s    : LongInt;
begin
    SetLength(M, 0);
    for i := 0 to Length(L)-1 do
    begin
        if Length(L[i]) = 0 then continue;
        if (checkLevelCharInc(L[i][1]) = 0) then
        begin
            H := splitExtractStrings(L[i]);
            s := Length(M);
            SetLength(M, s+Length(H));
            for j := 0 to Length(H)-1 do M[s+j] := H[j];
        end else begin
            s := Length(M);
            SetLength(M, s+1);
            M[s] := L[i];
        end;
    end;
    // remove empty strings in the end
    //writeln(M[Length(M)-1]);
    //writeln(Length(M[Length(M)-1]));
    while Length(M[Length(M)-1]) = 0 do SetLength(M, Length(M)-1); 
    Result := M;
end;

// function that does all above in once
function getListOfWords(input : String) : TStringArray;
begin
    if Length(input) = 0 
        then Result := Default(TStringArray)
        else Result := makeWords(splitToWords(input));
end;


// string trimmer
function trimBraces(input : String) : String;
begin
    Result := trim(input.Substring(1, input.Length - 2));
end;

// split arguments for FOR loop, treat "strings" as one word
function splitForExtractStrings(input : String) : TStringArray;
var
    L      : TStringArray;
    cursor : LongInt = 1;
    i      : LongInt = 0;
    quoted : Boolean = False;
begin
    if (Length(input) = 0) then
    begin
        SetLength(L, 0);
        Result := L;
    end else begin
        SetLength(L, 1);
        SetLength(L[0], 0);
        if (input[cursor] = '"') then quoted := not quoted;
        if (quoted) or (not (input[cursor] in [':', ';'])) then
        begin
            L[i] := L[i] + input[cursor];
        end;
        for cursor := 2 to Length(input) do
        begin
            if (input[cursor] = '"') and (input[cursor-1] <> '\') then quoted := not quoted;
            if (not quoted) and (input[cursor] in [':', ';']) then
            begin 
                if (input[cursor+1] in [':', ';']) and (cursor <= Length(input)) then continue;
                L[i] := trim(L[i]);
                i := i+1;
                SetLength(L, i+1);
                SetLength(L[i], 0);
                //while (input[cursor+1] in [':', ';']) and (cursor < Length(input)) do continue;
            end else begin
                L[i] := L[i] + input[cursor];
            end;
        end;
        L[i] := trim(L[i]);
    end;
    Result := L;
end;

// ========================================================
// create list of commands using list of words
// procedure PSEnvironment.makeListOfCommands(L : TStringArray; var db : PSCommandDB; Args : TStringArray = Default(TStringArray));
// function PSEnvironment.makeListOfCommands(L : TStringArray; var db : PSCommandDB; Args : TStringArray = Default(TStringArray)) : PSCommandDB;
//function PSEnvironment.makeListOfCommands(L : TStringArray; Args : TStringArray = Default(TStringArray)) : PSCommandDB;
function PSEnvironment.makeListOfCommands(L : TStringArray; db : PSCommandDB; Args : TStringArray = Default(TStringArray)) : PSCommandDB;
var
	index  : LongInt;
    x, y   : LongInt;
    z, z1  : LongInt;
    z2, z3 : LongInt;
    s1, s2 : String;
    StrEax : String;
    Num    : ComplexType;
    Code   : SHortInt;
    //M              : TStringArrArray;
    M              : TStringArray = NIL;
    N              : TStringArray = NIL;
    //mode           : PSReaderMode = M_NORM;
    ConditionBuilt : Boolean = False;
begin
    x := Length(db.Commands);
    y := 0;
    //{debug-makelist} writeln('make list of commands at ', x);
    SetLength(db.Commands, x+1);
    if Length(Args) > 0 then
    begin
        //{debug-ifargs} writeln('args');
        //{debug-makelist} writeln('args ', #9, Length(Args));
        if (Length(Args[0]) > 0) and (Args[0][1] = '(') then Args[0] := RightStr(Args[0], Length(Args[0])-1); 
        for index := Length(Args)-1 downto 0 do
        begin
            if (Args[index] = '') then continue;
            if (Args[index][1] = '$') then Args[index] := RightStr(Args[index], Length(Args[index])-1);
            if isValidForVariables(Args[index]) then
            begin
                SetLength(db.Commands[x], y+1);
                db.Commands[x][y] := buildSetLocalVar(Args[index]);  
            end else begin
                raiserror('EVariable:CSetInvalid: Invalid variable string at "'+Args[index]+'"');
            end; 
            y := y+1;
        end;
    //{debug-ifargs} end else begin
    //{debug-ifargs}     writeln('no args');
    end;
    index := 0;
    //{debug-makelist} writeln('length ', #9, x, #9, Length(L));
	while (index < Length(L)) do
	begin
        if (L[index] = '') then
		begin
			Inc(index);
			continue;
		end;
        //{debug-makelist} writeln('read ', #9, index, #9, x, #9, y, #9, L[index]);

        SetLength(db.Commands[x], y+1);
        case L[index] of
            '->' : begin
                index := index + 1;
                while (L[index] = '') do index := index + 1; 
                if (L[index][1] = '$') then L[index] := RightStr(L[index], Length(L[index])-1);
                if isValidForVariables(L[index]) then
                begin
                    if LeftStr(L[index], 7) = 'global.' then 
                    begin
                        db.Commands[x][y] := buildSetGlobalVar(L[index]);
                    end else begin
                        db.Commands[x][y] := buildSetLocalVar(L[index]);
                    end;     
                end else begin
                    raiserror('EVariable:CSetInvalid: Invalid variable string at "'+L[index]+'"');
                end;
            end;
            '+'   : db.Commands[x][y] := buildCalcAdd();
            '-'   : db.Commands[x][y] := buildCalcSub();
            '++'  : db.Commands[x][y] := buildCalcInc();
            '--'  : db.Commands[x][y] := buildCalcDec();
            '*'   : db.Commands[x][y] := buildCalcMul();
            '/'   : db.Commands[x][y] := buildCalcDiv();
            '='   : db.Commands[x][y] := buildTestEq();
		    '!='  : db.Commands[x][y] := buildTestNeq();
		    '>'   : db.Commands[x][y] := buildTestGt();
		    '<'   : db.Commands[x][y] := buildTestLt();
		    '<='  : db.Commands[x][y] := buildTestLe();
		    '>='  : db.Commands[x][y] := buildTestGe();
            'mod' : db.Commands[x][y] := buildCalcMod();
            'div' : db.Commands[x][y] := buildCalcIntegerDiv();
            'shl' : db.Commands[x][y] := buildCalcShl();
            'shr' : db.Commands[x][y] := buildCalcShr();
		    'and' : db.Commands[x][y] := buildTestAnd();
		    'or'  : db.Commands[x][y] := buildTestOr();
		    'xor' : db.Commands[x][y] := buildTestXor();
		    'not' : db.Commands[x][y] := buildTestNot();
            'inc' : db.Commands[x][y] := buildCalcInc();
            'dec' : db.Commands[x][y] := buildCalcDec();
            'cmod' : db.Commands[x][y] := buildCalcMod2();
            'cdiv' : db.Commands[x][y] := buildCalcIntegerDiv2();
            // command
            'rem'      : db.Commands[x][y] := buildCmdPop();
            'clone'    : db.Commands[x][y] := buildCmdClone();
            'qshift'   : db.Commands[x][y] := buildCmdQShift();
            'print'    : db.Commands[x][y] := buildCmdPrint();
            'println'  : db.Commands[x][y] := buildCmdPrintLn();
            'scan'     : db.Commands[x][y] := buildCmdScan();
            'size'     : db.Commands[x][y] := buildCmdSize();
            'all'      : db.Commands[x][y] := buildCmdSize();
            'call'     : db.Commands[x][y] := buildCallFunction();
            'break'    : db.Commands[x][y] := buildCmdBreak();
            'continue' : db.Commands[x][y] := buildCmdContinue();
            else begin
                if ((LeftStr(L[index], 1) = '"') and (RightStr(L[index], 1) = '"')) then begin
                    StrEax := L[index];
                    StrEax := StrEax.Substring(1, StrEax.Length - 2);
                    if Settings.stringmode = MCLIKE then StrEax := string_fromC(StrEax);
                    db.Commands[x][y] := buildCmdPush(buildString(StrEax));
                end else if LeftStr(L[index], 1) = '{' then begin
                    z := Length(db.Commands);
                    db := buildCommands(trimBraces(L[index]), db);
                    db.Commands[x][y] := buildCmdJump(z);
                end else if LeftStr(L[index], 1) = '[' then begin
                    z := Length(db.Commands);
                    db := buildCommands(trimBraces(L[index]), db);
                    db.Commands[x][y] := buildCreateArray(z);
                end else if LeftStr(L[index], 1) = '$' then begin
                    L[index] := RightStr(L[index], Length(L[index])-1);
                    if (L[index] <> '') then
                    begin
                        if isValidForVariables(L[index]) then
                        begin
                            if LeftStr(L[index], 7) = 'global.' then 
                            begin
                                db.Commands[x][y] := buildGetGlobalVar(L[index]);
                            end else begin
                                db.Commands[x][y] := buildGetLocalVar(L[index]);
                            end;     
                        end else begin
                            raiserror('EVariable:CGetInvalid: Invalid variable string at $'+L[index]+'');
                        end;
                    end else begin
                        db.Commands[x][y] := buildCmdPush(raiseGetUnnamedVariable());
                    end;
                end else if LeftStr(L[index], 1) = '>' then begin
                    L[index] := RightStr(L[index], Length(L[index])-1);
                    if (L[index] <> '') then
                    begin
                        if isValidForVariables(L[index]) then
                        begin
                            if LeftStr(L[index], 7) = 'global.' then 
                            begin
                                db.Commands[x][y] := buildSetGlobalVar(L[index]);
                            end else begin
                                db.Commands[x][y] := buildSetLocalVar(L[index]);
                            end;     
                        end else begin
                            raiserror('EVariable:CSetInvalid: Invalid variable string at >'+L[index]+'');
                        end;
                    end else begin
                        db.Commands[x][y] := buildCmdPush(raiseGetUnnamedVariable());
                    end;
                end else if LeftStr(L[index], 2) = '->' then begin
                    L[index] := RightStr(L[index], Length(L[index])-2);
                    if (L[index] <> '') then
                    begin
                        if (L[index][1] = '$') then L[index] := RightStr(L[index], Length(L[index])-1);
                        if isValidForVariables(L[index]) then
                        begin
                            if LeftStr(L[index], 7) = 'global.' then 
                            begin
                                db.Commands[x][y] := buildSetGlobalVar(L[index]);
                            end else begin
                                db.Commands[x][y] := buildSetLocalVar(L[index]);
                            end;     
                        end else begin
                            raiserror('EVariable:CSetInvalid: Invalid variable string at >'+L[index]+'');
                        end;
                    end else begin
                        db.Commands[x][y] := buildCmdPush(raiseGetUnnamedVariable());
                    end;
                end else if LeftStr(L[index], 2) = '@@' then begin
                    L[index] := RightStr(L[index], Length(L[index])-2);
                    if (L[index] <> '') then
                    begin
                        if isValidForVariables(L[index]) then
                        begin
                            if LeftStr(L[index], 7) = 'global.' then 
                            begin
                                db.Commands[x][y] := buildGetGlobalVar(L[index]);
                            end else begin
                                db.Commands[x][y] := buildGetLocalVar(L[index]);
                            end;  
                            y := y+1;
                            SetLength(db.Commands[x], y+1);   
                            db.Commands[x][y] := buildCallFunction(L[index]);
                        end else begin
                            raiserror('EVariable:CGetInvalid: Invalid variable string at $'+L[index]+'');
                        end;
                    end else begin
                        db.Commands[x][y] := buildCmdPush(raiseGetUnnamedVariable());
                    end;
                end else if LeftStr(L[index], 1) = '@' then begin
                    StrEax := L[index];
                    if (LeftStr(L[index+1], 1) = '(') and (RightStr(L[index+1], 1) = ')') then
                    begin
                        index := index + 1;
                        L[index] := trimBraces(L[index]);
                        db.Commands[x][y] := buildCmdEval(StrEax+'('+L[index]+')');
                    end else begin
                        db.Commands[x][y] := buildCmdEval(StrEax);
                    end;
                end else if checkWord(L[index], 'times', 5) then begin
                    L[index] := RightStr(L[index], Length(L[index])-5);
                    while (L[index] = '') do index := index + 1; 
                    z := Length(db.Commands);
                    if (LeftStr(L[index], 1) = '{') and (RightStr(L[index], 1) = '}') then
                    begin
                        db := buildCommands(trimBraces(L[index]), db);
                    end else begin
                        db := buildCommands(L[index], db);
                    end;
                    //db := buildCommands(trimBraces(L[index]), db);
                    db.Commands[x][y] := buildDoTimes(z);
                end else if checkWord(L[index], 'while', 5) then begin
                    L[index] := RightStr(L[index], Length(L[index])-5);
                    while (L[index] = '') do index := index + 1; 
                    z := Length(db.Commands);
                    if (LeftStr(L[index], 1) = '(') and (RightStr(L[index], 1) = ')') then
                    begin
                        db := buildCommands(trimBraces(L[index]), db);
                    end else begin
                        db := buildCommands(L[index], db);
                    end;
                    index := index + 1;
                    while (L[index] = '') do index := index + 1; 
                    z1 := Length(db.Commands);
                    if (LeftStr(L[index], 1) = '{') and (RightStr(L[index], 1) = '}') then
                    begin
                        db := buildCommands(trimBraces(L[index]), db);
                    end else begin
                        db := buildCommands(L[index], db);
                    end;
                    db.Commands[x][y] := buildDoWhile(z, z1);
                end else if checkWord(L[index], 'do', 2) then begin
                    L[index] := RightStr(L[index], Length(L[index])-2);
                    while (L[index] = '') do index := index + 1; 
                    z1 := Length(db.Commands);
                    if (LeftStr(L[index], 1) = '{') and (RightStr(L[index], 1) = '}') then
                    begin
                        db := buildCommands(trimBraces(L[index]), db);
                    end else begin
                        db := buildCommands(L[index], db);
                    end;
                    index := index + 1;
                    while (L[index] = '') do index := index + 1; 
                    if checkWord(L[index], 'while', 5) then 
                    begin
                        L[index] := RightStr(L[index], Length(L[index])-5);
                        while (L[index] = '') do index := index + 1; 
                        z := Length(db.Commands);
                        if (LeftStr(L[index], 1) = '(') and (RightStr(L[index], 1) = ')') then
                        begin
                            db := buildCommands(trimBraces(L[index]), db);
                        end else begin
                            db := buildCommands(L[index], db);
                        end;
                        db.Commands[x][y] := buildDoDoWhile(z, z1);
                    end else if checkWord(L[index], 'until', 5) then
                    begin
                        L[index] := RightStr(L[index], Length(L[index])-5);
                        while (L[index] = '') do index := index + 1; 
                        z := Length(db.Commands);
                        if (LeftStr(L[index], 1) = '(') and (RightStr(L[index], 1) = ')') then
                        begin
                            db := buildCommands(trimBraces(L[index]), db);
                        end else begin
                            db := buildCommands(L[index], db);
                        end;
                        db.Commands[x][y] := buildDoDoUntil(z, z1);
                    end else begin
                        raiserror('ESyntax:CDoLoop: Invalid syntax of a DO-WHILE/DO-UNTIL loop');
                    end;
                    //{*
                end else if checkWord(L[index], 'for', 3) then begin
                    L[index] := RightStr(L[index], Length(L[index])-3);
                    while (L[index] = '') do index := index + 1; 
                    if (LeftStr(L[index], 1) = '(') and (RightStr(L[index], 1) = ')') then
                    begin
                        //M := getScopedCommands(L, index, RightStr(L[index], Length(L[index])-1));
                        //M := getScopedDelimitedCommands(L, index, RightStr(L[index], Length(L[index])-1));
                        // delimit
                        //N := getListOfWords(trimBraces(L[index]));
                        StrEax := trimBraces(L[index]);
                        M := splitForExtractStrings(StrEax);
                    end else begin
                        raiserror('ESyntax:CFor: Invalid syntax of a FOR loop');
                        //M := getScopedCommand(index, L[index]);
                    end;
                    case Length(M) of
                        3 : begin
                            //z1 := Length(db.Commands);
                            //makeListOfCommands(M[0], db);
                            //z2 := Length(db.Commands);
                            //makeListOfCommands(M[1], db);
                            //z3 := Length(db.Commands);
                            //makeListOfCommands(M[2], db);
                            z1 := Length(db.Commands);
                            db := buildCommands(trim(M[0]), db);
                            z2 := Length(db.Commands);
                            db := buildCommands(trim(M[1]), db);
                            z3 := Length(db.Commands);
                            db := buildCommands(trim(M[2]), db);
                            index := index + 1;
                            while (L[index] = '') do index := index + 1; 
                            z := Length(db.Commands);
                            if (LeftStr(L[index], 1) = '{') and (RightStr(L[index], 1) = '}') then
                            begin
                                db := buildCommands(trimBraces(L[index]), db);
                            end else begin
                                db := buildCommands(L[index], db);
                            end;
                            db.Commands[x][y] := buildDoFor1(z1, z2, z3, z);
                        end;
                        2 : begin
                            // to fix - fixed apparently
                            N := trim(M[0]).Split([' ', #9, #13, #10]);
                            z2 := Length(N)-1;
                            if (z2 <= 2) then
                            begin
                                //writeln(z2);
                                if (z2 < 0) then raiserror('ESyntax:CForEach: No parameters in the FOR-EACH loop'); 
                                //writeln('ok');
                                if (z2 >= 0) then s2 := N[z2]       else s2 := ''; 
                                //writeln('ok');
                                if (z2 >= 1) then s1 := N[z2-1]     else s1 := ''; 
                                //writeln('ok');
                                if (z2  = 2) then StrEax := N[z2-2] else StrEax := ''; 
                                //writeln('ok');
                                if (StrEax <> '') and (StrEax <> 'const') then raiserror('ESyntax:CForEach: Invalid amount of parameters in the FOR-EACH loop'); 
                                if (Length(s1) > 0) and (s1[1] = '$') then s1 := RightStr(s1, Length(s1)-1);
                                if (s2[1] = '$') then s2 := RightStr(s2, Length(s2)-1);
                                if (Length(s1) > 0) and (not isValidForVariables(s1)) then
                                begin
                                    raiserror('EVariable:CSetInvalid: Invalid name of variable at "'+s1+'"');
                                end;
                                if (not isValidForVariables(s2)) then
                                begin
                                    raiserror('EVariable:CSetInvalid: Invalid name of variable at "'+s2+'"');
                                end;
                            end else begin
                                raiserror('ESyntax:CForEach: Invalid amount of parameters in the FOR-EACH loop');
                            end;
                            z1 := Length(db.Commands);
                            //makeListOfCommands(M[1], db);
                            db := buildCommands(trim(M[1]), db);
                            index := index + 1;
                            while (L[index] = '') do index := index + 1; 
                            z := Length(db.Commands);
                            if (LeftStr(L[index], 1) = '{') and (RightStr(L[index], 1) = '}') then
                            begin
                                db := buildCommands(trimBraces(L[index]), db);
                            end else begin
                                //makeListOfCommands(getScopedCommand(index, L[index]), db);
                                db := buildCommands(L[index], db);
                            end;
                            db.Commands[x][y] := buildDoFor2(StrEax, s1, s2, z1, z);
                        end;
                        else begin
                            raiserror('ESyntax:CFor: Invalid syntax of a FOR loop');
                        end;
                    end;
                    for z := 0 to Length(M)-1 do SetLength(M[z], 0);
                    SetLength(M, 0);
                   //*} 
                end else if checkWord(L[index], 'if', 2) then begin
                    L[index] := RightStr(L[index], Length(L[index])-2);
                    while (L[index] = '') do index := index + 1; 
                    ConditionBuilt := False;
                    z := Length(db.Conditionals);
                    SetLength(db.Conditionals, z+1);
                    z2 := Length(db.Commands);
                    if (LeftStr(L[index], 1) = '(') and (RightStr(L[index], 1) = ')') then
                    begin
                        db := buildCommands(trimBraces(L[index]), db);
                    end else begin
                        db := buildCommands(L[index], db);
                    end;
                    index := index + 1;
                    while (L[index] = '') do index := index + 1; 
                    z3 := Length(db.Commands);
                    if (LeftStr(L[index], 1) = '{') and (RightStr(L[index], 1) = '}') then
                    begin
                        db := buildCommands(trimBraces(L[index]), db);
                    end else begin
                        db := buildCommands(L[index], db);
                    end;
                    db.Conditionals[z].MainItem.Condition := z2;
                    db.Conditionals[z].MainItem.Instruction := z3;
                    db.Conditionals[z].ElseItem := -1;
                    z1 := Length(db.Conditionals[z].ElifItems);
                    //repeat
                    while (not ConditionBuilt) and (index < Length(L)) do
                    begin
                        index := index + 1;
                        if (index = Length(L)) then break;
                        while (L[index] = '') do index := index + 1; 
                        if checkWord(L[index], 'elif', 4) then
                        begin
                            L[index] := RightStr(L[index], Length(L[index])-4);
                            while (L[index] = '') do index := index + 1; 
                            z2 := Length(db.Commands);
                            if (LeftStr(L[index], 1) = '(') and (RightStr(L[index], 1) = ')') then
                            begin
                                db := buildCommands(trimBraces(L[index]), db);
                            end else begin
                                db := buildCommands(L[index], db);
                            end;
                            index := index + 1;
                            while (L[index] = '') do index := index + 1; 
                            z3 := Length(db.Commands);
                            if (LeftStr(L[index], 1) = '{') and (RightStr(L[index], 1) = '}') then
                            begin
                                db := buildCommands(trimBraces(L[index]), db);
                            end else begin
                                db := buildCommands(L[index], db);
                            end;
                            SetLength(db.Conditionals[z].ElifItems, z1+1);
                            db.Conditionals[z].ElifItems[z1].Condition := z2;
                            db.Conditionals[z].ElifItems[z1].Instruction := z3;
                            z1 := z1 + 1;
                            while (L[index] = '') do index := index + 1; 
                        end else if checkWord(L[index], 'else', 4) then
                        begin
                            L[index] := RightStr(L[index], Length(L[index])-4);
                            while (L[index] = '') do index := index + 1; 
                            z3 := Length(db.Commands);
                            if (LeftStr(L[index], 1) = '{') and (RightStr(L[index], 1) = '}') then
                            begin
                                db := buildCommands(trimBraces(L[index]), db);
                            end else begin
                                db := buildCommands(L[index], db);
                            end;
                            db.Conditionals[z].ElseItem := z3;
                            ConditionBuilt := True;
                        end else begin
                            Dec(Index);
                            ConditionBuilt := True;
                        end;
                    end;
                    //until ConditionBuilt;
                    db.Commands[x][y] := buildDoIf(z);
                end else if checkWord(L[index], 'function', 8) then begin
                    L[index] := RightStr(L[index], Length(L[index])-8);
                    while (L[index] = '') do index := index + 1; 
                    z := Length(Scripts);
                    SetLength(Scripts, z+1);
                    //{debug-makelist} writeln('attempt new function at ', z, #9, ' coords ', x, ' ', y);
                    if (LeftStr(L[index], 1) = '(') then
                    begin
                        if (LeftStr(L[index], 1) = '(') and (RightStr(L[index], 1) = ')') then
                        begin
                            N := getListOfWords(trimBraces(L[index]));
                        end else begin
                            N := getListOfWords(L[index]);
                        end;
                        index := index + 1;
                    end else begin
                        SetLength(N, 0);
                    end;
                    //{debug-makelist} writeln(Length(db.commands[x]));
                    SetLength(db.commands[x], Length(db.commands[x])+1);
                    if (LeftStr(L[index], 1) = '{') and (RightStr(L[index], 1) = '}') then
                    begin
                        Scripts[z] := buildCommands(trimBraces(L[index]), Scripts[z], N);
                    end else begin
                        Scripts[z] := buildCommands(L[index], Scripts[z], N);
                    end;
                    //{debug-makelist} writeln('building new function at ', z, #9, ' coords ', x, ' ', y);
                    //{debug-makelist} writeln(Length(Scripts[z].commands));
                    //{debug-makelist} writeln(Length(Scripts[z].commands[0]));
                    //{debug-makelist} writeln(Length(db.commands));
                    //{debug-makelist} writeln(Length(db.commands[x]));
                    //{debug-makelist} writeln();
                    //{debug-makelist} //writeln('lens ', Length(db.Commands), #9, Length(db.Commands[x]));
                    //{debug-makelist} writeln();
                    db.Commands[x][y] := buildCreateFunction(z);
                    //{debug-makelist} writeln('new function at ', #9, z);
                    SetLength(N, 0);
                    while (L[index] = '') do index := index + 1; 
                end else if checkWord(L[index], 'fun', 3) then begin
                    // remove that useless checks
                    L[index] := RightStr(L[index], Length(L[index])-3);
                    while (L[index] = '') do index := index + 1; 
                    z := Length(Scripts);
                    SetLength(Scripts, z+1);
                    //{debug-makelist} writeln('attempt new function at ', z, #9, ' coords ', x, ' ', y);
                    if (LeftStr(L[index], 1) = '(') then
                    begin
                        if (LeftStr(L[index], 1) = '(') and (RightStr(L[index], 1) = ')') then
                        begin
                            N := getListOfWords(trimBraces(L[index]));
                        end else begin
                            N := getListOfWords(L[index]);
                        end;
                        index := index + 1;
                    end else begin
                        SetLength(N, 0);
                    end;
                    //{debug-makelist} writeln(Length(db.commands[x]));
                    SetLength(db.commands[x], Length(db.commands[x])+1);
                    if (LeftStr(L[index], 1) = '{') and (RightStr(L[index], 1) = '}') then
                    begin
                        Scripts[z] := buildCommands(trimBraces(L[index]), Scripts[z], N);
                    end else begin
                        Scripts[z] := buildCommands(L[index], Scripts[z], N);
                    end;
                    //{debug-makelist} writeln('building new function at ', z, #9, ' coords ', x, ' ', y);
                    //{debug-makelist} writeln(Length(Scripts[z].commands));
                    //{debug-makelist} writeln(Length(Scripts[z].commands[0]));
                    //{debug-makelist} writeln(Length(db.commands));
                    //{debug-makelist} writeln(Length(db.commands[x]));
                    //{debug-makelist} writeln();
                    //{debug-makelist} //writeln('lens ', Length(db.Commands), #9, Length(db.Commands[x]));
                    //{debug-makelist} writeln();
                    db.Commands[x][y] := buildCreateFunction(z);
                    //{debug-makelist} writeln('new function at ', #9, z);
                    SetLength(N, 0);
                    while (L[index] = '') do index := index + 1;
                end else if (LeftStr(L[index], 1) = '(') and (RightStr(L[index], 1) = ')') then begin
                    z := Length(Scripts);
                    SetLength(Scripts, z+1);
                    StrEax := trimBraces(L[index]);
                    Scripts[z] := makeListOfCommands(getListOfWords(StrEax), Scripts[z]);
                    SetLength(db.Commands[x], y+1);
                    db.Commands[x][y] := buildCreateFunction(z);
                    SetLength(N, 0);
                    while (L[index] = '') do index := index + 1;
                end else begin
                    Val(L[index], Num, Code);
                    //writeln('code ', Code);
                    if Code <> 0 then
                    begin
                        db.Commands[x][y] := buildCmdEval(L[index]);
                    end else begin
                        db.Commands[x][y] := buildCmdPush(buildNumber(Num));
                    end;
                end;
            end;
        end;
        y := y+1;
        Inc(index);
    end;
    //{debug-makelist} writeln('done');
    Result := db;
end;


//function PSEnvironment.buildCommands(input : String) : PSCommandDB;
//procedure PSEnvironment.buildCommands(input : String; var db : PSCommandDB; Args : TStringArray = Default(TStringArray));
//function PSEnvironment.buildCommands(input : String; var db : PSCommandDB; Args : TStringArray = Default(TStringArray)) : PSCommandDB;
//function PSEnvironment.buildCommands(input : String; Args : TStringArray = Default(TStringArray)) : PSCommandDB;
function PSEnvironment.buildCommands(input : String; db : PSCommandDB; Args : TStringArray = Default(TStringArray)) : PSCommandDB;
//begin
//    makeListOfCommands(getListOfWords(input), db, Args);
//end;
var
    L   : TStringArray;
begin
    //{debug-makelist} writeln('get list of words');
    L := getListOfWords(input);
    //{debug-makelist} writeln('list got');
    //res := makeListOfCommands(L, res, Args);
    db := makeListOfCommands(L, db, Args);
    Result := db;
end;
